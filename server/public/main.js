!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=57)}([function(e,t,n){"use strict";e.exports=n(28)},function(e,t,n){"use strict";var r=n(15),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function l(e){return null!==e&&"object"==typeof e}function u(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function s(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:l,isPlainObject:u,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:s,isStream:function(e){return l(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){u(t[r])&&u(n)?t[r]=e(t[r],n):u(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports=n(36)},function(e,t,n){e.exports=n(32)()},function(e,t,n){"use strict";var r=n(7),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var l=u(t),h=u(n),g=0;g<a.length;++g){var v=a[g];if(!(i[v]||r&&r[v]||h&&h[v]||l&&l[v])){var y=d(n,v);try{s(t,v,y)}catch(e){}}}}return t}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(29)},function(e,t,n){"use strict";e.exports=n(34)},,function(e,t,n){"use strict";(function(e,r){var o,i=n(23);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(14),n(35)(e))},function(e,t,n){e.exports=function(){"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function u(e,t,n){return(u=l()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&a(o,n.prototype),o}).apply(null,arguments)}function s(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e,t,n){return(c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=i(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}var f=function(e){return Object.keys(e).map((function(t){return e[t]}))},d=function(e){return Array.prototype.slice.call(e)},p=function(e){console.warn("".concat("SweetAlert2:"," ").concat(e))},m=function(e){console.error("".concat("SweetAlert2:"," ").concat(e))},h=[],g=function(e,t){var n;n='"'.concat(e,'" is deprecated and will be removed in the next major release. Please use "').concat(t,'" instead.'),-1===h.indexOf(n)&&(h.push(n),p(n))},v=function(e){return"function"==typeof e?e():e},y=function(e){return e&&"function"==typeof e.toPromise},b=function(e){return y(e)?e.toPromise():Promise.resolve(e)},w=function(e){return e&&Promise.resolve(e)===e},x=Object.freeze({cancel:"cancel",backdrop:"backdrop",close:"close",esc:"esc",timer:"timer"}),k=function(t){return t instanceof Element||function(t){return"object"===e(t)&&t.jquery}(t)},C=function(e){var t={};for(var n in e)t[e[n]]="swal2-"+e[n];return t},E=C(["container","shown","height-auto","iosfix","popup","modal","no-backdrop","no-transition","toast","toast-shown","toast-column","show","hide","close","title","header","content","html-container","actions","confirm","deny","cancel","footer","icon","icon-content","image","input","file","range","select","radio","checkbox","label","textarea","inputerror","input-label","validation-message","progress-steps","active-progress-step","progress-step","progress-step-line","loader","loading","styled","top","top-start","top-end","top-left","top-right","center","center-start","center-end","center-left","center-right","bottom","bottom-start","bottom-end","bottom-left","bottom-right","grow-row","grow-column","grow-fullscreen","rtl","timer-progress-bar","timer-progress-bar-container","scrollbar-measure","icon-success","icon-warning","icon-info","icon-question","icon-error"]),S=C(["success","warning","info","question","error"]),T=function(){return document.body.querySelector(".".concat(E.container))},P=function(e){var t=T();return t?t.querySelector(e):null},O=function(e){return P(".".concat(e))},A=function(){return O(E.popup)},z=function(){var e=A();return d(e.querySelectorAll(".".concat(E.icon)))},_=function(){var e=z().filter((function(e){return fe(e)}));return e.length?e[0]:null},R=function(){return O(E.title)},N=function(){return O(E.content)},j=function(){return O(E.image)},M=function(){return O(E["progress-steps"])},I=function(){return O(E["validation-message"])},L=function(){return P(".".concat(E.actions," .").concat(E.confirm))},D=function(){return P(".".concat(E.actions," .").concat(E.deny))},B=function(){return P(".".concat(E.loader))},F=function(){return P(".".concat(E.actions," .").concat(E.cancel))},U=function(){return O(E.actions)},q=function(){return O(E.header)},$=function(){return O(E.footer)},Q=function(){return O(E["timer-progress-bar"])},W=function(){return O(E.close)},V=function(){var e=d(A().querySelectorAll('[tabindex]:not([tabindex="-1"]):not([tabindex="0"])')).sort((function(e,t){return(e=parseInt(e.getAttribute("tabindex")))>(t=parseInt(t.getAttribute("tabindex")))?1:e<t?-1:0})),t=d(A().querySelectorAll('\n  a[href],\n  area[href],\n  input:not([disabled]),\n  select:not([disabled]),\n  textarea:not([disabled]),\n  button:not([disabled]),\n  iframe,\n  object,\n  embed,\n  [tabindex="0"],\n  [contenteditable],\n  audio[controls],\n  video[controls],\n  summary\n')).filter((function(e){return"-1"!==e.getAttribute("tabindex")}));return function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(e.concat(t)).filter((function(e){return fe(e)}))},H=function(){return!K()&&!document.body.classList.contains(E["no-backdrop"])},K=function(){return document.body.classList.contains(E["toast-shown"])},Y={previousBodyPadding:null},X=function(e,t){if(e.textContent="",t){var n=(new DOMParser).parseFromString(t,"text/html");d(n.querySelector("head").childNodes).forEach((function(t){e.appendChild(t)})),d(n.querySelector("body").childNodes).forEach((function(t){e.appendChild(t)}))}},Z=function(e,t){if(!t)return!1;for(var n=t.split(/\s+/),r=0;r<n.length;r++)if(!e.classList.contains(n[r]))return!1;return!0},G=function(t,n,r){if(function(e,t){d(e.classList).forEach((function(n){-1===f(E).indexOf(n)&&-1===f(S).indexOf(n)&&-1===f(t.showClass).indexOf(n)&&e.classList.remove(n)}))}(t,n),n.customClass&&n.customClass[r]){if("string"!=typeof n.customClass[r]&&!n.customClass[r].forEach)return p("Invalid type of customClass.".concat(r,'! Expected string or iterable object, got "').concat(e(n.customClass[r]),'"'));re(t,n.customClass[r])}};function J(e,t){if(!t)return null;switch(t){case"select":case"textarea":case"file":return ie(e,E[t]);case"checkbox":return e.querySelector(".".concat(E.checkbox," input"));case"radio":return e.querySelector(".".concat(E.radio," input:checked"))||e.querySelector(".".concat(E.radio," input:first-child"));case"range":return e.querySelector(".".concat(E.range," input"));default:return ie(e,E.input)}}var ee,te=function(e){if(e.focus(),"file"!==e.type){var t=e.value;e.value="",e.value=t}},ne=function(e,t,n){e&&t&&("string"==typeof t&&(t=t.split(/\s+/).filter(Boolean)),t.forEach((function(t){e.forEach?e.forEach((function(e){n?e.classList.add(t):e.classList.remove(t)})):n?e.classList.add(t):e.classList.remove(t)})))},re=function(e,t){ne(e,t,!0)},oe=function(e,t){ne(e,t,!1)},ie=function(e,t){for(var n=0;n<e.childNodes.length;n++)if(Z(e.childNodes[n],t))return e.childNodes[n]},ae=function(e,t,n){n||0===parseInt(n)?e.style[t]="number"==typeof n?"".concat(n,"px"):n:e.style.removeProperty(t)},le=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"flex";e.style.display=t},ue=function(e){e.style.display="none"},se=function(e,t,n,r){var o=e.querySelector(t);o&&(o.style[n]=r)},ce=function(e,t,n){t?le(e,n):ue(e)},fe=function(e){return!(!e||!(e.offsetWidth||e.offsetHeight||e.getClientRects().length))},de=function(e){return!!(e.scrollHeight>e.clientHeight)},pe=function(e){var t=window.getComputedStyle(e),n=parseFloat(t.getPropertyValue("animation-duration")||"0"),r=parseFloat(t.getPropertyValue("transition-duration")||"0");return n>0||r>0},me=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Q();fe(n)&&(t&&(n.style.transition="none",n.style.width="100%"),setTimeout((function(){n.style.transition="width ".concat(e/1e3,"s linear"),n.style.width="0%"}),10))},he=function(){return"undefined"==typeof window||"undefined"==typeof document},ge='\n <div aria-labelledby="'.concat(E.title,'" aria-describedby="').concat(E.content,'" class="').concat(E.popup,'" tabindex="-1">\n   <div class="').concat(E.header,'">\n     <ul class="').concat(E["progress-steps"],'"></ul>\n     <div class="').concat(E.icon," ").concat(S.error,'"></div>\n     <div class="').concat(E.icon," ").concat(S.question,'"></div>\n     <div class="').concat(E.icon," ").concat(S.warning,'"></div>\n     <div class="').concat(E.icon," ").concat(S.info,'"></div>\n     <div class="').concat(E.icon," ").concat(S.success,'"></div>\n     <img class="').concat(E.image,'" />\n     <h2 class="').concat(E.title,'" id="').concat(E.title,'"></h2>\n     <button type="button" class="').concat(E.close,'"></button>\n   </div>\n   <div class="').concat(E.content,'">\n     <div id="').concat(E.content,'" class="').concat(E["html-container"],'"></div>\n     <input class="').concat(E.input,'" />\n     <input type="file" class="').concat(E.file,'" />\n     <div class="').concat(E.range,'">\n       <input type="range" />\n       <output></output>\n     </div>\n     <select class="').concat(E.select,'"></select>\n     <div class="').concat(E.radio,'"></div>\n     <label for="').concat(E.checkbox,'" class="').concat(E.checkbox,'">\n       <input type="checkbox" />\n       <span class="').concat(E.label,'"></span>\n     </label>\n     <textarea class="').concat(E.textarea,'"></textarea>\n     <div class="').concat(E["validation-message"],'" id="').concat(E["validation-message"],'"></div>\n   </div>\n   <div class="').concat(E.actions,'">\n     <div class="').concat(E.loader,'"></div>\n     <button type="button" class="').concat(E.confirm,'"></button>\n     <button type="button" class="').concat(E.deny,'"></button>\n     <button type="button" class="').concat(E.cancel,'"></button>\n   </div>\n   <div class="').concat(E.footer,'"></div>\n   <div class="').concat(E["timer-progress-bar-container"],'">\n     <div class="').concat(E["timer-progress-bar"],'"></div>\n   </div>\n </div>\n').replace(/(^|\n)\s*/g,""),ve=function(e){kn.isVisible()&&ee!==e.target.value&&kn.resetValidationMessage(),ee=e.target.value},ye=function(e){var t,n=!!(t=T())&&(t.parentNode.removeChild(t),oe([document.documentElement,document.body],[E["no-backdrop"],E["toast-shown"],E["has-column"]]),!0);if(he())m("SweetAlert2 requires document to initialize");else{var r=document.createElement("div");r.className=E.container,n&&re(r,E["no-transition"]),X(r,ge);var o,i,a,l,u,s,c,f,d,p="string"==typeof(o=e.target)?document.querySelector(o):o;p.appendChild(r),function(e){var t=A();t.setAttribute("role",e.toast?"alert":"dialog"),t.setAttribute("aria-live",e.toast?"polite":"assertive"),e.toast||t.setAttribute("aria-modal","true")}(e),function(e){"rtl"===window.getComputedStyle(e).direction&&re(T(),E.rtl)}(p),i=N(),a=ie(i,E.input),l=ie(i,E.file),u=i.querySelector(".".concat(E.range," input")),s=i.querySelector(".".concat(E.range," output")),c=ie(i,E.select),f=i.querySelector(".".concat(E.checkbox," input")),d=ie(i,E.textarea),a.oninput=ve,l.onchange=ve,c.onchange=ve,f.onchange=ve,d.oninput=ve,u.oninput=function(e){ve(e),s.value=u.value},u.onchange=function(e){ve(e),u.nextSibling.value=u.value}}},be=function(t,n){t instanceof HTMLElement?n.appendChild(t):"object"===e(t)?we(t,n):t&&X(n,t)},we=function(e,t){e.jquery?xe(t,e):X(t,e.toString())},xe=function(e,t){if(e.textContent="",0 in t)for(var n=0;n in t;n++)e.appendChild(t[n].cloneNode(!0));else e.appendChild(t.cloneNode(!0))},ke=function(){if(he())return!1;var e=document.createElement("div"),t={WebkitAnimation:"webkitAnimationEnd",OAnimation:"oAnimationEnd oanimationend",animation:"animationend"};for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&void 0!==e.style[n])return t[n];return!1}(),Ce=function(e,t){var n=U(),r=B(),o=L(),i=D(),a=F();t.showConfirmButton||t.showDenyButton||t.showCancelButton||ue(n),G(n,t,"actions"),Ee(o,"confirm",t),Ee(i,"deny",t),Ee(a,"cancel",t),r.innerHTML=t.loaderHtml,t.buttonsStyling?function(e,t,n,r){re([e,t,n],E.styled),r.confirmButtonColor&&(e.style.backgroundColor=r.confirmButtonColor),r.denyButtonColor&&(t.style.backgroundColor=r.denyButtonColor),r.cancelButtonColor&&(n.style.backgroundColor=r.cancelButtonColor)}(o,i,a,t):oe([o,i,a],E.styled),t.reverseButtons&&(n.insertBefore(a,r),n.insertBefore(i,r),n.insertBefore(o,r))};function Ee(e,t,n){var r;ce(e,n["show".concat((r=t,r.charAt(0).toUpperCase()+r.slice(1)),"Button")],"inline-block"),X(e,n["".concat(t,"ButtonText")]),e.setAttribute("aria-label",n["".concat(t,"ButtonAriaLabel")]),e.className=E[t],G(e,n,"".concat(t,"Button")),re(e,n["".concat(t,"ButtonClass")])}var Se=function(e,t){var n=T();if(n){!function(e,t){"string"==typeof t?e.style.background=t:t||re([document.documentElement,document.body],E["no-backdrop"])}(n,t.backdrop),!t.backdrop&&t.allowOutsideClick&&p('"allowOutsideClick" parameter requires `backdrop` parameter to be set to `true`'),function(e,t){t in E?re(e,E[t]):(p('The "position" parameter is not valid, defaulting to "center"'),re(e,E.center))}(n,t.position),function(e,t){if(t&&"string"==typeof t){var n="grow-".concat(t);n in E&&re(e,E[n])}}(n,t.grow),G(n,t,"container");var r=document.body.getAttribute("data-swal2-queue-step");r&&(n.setAttribute("data-queue-step",r),document.body.removeAttribute("data-swal2-queue-step"))}},Te={promise:new WeakMap,innerParams:new WeakMap,domCache:new WeakMap},Pe=["input","file","range","select","radio","checkbox","textarea"],Oe=function(e){if(!je[e.input])return m('Unexpected type of input! Expected "text", "email", "password", "number", "tel", "select", "radio", "checkbox", "textarea", "file" or "url", got "'.concat(e.input,'"'));var t=Ne(e.input),n=je[e.input](t,e);le(n),setTimeout((function(){te(n)}))},Ae=function(e,t){var n=J(N(),e);if(n)for(var r in function(e){for(var t=0;t<e.attributes.length;t++){var n=e.attributes[t].name;-1===["type","value","style"].indexOf(n)&&e.removeAttribute(n)}}(n),t)"range"===e&&"placeholder"===r||n.setAttribute(r,t[r])},ze=function(e){var t=Ne(e.input);e.customClass&&re(t,e.customClass.input)},_e=function(e,t){e.placeholder&&!t.inputPlaceholder||(e.placeholder=t.inputPlaceholder)},Re=function(e,t,n){if(n.inputLabel){e.id=E.input;var r=document.createElement("label"),o=E["input-label"];r.setAttribute("for",e.id),r.className=o,r.innerText=n.inputLabel,t.insertAdjacentElement("beforebegin",r)}},Ne=function(e){var t=E[e]?E[e]:E.input;return ie(N(),t)},je={};je.text=je.email=je.password=je.number=je.tel=je.url=function(t,n){return"string"==typeof n.inputValue||"number"==typeof n.inputValue?t.value=n.inputValue:w(n.inputValue)||p('Unexpected type of inputValue! Expected "string", "number" or "Promise", got "'.concat(e(n.inputValue),'"')),Re(t,t,n),_e(t,n),t.type=n.input,t},je.file=function(e,t){return Re(e,e,t),_e(e,t),e},je.range=function(e,t){var n=e.querySelector("input"),r=e.querySelector("output");return n.value=t.inputValue,n.type=t.input,r.value=t.inputValue,Re(n,e,t),e},je.select=function(e,t){if(e.textContent="",t.inputPlaceholder){var n=document.createElement("option");X(n,t.inputPlaceholder),n.value="",n.disabled=!0,n.selected=!0,e.appendChild(n)}return Re(e,e,t),e},je.radio=function(e){return e.textContent="",e},je.checkbox=function(e,t){var n=J(N(),"checkbox");n.value=1,n.id=E.checkbox,n.checked=Boolean(t.inputValue);var r=e.querySelector("span");return X(r,t.inputPlaceholder),e},je.textarea=function(e,t){if(e.value=t.inputValue,_e(e,t),Re(e,e,t),"MutationObserver"in window){var n=parseInt(window.getComputedStyle(A()).width),r=parseInt(window.getComputedStyle(A()).paddingLeft)+parseInt(window.getComputedStyle(A()).paddingRight);new MutationObserver((function(){var t=e.offsetWidth+r;A().style.width=t>n?"".concat(t,"px"):null})).observe(e,{attributes:!0,attributeFilter:["style"]})}return e};var Me=function(e,t){var n=N().querySelector("#".concat(E.content));t.html?(be(t.html,n),le(n,"block")):t.text?(n.textContent=t.text,le(n,"block")):ue(n),function(e,t){var n=N(),r=Te.innerParams.get(e),o=!r||t.input!==r.input;Pe.forEach((function(e){var r=E[e],i=ie(n,r);Ae(e,t.inputAttributes),i.className=r,o&&ue(i)})),t.input&&(o&&Oe(t),ze(t))}(e,t),G(N(),t,"content")},Ie=function(){for(var e=z(),t=0;t<e.length;t++)ue(e[t])},Le=function(e,t){Fe(e,t),De(),G(e,t,"icon")},De=function(){for(var e=A(),t=window.getComputedStyle(e).getPropertyValue("background-color"),n=e.querySelectorAll("[class^=swal2-success-circular-line], .swal2-success-fix"),r=0;r<n.length;r++)n[r].style.backgroundColor=t},Be=function(e,t){e.textContent="",t.iconHtml?X(e,Ue(t.iconHtml)):"success"===t.icon?X(e,'\n      <div class="swal2-success-circular-line-left"></div>\n      <span class="swal2-success-line-tip"></span> <span class="swal2-success-line-long"></span>\n      <div class="swal2-success-ring"></div> <div class="swal2-success-fix"></div>\n      <div class="swal2-success-circular-line-right"></div>\n    '):"error"===t.icon?X(e,'\n      <span class="swal2-x-mark">\n        <span class="swal2-x-mark-line-left"></span>\n        <span class="swal2-x-mark-line-right"></span>\n      </span>\n    '):X(e,Ue({question:"?",warning:"!",info:"i"}[t.icon]))},Fe=function(e,t){if(t.iconColor){e.style.color=t.iconColor,e.style.borderColor=t.iconColor;for(var n=0,r=[".swal2-success-line-tip",".swal2-success-line-long",".swal2-x-mark-line-left",".swal2-x-mark-line-right"];n<r.length;n++)se(e,r[n],"backgroundColor",t.iconColor);se(e,".swal2-success-ring","borderColor",t.iconColor)}},Ue=function(e){return'<div class="'.concat(E["icon-content"],'">').concat(e,"</div>")},qe=[],$e=function(){return T()&&T().getAttribute("data-queue-step")},Qe=function(e,t){var n=M();if(!t.progressSteps||0===t.progressSteps.length)return ue(n);le(n),n.textContent="";var r=parseInt(void 0===t.currentProgressStep?$e():t.currentProgressStep);r>=t.progressSteps.length&&p("Invalid currentProgressStep parameter, it should be less than progressSteps.length (currentProgressStep like JS arrays starts from 0)"),t.progressSteps.forEach((function(e,o){var i=function(e){var t=document.createElement("li");return re(t,E["progress-step"]),X(t,e),t}(e);if(n.appendChild(i),o===r&&re(i,E["active-progress-step"]),o!==t.progressSteps.length-1){var a=function(e){var t=document.createElement("li");return re(t,E["progress-step-line"]),e.progressStepsDistance&&(t.style.width=e.progressStepsDistance),t}(t);n.appendChild(a)}}))},We=function(e,t){var n=q();G(n,t,"header"),Qe(0,t),function(e,t){var n=Te.innerParams.get(e);if(n&&t.icon===n.icon&&_())Le(_(),t);else if(Ie(),t.icon)if(-1!==Object.keys(S).indexOf(t.icon)){var r=P(".".concat(E.icon,".").concat(S[t.icon]));le(r),Be(r,t),Le(r,t),re(r,t.showClass.icon)}else m('Unknown icon! Expected "success", "error", "warning", "info" or "question", got "'.concat(t.icon,'"'))}(e,t),function(e,t){var n=j();if(!t.imageUrl)return ue(n);le(n,""),n.setAttribute("src",t.imageUrl),n.setAttribute("alt",t.imageAlt),ae(n,"width",t.imageWidth),ae(n,"height",t.imageHeight),n.className=E.image,G(n,t,"image")}(0,t),function(e,t){var n=R();ce(n,t.title||t.titleText),t.title&&be(t.title,n),t.titleText&&(n.innerText=t.titleText),G(n,t,"title")}(0,t),function(e,t){var n=W();X(n,t.closeButtonHtml),G(n,t,"closeButton"),ce(n,t.showCloseButton),n.setAttribute("aria-label",t.closeButtonAriaLabel)}(0,t)},Ve=function(e,t){e.className="".concat(E.popup," ").concat(fe(e)?t.showClass.popup:""),t.toast?(re([document.documentElement,document.body],E["toast-shown"]),re(e,E.toast)):re(e,E.modal),G(e,t,"popup"),"string"==typeof t.customClass&&re(e,t.customClass),t.icon&&re(e,E["icon-".concat(t.icon)])},He=function(e,t){!function(e,t){var n=A();ae(n,"width",t.width),ae(n,"padding",t.padding),t.background&&(n.style.background=t.background),Ve(n,t)}(0,t),Se(0,t),We(e,t),Me(e,t),Ce(0,t),function(e,t){var n=$();ce(n,t.footer),t.footer&&be(t.footer,n),G(n,t,"footer")}(0,t),"function"==typeof t.didRender?t.didRender(A()):"function"==typeof t.onRender&&t.onRender(A())},Ke=function(){return L()&&L().click()},Ye=function(){var e=A();e||kn.fire(),e=A();var t=U(),n=L(),r=B();le(t),ue(n),re([e,t],E.loading),le(r),e.setAttribute("data-loading",!0),e.setAttribute("aria-busy",!0),e.focus()},Xe={},Ze=function(){return new Promise((function(e){var t=window.scrollX,n=window.scrollY;Xe.restoreFocusTimeout=setTimeout((function(){Xe.previousActiveElement&&Xe.previousActiveElement.focus?(Xe.previousActiveElement.focus(),Xe.previousActiveElement=null):document.body&&document.body.focus(),e()}),100),void 0!==t&&void 0!==n&&window.scrollTo(t,n)}))},Ge=function(){if(Xe.timeout)return function(){var e=Q(),t=parseInt(window.getComputedStyle(e).width);e.style.removeProperty("transition"),e.style.width="100%";var n=parseInt(window.getComputedStyle(e).width),r=parseInt(t/n*100);e.style.removeProperty("transition"),e.style.width="".concat(r,"%")}(),Xe.timeout.stop()},Je=function(){if(Xe.timeout){var e=Xe.timeout.start();return me(e),e}},et={title:"",titleText:"",text:"",html:"",footer:"",icon:void 0,iconColor:void 0,iconHtml:void 0,toast:!1,animation:!0,showClass:{popup:"swal2-show",backdrop:"swal2-backdrop-show",icon:"swal2-icon-show"},hideClass:{popup:"swal2-hide",backdrop:"swal2-backdrop-hide",icon:"swal2-icon-hide"},customClass:void 0,target:"body",backdrop:!0,heightAuto:!0,allowOutsideClick:!0,allowEscapeKey:!0,allowEnterKey:!0,stopKeydownPropagation:!0,keydownListenerCapture:!1,showConfirmButton:!0,showDenyButton:!1,showCancelButton:!1,preConfirm:void 0,confirmButtonText:"OK",confirmButtonAriaLabel:"",confirmButtonColor:void 0,denyButtonText:"No",denyButtonAriaLabel:"",denyButtonColor:void 0,cancelButtonText:"Cancel",cancelButtonAriaLabel:"",cancelButtonColor:void 0,buttonsStyling:!0,reverseButtons:!1,focusConfirm:!0,focusDeny:!1,focusCancel:!1,showCloseButton:!1,closeButtonHtml:"&times;",closeButtonAriaLabel:"Close this dialog",loaderHtml:"",showLoaderOnConfirm:!1,imageUrl:void 0,imageWidth:void 0,imageHeight:void 0,imageAlt:"",timer:void 0,timerProgressBar:!1,width:void 0,padding:void 0,background:void 0,input:void 0,inputPlaceholder:"",inputLabel:"",inputValue:"",inputOptions:{},inputAutoTrim:!0,inputAttributes:{},inputValidator:void 0,returnInputValueOnDeny:!1,validationMessage:void 0,grow:!1,position:"center",progressSteps:[],currentProgressStep:void 0,progressStepsDistance:void 0,onBeforeOpen:void 0,onOpen:void 0,willOpen:void 0,didOpen:void 0,onRender:void 0,didRender:void 0,onClose:void 0,onAfterClose:void 0,willClose:void 0,didClose:void 0,onDestroy:void 0,didDestroy:void 0,scrollbarPadding:!0},tt=["allowEscapeKey","allowOutsideClick","background","buttonsStyling","cancelButtonAriaLabel","cancelButtonColor","cancelButtonText","closeButtonAriaLabel","closeButtonHtml","confirmButtonAriaLabel","confirmButtonColor","confirmButtonText","currentProgressStep","customClass","denyButtonAriaLabel","denyButtonColor","denyButtonText","didClose","didDestroy","footer","hideClass","html","icon","iconColor","imageAlt","imageHeight","imageUrl","imageWidth","onAfterClose","onClose","onDestroy","progressSteps","reverseButtons","showCancelButton","showCloseButton","showConfirmButton","showDenyButton","text","title","titleText","willClose"],nt={animation:'showClass" and "hideClass',onBeforeOpen:"willOpen",onOpen:"didOpen",onRender:"didRender",onClose:"willClose",onAfterClose:"didClose",onDestroy:"didDestroy"},rt=["allowOutsideClick","allowEnterKey","backdrop","focusConfirm","focusDeny","focusCancel","heightAuto","keydownListenerCapture"],ot=function(e){return Object.prototype.hasOwnProperty.call(et,e)},it=function(e){return nt[e]},at=function(e){ot(e)||p('Unknown parameter "'.concat(e,'"'))},lt=function(e){-1!==rt.indexOf(e)&&p('The parameter "'.concat(e,'" is incompatible with toasts'))},ut=function(e){it(e)&&g(e,it(e))},st=Object.freeze({isValidParameter:ot,isUpdatableParameter:function(e){return-1!==tt.indexOf(e)},isDeprecatedParameter:it,argsToParams:function(t){var n={};return"object"!==e(t[0])||k(t[0])?["title","html","icon"].forEach((function(r,o){var i=t[o];"string"==typeof i||k(i)?n[r]=i:void 0!==i&&m("Unexpected type of ".concat(r,'! Expected "string" or "Element", got ').concat(e(i)))})):o(n,t[0]),n},isVisible:function(){return fe(A())},clickConfirm:Ke,clickDeny:function(){return D()&&D().click()},clickCancel:function(){return F()&&F().click()},getContainer:T,getPopup:A,getTitle:R,getContent:N,getHtmlContainer:function(){return O(E["html-container"])},getImage:j,getIcon:_,getIcons:z,getInputLabel:function(){return O(E["input-label"])},getCloseButton:W,getActions:U,getConfirmButton:L,getDenyButton:D,getCancelButton:F,getHeader:q,getFooter:$,getTimerProgressBar:Q,getFocusableElements:V,getValidationMessage:I,isLoading:function(){return A().hasAttribute("data-loading")},fire:function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return u(e,n)},mixin:function(e){return function(n){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(p,n);var u,f,d=(u=p,f=l(),function(){var e,t=i(u);if(f){var n=i(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return s(this,e)});function p(){return t(this,p),d.apply(this,arguments)}return r(p,[{key:"_main",value:function(t){return c(i(p.prototype),"_main",this).call(this,o({},e,t))}}]),p}(this)},queue:function(e){var t=this;qe=e;var n=function(e,t){qe=[],e(t)},r=[];return new Promise((function(e){!function o(i,a){i<qe.length?(document.body.setAttribute("data-swal2-queue-step",i),t.fire(qe[i]).then((function(t){void 0!==t.value?(r.push(t.value),o(i+1,a)):n(e,{dismiss:t.dismiss})}))):n(e,{value:r})}(0)}))},getQueueStep:$e,insertQueueStep:function(e,t){return t&&t<qe.length?qe.splice(t,0,e):qe.push(e)},deleteQueueStep:function(e){void 0!==qe[e]&&qe.splice(e,1)},showLoading:Ye,enableLoading:Ye,getTimerLeft:function(){return Xe.timeout&&Xe.timeout.getTimerLeft()},stopTimer:Ge,resumeTimer:Je,toggleTimer:function(){var e=Xe.timeout;return e&&(e.running?Ge():Je())},increaseTimer:function(e){if(Xe.timeout){var t=Xe.timeout.increase(e);return me(t,!0),t}},isTimerRunning:function(){return Xe.timeout&&Xe.timeout.isRunning()}});function ct(){var e=Te.innerParams.get(this);if(e){var t=Te.domCache.get(this);ue(t.loader),e.showConfirmButton?le(t.confirmButton,"inline-block"):e.showConfirmButton||e.showCancelButton||ue(t.actions),oe([t.popup,t.actions],E.loading),t.popup.removeAttribute("aria-busy"),t.popup.removeAttribute("data-loading"),t.confirmButton.disabled=!1,t.denyButton.disabled=!1,t.cancelButton.disabled=!1}}var ft=function(){null===Y.previousBodyPadding&&document.body.scrollHeight>window.innerHeight&&(Y.previousBodyPadding=parseInt(window.getComputedStyle(document.body).getPropertyValue("padding-right")),document.body.style.paddingRight="".concat(Y.previousBodyPadding+function(){var e=document.createElement("div");e.className=E["scrollbar-measure"],document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t}(),"px"))},dt=function(){navigator.userAgent.match(/(CriOS|FxiOS|EdgiOS|YaBrowser|UCBrowser)/i)||A().scrollHeight>window.innerHeight-44&&(T().style.paddingBottom="".concat(44,"px"))},pt=function(){var e,t=T();t.ontouchstart=function(t){e=mt(t)},t.ontouchmove=function(t){e&&(t.preventDefault(),t.stopPropagation())}},mt=function(e){var t=e.target,n=T();return!(e.touches&&e.touches.length&&"stylus"===e.touches[0].touchType||t!==n&&(de(n)||"INPUT"===t.tagName||de(N())&&N().contains(t)))},ht=function(){return!!window.MSInputMethodContext&&!!document.documentMode},gt=function(){var e=T(),t=A();e.style.removeProperty("align-items"),t.offsetTop<0&&(e.style.alignItems="flex-start")},vt={swalPromiseResolve:new WeakMap};function yt(e,t,n,r){n?Et(e,r):(Ze().then((function(){return Et(e,r)})),Xe.keydownTarget.removeEventListener("keydown",Xe.keydownHandler,{capture:Xe.keydownListenerCapture}),Xe.keydownHandlerAdded=!1),t.parentNode&&!document.body.getAttribute("data-swal2-queue-step")&&t.parentNode.removeChild(t),H()&&(null!==Y.previousBodyPadding&&(document.body.style.paddingRight="".concat(Y.previousBodyPadding,"px"),Y.previousBodyPadding=null),function(){if(Z(document.body,E.iosfix)){var e=parseInt(document.body.style.top,10);oe(document.body,E.iosfix),document.body.style.top="",document.body.scrollTop=-1*e}}(),"undefined"!=typeof window&&ht()&&window.removeEventListener("resize",gt),d(document.body.children).forEach((function(e){e.hasAttribute("data-previous-aria-hidden")?(e.setAttribute("aria-hidden",e.getAttribute("data-previous-aria-hidden")),e.removeAttribute("data-previous-aria-hidden")):e.removeAttribute("aria-hidden")}))),oe([document.documentElement,document.body],[E.shown,E["height-auto"],E["no-backdrop"],E["toast-shown"],E["toast-column"]])}function bt(e){var t=A();if(t){e=wt(e);var n=Te.innerParams.get(this);if(n&&!Z(t,n.hideClass.popup)){var r=vt.swalPromiseResolve.get(this);oe(t,n.showClass.popup),re(t,n.hideClass.popup);var o=T();oe(o,n.showClass.backdrop),re(o,n.hideClass.backdrop),xt(this,t,n),r(e)}}}var wt=function(e){return void 0===e?{isConfirmed:!1,isDenied:!1,isDismissed:!0}:o({isConfirmed:!1,isDenied:!1,isDismissed:!1},e)},xt=function(e,t,n){var r=T(),o=ke&&pe(t),i=n.onClose,a=n.onAfterClose,l=n.willClose,u=n.didClose;kt(t,l,i),o?Ct(e,t,r,u||a):yt(e,r,K(),u||a)},kt=function(e,t,n){null!==t&&"function"==typeof t?t(e):null!==n&&"function"==typeof n&&n(e)},Ct=function(e,t,n,r){Xe.swalCloseEventFinishedCallback=yt.bind(null,e,n,K(),r),t.addEventListener(ke,(function(e){e.target===t&&(Xe.swalCloseEventFinishedCallback(),delete Xe.swalCloseEventFinishedCallback)}))},Et=function(e,t){setTimeout((function(){"function"==typeof t&&t(),e._destroy()}))};function St(e,t,n){var r=Te.domCache.get(e);t.forEach((function(e){r[e].disabled=n}))}function Tt(e,t){if(!e)return!1;if("radio"===e.type)for(var n=e.parentNode.parentNode.querySelectorAll("input"),r=0;r<n.length;r++)n[r].disabled=t;else e.disabled=t}var Pt=function(){function e(n,r){t(this,e),this.callback=n,this.remaining=r,this.running=!1,this.start()}return r(e,[{key:"start",value:function(){return this.running||(this.running=!0,this.started=new Date,this.id=setTimeout(this.callback,this.remaining)),this.remaining}},{key:"stop",value:function(){return this.running&&(this.running=!1,clearTimeout(this.id),this.remaining-=new Date-this.started),this.remaining}},{key:"increase",value:function(e){var t=this.running;return t&&this.stop(),this.remaining+=e,t&&this.start(),this.remaining}},{key:"getTimerLeft",value:function(){return this.running&&(this.stop(),this.start()),this.remaining}},{key:"isRunning",value:function(){return this.running}}]),e}(),Ot={email:function(e,t){return/^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9-]{2,24}$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid email address")},url:function(e,t){return/^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(e)?Promise.resolve():Promise.resolve(t||"Invalid URL")}};function At(e){!function(e){e.inputValidator||Object.keys(Ot).forEach((function(t){e.input===t&&(e.inputValidator=Ot[t])}))}(e),e.showLoaderOnConfirm&&!e.preConfirm&&p("showLoaderOnConfirm is set to true, but preConfirm is not defined.\nshowLoaderOnConfirm should be used together with preConfirm, see usage example:\nhttps://sweetalert2.github.io/#ajax-request"),e.animation=v(e.animation),function(e){(!e.target||"string"==typeof e.target&&!document.querySelector(e.target)||"string"!=typeof e.target&&!e.target.appendChild)&&(p('Target parameter is not valid, defaulting to "body"'),e.target="body")}(e),"string"==typeof e.title&&(e.title=e.title.split("\n").join("<br />")),ye(e)}var zt,_t=function(e){var t=T(),n=A();"function"==typeof e.willOpen?e.willOpen(n):"function"==typeof e.onBeforeOpen&&e.onBeforeOpen(n);var r=window.getComputedStyle(document.body).overflowY;It(t,n,e),setTimeout((function(){jt(t,n)}),10),H()&&(Mt(t,e.scrollbarPadding,r),d(document.body.children).forEach((function(e){e===T()||function(e,t){if("function"==typeof e.contains)return e.contains(t)}(e,T())||(e.hasAttribute("aria-hidden")&&e.setAttribute("data-previous-aria-hidden",e.getAttribute("aria-hidden")),e.setAttribute("aria-hidden","true"))}))),K()||Xe.previousActiveElement||(Xe.previousActiveElement=document.activeElement),Rt(n,e),oe(t,E["no-transition"])},Rt=function(e,t){"function"==typeof t.didOpen?setTimeout((function(){return t.didOpen(e)})):"function"==typeof t.onOpen&&setTimeout((function(){return t.onOpen(e)}))},Nt=function e(t){var n=A();if(t.target===n){var r=T();n.removeEventListener(ke,e),r.style.overflowY="auto"}},jt=function(e,t){ke&&pe(t)?(e.style.overflowY="hidden",t.addEventListener(ke,Nt)):e.style.overflowY="auto"},Mt=function(e,t,n){!function(){if((/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1)&&!Z(document.body,E.iosfix)){var e=document.body.scrollTop;document.body.style.top="".concat(-1*e,"px"),re(document.body,E.iosfix),pt(),dt()}}(),"undefined"!=typeof window&&ht()&&(gt(),window.addEventListener("resize",gt)),t&&"hidden"!==n&&ft(),setTimeout((function(){e.scrollTop=0}))},It=function(e,t,n){re(e,n.showClass.backdrop),t.style.setProperty("opacity","0","important"),le(t),setTimeout((function(){re(t,n.showClass.popup),t.style.removeProperty("opacity")}),10),re([document.documentElement,document.body],E.shown),n.heightAuto&&n.backdrop&&!n.toast&&re([document.documentElement,document.body],E["height-auto"])},Lt=function(e){return e.checked?1:0},Dt=function(e){return e.checked?e.value:null},Bt=function(e){return e.files.length?null!==e.getAttribute("multiple")?e.files:e.files[0]:null},Ft=function(t,n){var r=N(),o=function(e){return qt[n.input](r,$t(e),n)};y(n.inputOptions)||w(n.inputOptions)?(Ye(),b(n.inputOptions).then((function(e){t.hideLoading(),o(e)}))):"object"===e(n.inputOptions)?o(n.inputOptions):m("Unexpected type of inputOptions! Expected object, Map or Promise, got ".concat(e(n.inputOptions)))},Ut=function(e,t){var n=e.getInput();ue(n),b(t.inputValue).then((function(r){n.value="number"===t.input?parseFloat(r)||0:"".concat(r),le(n),n.focus(),e.hideLoading()})).catch((function(t){m("Error in inputValue promise: ".concat(t)),n.value="",le(n),n.focus(),e.hideLoading()}))},qt={select:function(e,t,n){var r=ie(e,E.select),o=function(e,t,r){var o=document.createElement("option");o.value=r,X(o,t),n.inputValue.toString()===r.toString()&&(o.selected=!0),e.appendChild(o)};t.forEach((function(e){var t=e[0],n=e[1];if(Array.isArray(n)){var i=document.createElement("optgroup");i.label=t,i.disabled=!1,r.appendChild(i),n.forEach((function(e){return o(i,e[1],e[0])}))}else o(r,n,t)})),r.focus()},radio:function(e,t,n){var r=ie(e,E.radio);t.forEach((function(e){var t=e[0],o=e[1],i=document.createElement("input"),a=document.createElement("label");i.type="radio",i.name=E.radio,i.value=t,n.inputValue.toString()===t.toString()&&(i.checked=!0);var l=document.createElement("span");X(l,o),l.className=E.label,a.appendChild(i),a.appendChild(l),r.appendChild(a)}));var o=r.querySelectorAll("input");o.length&&o[0].focus()}},$t=function t(n){var r=[];return"undefined"!=typeof Map&&n instanceof Map?n.forEach((function(n,o){var i=n;"object"===e(i)&&(i=t(i)),r.push([o,i])})):Object.keys(n).forEach((function(o){var i=n[o];"object"===e(i)&&(i=t(i)),r.push([o,i])})),r},Qt=function(e,t,n){var r=function(e,t){var n=e.getInput();if(!n)return null;switch(t.input){case"checkbox":return Lt(n);case"radio":return Dt(n);case"file":return Bt(n);default:return t.inputAutoTrim?n.value.trim():n.value}}(e,t);t.inputValidator?Wt(e,t,r):e.getInput().checkValidity()?"deny"===n?Vt(e,r):Kt(e,t,r):(e.enableButtons(),e.showValidationMessage(t.validationMessage))},Wt=function(e,t,n){e.disableInput(),Promise.resolve().then((function(){return b(t.inputValidator(n,t.validationMessage))})).then((function(r){e.enableButtons(),e.enableInput(),r?e.showValidationMessage(r):Kt(e,t,n)}))},Vt=function(e,t){e.closePopup({isDenied:!0,value:t})},Ht=function(e,t){e.closePopup({isConfirmed:!0,value:t})},Kt=function(e,t,n){t.showLoaderOnConfirm&&Ye(),t.preConfirm?(e.resetValidationMessage(),Promise.resolve().then((function(){return b(t.preConfirm(n,t.validationMessage))})).then((function(t){fe(I())||!1===t?e.hideLoading():Ht(e,void 0===t?n:t)}))):Ht(e,n)},Yt=function(e,t,n){for(var r=V(),o=0;o<r.length;o++)return(t+=n)===r.length?t=0:-1===t&&(t=r.length-1),r[t].focus();A().focus()},Xt=["ArrowRight","ArrowDown","Right","Down"],Zt=["ArrowLeft","ArrowUp","Left","Up"],Gt=["Escape","Esc"],Jt=function(e,t,n){var r=Te.innerParams.get(e);r.stopKeydownPropagation&&t.stopPropagation(),"Enter"===t.key?en(e,t,r):"Tab"===t.key?tn(t,r):-1!==[].concat(Xt,Zt).indexOf(t.key)?nn(t.key):-1!==Gt.indexOf(t.key)&&rn(t,r,n)},en=function(e,t,n){if(!t.isComposing&&t.target&&e.getInput()&&t.target.outerHTML===e.getInput().outerHTML){if(-1!==["textarea","file"].indexOf(n.input))return;Ke(),t.preventDefault()}},tn=function(e,t){for(var n=e.target,r=V(),o=-1,i=0;i<r.length;i++)if(n===r[i]){o=i;break}e.shiftKey?Yt(0,o,-1):Yt(0,o,1),e.stopPropagation(),e.preventDefault()},nn=function(e){if(-1!==[L(),D(),F()].indexOf(document.activeElement)){var t=-1!==Xt.indexOf(e)?"nextElementSibling":"previousElementSibling",n=document.activeElement[t];n&&n.focus()}},rn=function(e,t,n){v(t.allowEscapeKey)&&(e.preventDefault(),n(x.esc))},on=function(e,t,n){t.popup.onclick=function(){var t=Te.innerParams.get(e);t.showConfirmButton||t.showDenyButton||t.showCancelButton||t.showCloseButton||t.input||n(x.close)}},an=!1,ln=function(e){e.popup.onmousedown=function(){e.container.onmouseup=function(t){e.container.onmouseup=void 0,t.target===e.container&&(an=!0)}}},un=function(e){e.container.onmousedown=function(){e.popup.onmouseup=function(t){e.popup.onmouseup=void 0,(t.target===e.popup||e.popup.contains(t.target))&&(an=!0)}}},sn=function(e,t,n){t.container.onclick=function(r){var o=Te.innerParams.get(e);an?an=!1:r.target===t.container&&v(o.allowOutsideClick)&&n(x.backdrop)}},cn=function(e){var t=o({},et.showClass,e.showClass),n=o({},et.hideClass,e.hideClass),r=o({},et,e);return r.showClass=t,r.hideClass=n,!1===e.animation&&(r.showClass={popup:"swal2-noanimation",backdrop:"swal2-noanimation"},r.hideClass={}),r},fn=function(e,t,n){return new Promise((function(r){var o=function(t){e.closePopup({isDismissed:!0,dismiss:t})};vt.swalPromiseResolve.set(e,r),t.confirmButton.onclick=function(){return function(e,t){e.disableButtons(),t.input?Qt(e,t,"confirm"):Kt(e,t,!0)}(e,n)},t.denyButton.onclick=function(){return function(e,t){e.disableButtons(),t.returnInputValueOnDeny?Qt(e,t,"deny"):Vt(e,!1)}(e,n)},t.cancelButton.onclick=function(){return function(e,t){e.disableButtons(),t(x.cancel)}(e,o)},t.closeButton.onclick=function(){return o(x.close)},function(e,t,n){Te.innerParams.get(e).toast?on(e,t,n):(ln(t),un(t),sn(e,t,n))}(e,t,o),function(e,t,n,r){t.keydownTarget&&t.keydownHandlerAdded&&(t.keydownTarget.removeEventListener("keydown",t.keydownHandler,{capture:t.keydownListenerCapture}),t.keydownHandlerAdded=!1),n.toast||(t.keydownHandler=function(t){return Jt(e,t,r)},t.keydownTarget=n.keydownListenerCapture?window:A(),t.keydownListenerCapture=n.keydownListenerCapture,t.keydownTarget.addEventListener("keydown",t.keydownHandler,{capture:t.keydownListenerCapture}),t.keydownHandlerAdded=!0)}(e,Xe,n,o),n.toast&&(n.input||n.footer||n.showCloseButton)?re(document.body,E["toast-column"]):oe(document.body,E["toast-column"]),function(e,t){"select"===t.input||"radio"===t.input?Ft(e,t):-1!==["text","email","number","tel","textarea"].indexOf(t.input)&&(y(t.inputValue)||w(t.inputValue))&&Ut(e,t)}(e,n),_t(n),pn(Xe,n,o),mn(t,n),setTimeout((function(){t.container.scrollTop=0}))}))},dn=function(e){var t={popup:A(),container:T(),content:N(),actions:U(),confirmButton:L(),denyButton:D(),cancelButton:F(),loader:B(),closeButton:W(),validationMessage:I(),progressSteps:M()};return Te.domCache.set(e,t),t},pn=function(e,t,n){var r=Q();ue(r),t.timer&&(e.timeout=new Pt((function(){n("timer"),delete e.timeout}),t.timer),t.timerProgressBar&&(le(r),setTimeout((function(){e.timeout.running&&me(t.timer)}))))},mn=function(e,t){if(!t.toast)return v(t.allowEnterKey)?void(hn(e,t)||Yt(0,-1,1)):gn()},hn=function(e,t){return t.focusDeny&&fe(e.denyButton)?(e.denyButton.focus(),!0):t.focusCancel&&fe(e.cancelButton)?(e.cancelButton.focus(),!0):!(!t.focusConfirm||!fe(e.confirmButton)||(e.confirmButton.focus(),0))},gn=function(){document.activeElement&&"function"==typeof document.activeElement.blur&&document.activeElement.blur()},vn=function(e){"function"==typeof e.didDestroy?e.didDestroy():"function"==typeof e.onDestroy&&e.onDestroy()},yn=function(e){delete e.params,delete Xe.keydownHandler,delete Xe.keydownTarget,bn(Te),bn(vt)},bn=function(e){for(var t in e)e[t]=new WeakMap},wn=Object.freeze({hideLoading:ct,disableLoading:ct,getInput:function(e){var t=Te.innerParams.get(e||this),n=Te.domCache.get(e||this);return n?J(n.content,t.input):null},close:bt,closePopup:bt,closeModal:bt,closeToast:bt,enableButtons:function(){St(this,["confirmButton","denyButton","cancelButton"],!1)},disableButtons:function(){St(this,["confirmButton","denyButton","cancelButton"],!0)},enableInput:function(){return Tt(this.getInput(),!1)},disableInput:function(){return Tt(this.getInput(),!0)},showValidationMessage:function(e){var t=Te.domCache.get(this),n=Te.innerParams.get(this);X(t.validationMessage,e),t.validationMessage.className=E["validation-message"],n.customClass&&n.customClass.validationMessage&&re(t.validationMessage,n.customClass.validationMessage),le(t.validationMessage);var r=this.getInput();r&&(r.setAttribute("aria-invalid",!0),r.setAttribute("aria-describedBy",E["validation-message"]),te(r),re(r,E.inputerror))},resetValidationMessage:function(){var e=Te.domCache.get(this);e.validationMessage&&ue(e.validationMessage);var t=this.getInput();t&&(t.removeAttribute("aria-invalid"),t.removeAttribute("aria-describedBy"),oe(t,E.inputerror))},getProgressSteps:function(){return Te.domCache.get(this).progressSteps},_main:function(e){!function(e){for(var t in e)at(t),e.toast&&lt(t),ut(t)}(e),Xe.currentInstance&&Xe.currentInstance._destroy(),Xe.currentInstance=this;var t=cn(e);At(t),Object.freeze(t),Xe.timeout&&(Xe.timeout.stop(),delete Xe.timeout),clearTimeout(Xe.restoreFocusTimeout);var n=dn(this);return He(this,t),Te.innerParams.set(this,t),fn(this,n,t)},update:function(e){var t=A(),n=Te.innerParams.get(this);if(!t||Z(t,n.hideClass.popup))return p("You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.");var r={};Object.keys(e).forEach((function(t){kn.isUpdatableParameter(t)?r[t]=e[t]:p('Invalid parameter to update: "'.concat(t,'". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\n\nIf you think this parameter should be updatable, request it here: https://github.com/sweetalert2/sweetalert2/issues/new?template=02_feature_request.md'))}));var i=o({},n,r);He(this,i),Te.innerParams.set(this,i),Object.defineProperties(this,{params:{value:o({},this.params,e),writable:!1,enumerable:!0}})},_destroy:function(){var e=Te.domCache.get(this),t=Te.innerParams.get(this);t&&(e.popup&&Xe.swalCloseEventFinishedCallback&&(Xe.swalCloseEventFinishedCallback(),delete Xe.swalCloseEventFinishedCallback),Xe.deferDisposalTimer&&(clearTimeout(Xe.deferDisposalTimer),delete Xe.deferDisposalTimer),vn(t),yn(this))}}),xn=function(){function e(){if(t(this,e),"undefined"!=typeof window){"undefined"==typeof Promise&&m("This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)"),zt=this;for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];var i=Object.freeze(this.constructor.argsToParams(r));Object.defineProperties(this,{params:{value:i,writable:!1,enumerable:!0,configurable:!0}});var a=this._main(this.params);Te.promise.set(this,a)}}return r(e,[{key:"then",value:function(e){return Te.promise.get(this).then(e)}},{key:"finally",value:function(e){return Te.promise.get(this).finally(e)}}]),e}();o(xn.prototype,wn),o(xn,st),Object.keys(wn).forEach((function(e){xn[e]=function(){var t;if(zt)return(t=zt)[e].apply(t,arguments)}})),xn.DismissReason=x,xn.version="10.6.1";var kn=xn;return kn.default=kn,kn}(),void 0!==this&&this.Sweetalert2&&(this.swal=this.sweetAlert=this.Swal=this.SweetAlert=this.Sweetalert2),"undefined"!=typeof document&&function(e,t){var n=e.createElement("style");if(e.getElementsByTagName("head")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,'.swal2-popup.swal2-toast{flex-direction:row;align-items:center;width:auto;padding:.625em;overflow-y:hidden;background:#fff;box-shadow:0 0 .625em #d9d9d9}.swal2-popup.swal2-toast .swal2-header{flex-direction:row;padding:0}.swal2-popup.swal2-toast .swal2-title{flex-grow:1;justify-content:flex-start;margin:0 .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{position:static;width:.8em;height:.8em;line-height:.8}.swal2-popup.swal2-toast .swal2-content{justify-content:flex-start;padding:0;font-size:1em}.swal2-popup.swal2-toast .swal2-icon{width:2em;min-width:2em;height:2em;margin:0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:700}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{font-size:.25em}}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{flex-basis:auto!important;width:auto;height:auto;margin:0 .3125em;padding:0}.swal2-popup.swal2-toast .swal2-styled{margin:0 .3125em;padding:.3125em .625em;font-size:1em}.swal2-popup.swal2-toast .swal2-styled:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(50,100,150,.4)}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-container{display:flex;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;flex-direction:row;align-items:center;justify-content:center;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:0 0!important}.swal2-container.swal2-top{align-items:flex-start}.swal2-container.swal2-top-left,.swal2-container.swal2-top-start{align-items:flex-start;justify-content:flex-start}.swal2-container.swal2-top-end,.swal2-container.swal2-top-right{align-items:flex-start;justify-content:flex-end}.swal2-container.swal2-center{align-items:center}.swal2-container.swal2-center-left,.swal2-container.swal2-center-start{align-items:center;justify-content:flex-start}.swal2-container.swal2-center-end,.swal2-container.swal2-center-right{align-items:center;justify-content:flex-end}.swal2-container.swal2-bottom{align-items:flex-end}.swal2-container.swal2-bottom-left,.swal2-container.swal2-bottom-start{align-items:flex-end;justify-content:flex-start}.swal2-container.swal2-bottom-end,.swal2-container.swal2-bottom-right{align-items:flex-end;justify-content:flex-end}.swal2-container.swal2-bottom-end>:first-child,.swal2-container.swal2-bottom-left>:first-child,.swal2-container.swal2-bottom-right>:first-child,.swal2-container.swal2-bottom-start>:first-child,.swal2-container.swal2-bottom>:first-child{margin-top:auto}.swal2-container.swal2-grow-fullscreen>.swal2-modal{display:flex!important;flex:1;align-self:stretch;justify-content:center}.swal2-container.swal2-grow-row>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-grow-column{flex:1;flex-direction:column}.swal2-container.swal2-grow-column.swal2-bottom,.swal2-container.swal2-grow-column.swal2-center,.swal2-container.swal2-grow-column.swal2-top{align-items:center}.swal2-container.swal2-grow-column.swal2-bottom-left,.swal2-container.swal2-grow-column.swal2-bottom-start,.swal2-container.swal2-grow-column.swal2-center-left,.swal2-container.swal2-grow-column.swal2-center-start,.swal2-container.swal2-grow-column.swal2-top-left,.swal2-container.swal2-grow-column.swal2-top-start{align-items:flex-start}.swal2-container.swal2-grow-column.swal2-bottom-end,.swal2-container.swal2-grow-column.swal2-bottom-right,.swal2-container.swal2-grow-column.swal2-center-end,.swal2-container.swal2-grow-column.swal2-center-right,.swal2-container.swal2-grow-column.swal2-top-end,.swal2-container.swal2-grow-column.swal2-top-right{align-items:flex-end}.swal2-container.swal2-grow-column>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-no-transition{transition:none!important}.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right):not(.swal2-grow-fullscreen)>.swal2-modal{margin:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-container .swal2-modal{margin:0!important}}.swal2-popup{display:none;position:relative;box-sizing:border-box;flex-direction:column;justify-content:center;width:32em;max-width:100%;padding:1.25em;border:none;border-radius:.3125em;background:#fff;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-header{display:flex;flex-direction:column;align-items:center;padding:0 1.8em}.swal2-title{position:relative;max-width:100%;margin:0 0 .4em;padding:0;color:#595959;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;box-sizing:border-box;flex-wrap:wrap;align-items:center;justify-content:center;width:100%;margin:1.25em auto 0;padding:0 1.6em}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-loader{display:none;align-items:center;justify-content:center;width:2.2em;height:2.2em;margin:0 1.875em;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border-width:.25em;border-style:solid;border-radius:100%;border-color:#2778c4 transparent #2778c4 transparent}.swal2-styled{margin:.3125em;padding:.625em 2em;box-shadow:none;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#2778c4;color:#fff;font-size:1.0625em}.swal2-styled.swal2-deny{border:0;border-radius:.25em;background:initial;background-color:#d14529;color:#fff;font-size:1.0625em}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#757575;color:#fff;font-size:1.0625em}.swal2-styled:focus{outline:0;box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(50,100,150,.4)}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1.25em 0 0;padding:1em 0 0;border-top:1px solid #eee;color:#545454;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;height:.25em;overflow:hidden;border-bottom-right-radius:.3125em;border-bottom-left-radius:.3125em}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:1.25em auto}.swal2-close{position:absolute;z-index:2;top:0;right:0;align-items:center;justify-content:center;width:1.2em;height:1.2em;padding:0;overflow:hidden;transition:color .1s ease-out;border:none;border-radius:0;background:0 0;color:#ccc;font-family:serif;font-size:2.5em;line-height:1.2;cursor:pointer}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-close::-moz-focus-inner{border:0}.swal2-content{z-index:1;justify-content:center;margin:0;padding:0 1.6em;color:#545454;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em auto}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:100%;transition:border-color .3s,box-shadow .3s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06);color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:0 0 3px #c4e6f5}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::-ms-input-placeholder,.swal2-input::-ms-input-placeholder,.swal2-textarea::-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em auto;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-input[type=number]{max-width:10em}.swal2-file{background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{margin:0 .4em}.swal2-input-label{display:flex;justify-content:center;margin:1em auto}.swal2-validation-message{display:none;align-items:center;justify-content:center;margin:0 -2.7em;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:"!";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:1.25em auto 1.875em;border:.25em solid transparent;border-radius:50%;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{flex-wrap:wrap;align-items:center;max-width:100%;margin:0 0 1.25em;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;flex-shrink:0;width:2em;height:2em;border-radius:2em;background:#2778c4;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#2778c4}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;flex-shrink:0;width:2.5em;height:.4em;margin:0 -1px;background:#2778c4}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{right:auto;left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@supports (-ms-accelerator:true){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@-moz-document url-prefix(){.swal2-close:focus{outline:2px solid rgba(50,100,150,.4)}}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-container{top:auto;right:auto;bottom:auto;left:auto;max-width:calc(100% - .625em * 2);background-color:transparent!important}body.swal2-no-backdrop .swal2-container>.swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}body.swal2-no-backdrop .swal2-container.swal2-top{top:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-top-left,body.swal2-no-backdrop .swal2-container.swal2-top-start{top:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-top-end,body.swal2-no-backdrop .swal2-container.swal2-top-right{top:0;right:0}body.swal2-no-backdrop .swal2-container.swal2-center{top:50%;left:50%;transform:translate(-50%,-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-left,body.swal2-no-backdrop .swal2-container.swal2-center-start{top:50%;left:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-end,body.swal2-no-backdrop .swal2-container.swal2-center-right{top:50%;right:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom{bottom:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom-left,body.swal2-no-backdrop .swal2-container.swal2-bottom-start{bottom:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-bottom-end,body.swal2-no-backdrop .swal2-container.swal2-bottom-right{right:0;bottom:0}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}body.swal2-toast-shown .swal2-container{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}body.swal2-toast-column .swal2-toast{flex-direction:column;align-items:stretch}body.swal2-toast-column .swal2-toast .swal2-actions{flex:1;align-self:stretch;height:2.2em;margin-top:.3125em}body.swal2-toast-column .swal2-toast .swal2-loading{justify-content:center}body.swal2-toast-column .swal2-toast .swal2-input{height:2em;margin:.3125em auto;font-size:1em}body.swal2-toast-column .swal2-toast .swal2-validation-message{font-size:1em}')},function(e,t,n){"use strict";(function(e){var r=n(0),o=n.n(r),i=n(2),a=n(4),l=n.n(a),u="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function s(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var c=o.a.createContext||function(e,t){var n,o,a,c="__create-react-context-"+((u[a="__global_unique_id__"]=(u[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=s(t.props.value),t}Object(i.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[c]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[c]=l.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(i.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[c]&&this.context[c].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[c]&&this.context[c].off(this.onUpdate)},r.getValue=function(){return this.context[c]?this.context[c].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((o={})[c]=l.a.object,o),{Provider:f,Consumer:d}};t.a=c}).call(this,n(14))},function(e,t,n){var r=n(56);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,l="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(a,p),a=p+f.length,d)l+=d[1];else{var m=e[a],h=n[2],g=n[3],v=n[4],y=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var x=null!=h&&null!=m&&m!==h,k="+"===b||"*"===b,C="?"===b||"*"===b,E=n[2]||c,S=v||y;r.push({name:g||i++,prefix:h||"",delimiter:E,optional:C,repeat:k,partial:x,asterisk:!!w,pattern:S?s(S):w?".*":"[^"+u(E)+"]+?"})}}return a<e.length&&(l+=e.substr(a)),l&&r.push(l),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",l=t||{},u=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)a+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),a+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var m=u(n.delimiter||"/"),h=a.slice(-m.length)===m;return o||(a=(h?a.slice(0,-m.length):a)+"(?:"+m+"(?=$))?"),a+=i?"$":o&&h?"":"(?="+m+"|$)",c(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,u=a(e),s=1;s<arguments.length;s++){for(var c in n=Object(arguments[s]))o.call(n,c)&&(u[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)i.call(n,l[f])&&(u[l[f]]=n[l[f]])}}return u}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(1);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var l=e.indexOf("#");-1!==l&&(e=e.slice(0,l)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(1),o=n(42),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(l=n(19)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(i)})),e.exports=u}).call(this,n(41))},function(e,t,n){"use strict";var r=n(1),o=n(43),i=n(45),a=n(16),l=n(46),u=n(49),s=n(50),c=n(20);e.exports=function(e){return new Promise((function(t,n){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"],(r.isBlob(f)||r.isFile(f))&&f.type&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",h=unescape(encodeURIComponent(e.auth.password))||"";d.Authorization="Basic "+btoa(m+":"+h)}var g=l(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),a(g,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?u(p.getAllResponseHeaders()):null,i={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,n,i),p=null}},p.onabort=function(){p&&(n(c("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){n(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=(e.withCredentials||s(g))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;v&&(d[e.xsrfHeaderName]=v)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),n(e),p=null)})),f||(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(44);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],a=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],l=["validateStatus"];function u(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function s(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=u(void 0,t[e]))})),r.forEach(i,s),r.forEach(a,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=u(void 0,e[o])):n[o]=u(void 0,t[o])})),r.forEach(l,(function(r){r in t?n[r]=u(e[r],t[r]):r in e&&(n[r]=u(void 0,e[r]))}));var c=o.concat(i).concat(a).concat(l),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===c.indexOf(e)}));return r.forEach(f,s),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(u," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var a,l,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},function(e,t,n){"use strict";t.a=n.p+"9332e36e03e67737c6f1abba6bcb84e2.otf"},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(13),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,s=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,h=o?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}function x(){}function k(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var C=k.prototype=new x;C.constructor=k,r(C,w.prototype),C.isPureReactComponent=!0;var E={current:null},S=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function P(e,t,n){var r,o={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:l,props:o,_owner:E.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var A=/\/+/g,z=[];function _(e,t,n,r){if(z.length){var o=z.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>z.length&&z.push(e)}function N(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var u=!1;if(null===t)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case i:case a:u=!0}}if(u)return r(o,t,""===n?"."+j(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var s=0;s<t.length;s++){var c=n+j(l=t[s],s);u+=e(l,c,r,o)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=g&&t[g]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),s=0;!(l=t.next()).done;)u+=e(l=l.value,c=n+j(l,s++),r,o);else if("object"===l)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(A,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(A,"$&/")+"/"),N(e,I,t=_(t,i,r,o)),R(t)}var D={current:null};function B(){var e=D.current;if(null===e)throw Error(v(321));return e}var F={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:E,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;N(e,M,t=_(null,null,t,n)),R(t)},count:function(e){return N(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!O(e))throw Error(v(143));return e}},t.Component=w,t.Fragment=l,t.Profiler=s,t.PureComponent=k,t.StrictMode=u,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=F,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var o=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=E.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)S.call(t,c)&&!T.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];o.children=s}return{$$typeof:i,type:e.type,key:a,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=P,t.createFactory=function(e){var t=P.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return B().useCallback(e,t)},t.useContext=function(e,t){return B().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return B().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return B().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return B().useLayoutEffect(e,t)},t.useMemo=function(e,t){return B().useMemo(e,t)},t.useReducer=function(e,t,n){return B().useReducer(e,t,n)},t.useRef=function(e){return B().useRef(e)},t.useState=function(e){return B().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(13),i=n(30);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function l(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var u=!1,s=null,c=!1,f=null,d={onError:function(e){u=!0,s=e}};function p(e,t,n,r,o,i,a,c,f){u=!1,s=null,l.apply(d,arguments)}var m=null,h=null,g=null;function v(e,t,n){var r=e.type||"unknown-event";e.currentTarget=g(n),function(e,t,n,r,o,i,l,d,m){if(p.apply(this,arguments),u){if(!u)throw Error(a(198));var h=s;u=!1,s=null,c||(c=!0,f=h)}}(r,t,void 0,e),e.currentTarget=null}var y=null,b={};function w(){if(y)for(var e in b){var t=b[e],n=y.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!k[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in k[n]=t,n=t.eventTypes){var o=void 0,i=n[r],l=t,u=r;if(C.hasOwnProperty(u))throw Error(a(99,u));C[u]=i;var s=i.phasedRegistrationNames;if(s){for(o in s)s.hasOwnProperty(o)&&x(s[o],l,u);o=!0}else i.registrationName?(x(i.registrationName,l,u),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function x(e,t,n){if(E[e])throw Error(a(100,e));E[e]=t,S[e]=t.eventTypes[n].dependencies}var k=[],C={},E={},S={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&w()}var P=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),O=null,A=null,z=null;function _(e){if(e=h(e)){if("function"!=typeof O)throw Error(a(280));var t=e.stateNode;t&&(t=m(t),O(e.stateNode,e.type,t))}}function R(e){A?z?z.push(e):z=[e]:A=e}function N(){if(A){var e=A,t=z;if(z=A=null,_(e),t)for(e=0;e<t.length;e++)_(t[e])}}function j(e,t){return e(t)}function M(e,t,n,r,o){return e(t,n,r,o)}function I(){}var L=j,D=!1,B=!1;function F(){null===A&&null===z||(I(),N())}function U(e,t,n){if(B)return e(t,n);B=!0;try{return L(e,t,n)}finally{B=!1,F()}}var q=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,$=Object.prototype.hasOwnProperty,Q={},W={};function V(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var H={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){H[e]=new V(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];H[t]=new V(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){H[e]=new V(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){H[e]=new V(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){H[e]=new V(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){H[e]=new V(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){H[e]=new V(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){H[e]=new V(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){H[e]=new V(e,5,!1,e.toLowerCase(),null,!1)}));var K=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(K,Y);H[t]=new V(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(K,Y);H[t]=new V(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(K,Y);H[t]=new V(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){H[e]=new V(e,1,!1,e.toLowerCase(),null,!1)})),H.xlinkHref=new V("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){H[e]=new V(e,1,!1,e.toLowerCase(),null,!0)}));var X=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Z(e,t,n,r){var o=H.hasOwnProperty(t)?H[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!$.call(W,e)||!$.call(Q,e)&&(q.test(e)?W[e]=!0:(Q[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}X.hasOwnProperty("ReactCurrentDispatcher")||(X.ReactCurrentDispatcher={current:null}),X.hasOwnProperty("ReactCurrentBatchConfig")||(X.ReactCurrentBatchConfig={suspense:null});var G=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,oe=J?Symbol.for("react.profiler"):60114,ie=J?Symbol.for("react.provider"):60109,ae=J?Symbol.for("react.context"):60110,le=J?Symbol.for("react.concurrent_mode"):60111,ue=J?Symbol.for("react.forward_ref"):60112,se=J?Symbol.for("react.suspense"):60113,ce=J?Symbol.for("react.suspense_list"):60120,fe=J?Symbol.for("react.memo"):60115,de=J?Symbol.for("react.lazy"):60116,pe=J?Symbol.for("react.block"):60121,me="function"==typeof Symbol&&Symbol.iterator;function he(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=me&&e[me]||e["@@iterator"])?e:null}function ge(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case se:return"Suspense";case ce:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case ue:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ge(e.type);case pe:return ge(e.render);case de:if(e=1===e._status?e._result:null)return ge(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ge(e.type);n=null,r&&(n=ge(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(G,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ce(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ye(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ee(e,t){null!=(t=t.checked)&&Z(e,"checked",t,!1)}function Se(e,t){Ee(e,t);var n=ye(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Pe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Pe(e,t.type,ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Pe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Oe(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ye(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ze(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function _e(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ye(n)}}function Re(e,t){var n=ye(t.value),r=ye(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ne(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var je="http://www.w3.org/1999/xhtml",Me="http://www.w3.org/2000/svg";function Ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var De,Be=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Me||"innerHTML"in e)e.innerHTML=t;else{for((De=De||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=De.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Ue(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var qe={animationend:Ue("Animation","AnimationEnd"),animationiteration:Ue("Animation","AnimationIteration"),animationstart:Ue("Animation","AnimationStart"),transitionend:Ue("Transition","TransitionEnd")},$e={},Qe={};function We(e){if($e[e])return $e[e];if(!qe[e])return e;var t,n=qe[e];for(t in n)if(n.hasOwnProperty(t)&&t in Qe)return $e[e]=n[t];return e}P&&(Qe=document.createElement("div").style,"AnimationEvent"in window||(delete qe.animationend.animation,delete qe.animationiteration.animation,delete qe.animationstart.animation),"TransitionEvent"in window||delete qe.transitionend.transition);var Ve=We("animationend"),He=We("animationiteration"),Ke=We("animationstart"),Ye=We("transitionend"),Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ze=new("function"==typeof WeakMap?WeakMap:Map);function Ge(e){var t=Ze.get(e);return void 0===t&&(t=new Map,Ze.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return tt(o),e;if(i===r)return tt(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function ot(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)v(e,t[r],n[r]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(it=rt(it,e)),e=it,it=null,e){if(ot(e,at),it)throw Error(a(95));if(c)throw e=f,c=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function st(e){if(!P)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function dt(e,t,n,r){if(ct.length){var o=ct.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Pn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ut(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var l=null,u=0;u<k.length;u++){var s=k[u];s&&(s=s.extractEvents(r,t,i,o,a))&&(l=rt(l,s))}lt(l)}}function mt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Kt(t,"scroll",!0);break;case"focus":case"blur":Kt(t,"focus",!0),Kt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":st(e)&&Kt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Xe.indexOf(e)&&Ht(e,t)}n.set(e,null)}}var ht,gt,vt,yt=!1,bt=[],wt=null,xt=null,kt=null,Ct=new Map,Et=new Map,St=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Pt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Ot(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function At(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":kt=null;break;case"pointerover":case"pointerout":Ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Et.delete(t.pointerId)}}function zt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=Ot(t,n,r,o,i),null!==t&&(null!==(t=On(t))&&gt(t)),e):(e.eventSystemFlags|=r,e)}function _t(e){var t=Pn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){vt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Rt(e){if(null!==e.blockedOn)return!1;var t=Gt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=On(t);return null!==n&&gt(n),e.blockedOn=t,!1}return!0}function Nt(e,t,n){Rt(e)&&n.delete(t)}function jt(){for(yt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=On(e.blockedOn))&&ht(e);break}var t=Gt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==wt&&Rt(wt)&&(wt=null),null!==xt&&Rt(xt)&&(xt=null),null!==kt&&Rt(kt)&&(kt=null),Ct.forEach(Nt),Et.forEach(Nt)}function Mt(e,t){e.blockedOn===t&&(e.blockedOn=null,yt||(yt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,jt)))}function It(e){function t(t){return Mt(t,e)}if(0<bt.length){Mt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&Mt(wt,e),null!==xt&&Mt(xt,e),null!==kt&&Mt(kt,e),Ct.forEach(t),Et.forEach(t),n=0;n<St.length;n++)(r=St[n]).blockedOn===e&&(r.blockedOn=null);for(;0<St.length&&null===(n=St[0]).blockedOn;)_t(n),null===n.blockedOn&&St.shift()}var Lt={},Dt=new Map,Bt=new Map,Ft=["abort","abort",Ve,"animationEnd",He,"animationIteration",Ke,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function Ut(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Bt.set(r,t),Dt.set(r,i),Lt[o]=i}}Ut("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ut("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ut(Ft,2);for(var qt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),$t=0;$t<qt.length;$t++)Bt.set(qt[$t],0);var Qt=i.unstable_UserBlockingPriority,Wt=i.unstable_runWithPriority,Vt=!0;function Ht(e,t){Kt(t,e,!1)}function Kt(e,t,n){var r=Bt.get(t);switch(void 0===r?2:r){case 0:r=Yt.bind(null,t,1,e);break;case 1:r=Xt.bind(null,t,1,e);break;default:r=Zt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Yt(e,t,n,r){D||I();var o=Zt,i=D;D=!0;try{M(o,e,t,n,r)}finally{(D=i)||F()}}function Xt(e,t,n,r){Wt(Qt,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){if(Vt)if(0<bt.length&&-1<Tt.indexOf(e))e=Ot(null,e,t,n,r),bt.push(e);else{var o=Gt(e,t,n,r);if(null===o)At(e,r);else if(-1<Tt.indexOf(e))e=Ot(o,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return wt=zt(wt,e,t,n,r,o),!0;case"dragenter":return xt=zt(xt,e,t,n,r,o),!0;case"mouseover":return kt=zt(kt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Ct.set(i,zt(Ct.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Et.set(i,zt(Et.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){At(e,r),e=dt(e,r,null,t);try{U(pt,e)}finally{ft(e)}}}}function Gt(e,t,n,r){if(null!==(n=Pn(n=ut(r)))){var o=Je(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=et(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=dt(e,r,n,t);try{U(pt,e)}finally{ft(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ln=je;function un(e,t){var n=Ge(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=S[t];for(var r=0;r<t.length;r++)mt(t[r],e,n)}function sn(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hn=null,gn=null;function vn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function kn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Cn=Math.random().toString(36).slice(2),En="__reactInternalInstance$"+Cn,Sn="__reactEventHandlers$"+Cn,Tn="__reactContainere$"+Cn;function Pn(e){var t=e[En];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[En]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kn(e);null!==e;){if(n=e[En])return n;e=kn(e)}return t}n=(e=n).parentNode}return null}function On(e){return!(e=e[En]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function An(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function zn(e){return e[Sn]||null}function _n(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Rn(e,t){var n=e.stateNode;if(!n)return null;var r=m(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Nn(e,t,n){(t=Rn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function jn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=_n(t);for(t=n.length;0<t--;)Nn(n[t],"captured",e);for(t=0;t<n.length;t++)Nn(n[t],"bubbled",e)}}function Mn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Rn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){e&&e.dispatchConfig.registrationName&&Mn(e._targetInst,null,e)}function Ln(e){ot(e,jn)}var Dn=null,Bn=null,Fn=null;function Un(){if(Fn)return Fn;var e,t,n=Bn,r=n.length,o="value"in Dn?Dn.value:Dn.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Fn=o.slice(e,1<t?1-t:void 0)}function qn(){return!0}function $n(){return!1}function Qn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?qn:$n,this.isPropagationStopped=$n,this}function Wn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Vn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Hn(e){e.eventPool=[],e.getPooled=Wn,e.release=Vn}o(Qn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=qn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=qn)},persist:function(){this.isPersistent=qn},isPersistent:$n,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=$n,this._dispatchInstances=this._dispatchListeners=null}}),Qn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Qn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Hn(n),n},Hn(Qn);var Kn=Qn.extend({data:null}),Yn=Qn.extend({data:null}),Xn=[9,13,27,32],Zn=P&&"CompositionEvent"in window,Gn=null;P&&"documentMode"in document&&(Gn=document.documentMode);var Jn=P&&"TextEvent"in window&&!Gn,er=P&&(!Zn||Gn&&8<Gn&&11>=Gn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function or(e,t){switch(e){case"keyup":return-1!==Xn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ir(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var lr={eventTypes:nr,extractEvents:function(e,t,n,r){var o;if(Zn)e:{switch(e){case"compositionstart":var i=nr.compositionStart;break e;case"compositionend":i=nr.compositionEnd;break e;case"compositionupdate":i=nr.compositionUpdate;break e}i=void 0}else ar?or(e,n)&&(i=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=nr.compositionStart);return i?(er&&"ko"!==n.locale&&(ar||i!==nr.compositionStart?i===nr.compositionEnd&&ar&&(o=Un()):(Bn="value"in(Dn=r)?Dn.value:Dn.textContent,ar=!0)),i=Kn.getPooled(i,t,n,r),o?i.data=o:null!==(o=ir(n))&&(i.data=o),Ln(i),o=i):o=null,(e=Jn?function(e,t){switch(e){case"compositionend":return ir(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Zn&&or(e,t)?(e=Un(),Fn=Bn=Dn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Yn.getPooled(nr.beforeInput,t,n,r)).data=e,Ln(t)):t=null,null===o?t:null===t?o:[o,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var cr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Qn.getPooled(cr.change,e,t,n)).type="change",R(n),Ln(e),e}var dr=null,pr=null;function mr(e){lt(e)}function hr(e){if(xe(An(e)))return e}function gr(e,t){if("change"===e)return t}var vr=!1;function yr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&hr(pr))if(e=fr(pr,e,ut(e)),D)lt(e);else{D=!0;try{j(mr,e)}finally{D=!1,F()}}}function wr(e,t,n){"focus"===e?(yr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&yr()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return hr(pr)}function kr(e,t){if("click"===e)return hr(t)}function Cr(e,t){if("input"===e||"change"===e)return hr(t)}P&&(vr=st("input")&&(!document.documentMode||9<document.documentMode));var Er={eventTypes:cr,_isInputEventSupported:vr,extractEvents:function(e,t,n,r){var o=t?An(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=gr;else if(sr(o))if(vr)a=Cr;else{a=xr;var l=wr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=kr);if(a&&(a=a(e,t)))return fr(a,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Pe(o,"number",o.value)}},Sr=Qn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Or(){return Pr}var Ar=0,zr=0,_r=!1,Rr=!1,Nr=Sr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Or,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ar;return Ar=e.screenX,_r?"mousemove"===e.type?e.screenX-t:0:(_r=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=zr;return zr=e.screenY,Rr?"mousemove"===e.type?e.screenY-t:0:(Rr=!0,0)}}),jr=Nr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Mr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ir={eventTypes:Mr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Pn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var l=Nr,u=Mr.mouseLeave,s=Mr.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=jr,u=Mr.pointerLeave,s=Mr.pointerEnter,c="pointer");if(e=null==a?i:An(a),i=null==t?i:An(t),(u=l.getPooled(u,a,n,r)).type=c+"leave",u.target=e,u.relatedTarget=i,(n=l.getPooled(s,t,n,r)).type=c+"enter",n.target=i,n.relatedTarget=e,c=t,(r=a)&&c)e:{for(s=c,a=0,e=l=r;e;e=_n(e))a++;for(e=0,t=s;t;t=_n(t))e++;for(;0<a-e;)l=_n(l),a--;for(;0<e-a;)s=_n(s),e--;for(;a--;){if(l===s||l===s.alternate)break e;l=_n(l),s=_n(s)}l=null}else l=null;for(s=l,l=[];r&&r!==s&&(null===(a=r.alternate)||a!==s);)l.push(r),r=_n(r);for(r=[];c&&c!==s&&(null===(a=c.alternate)||a!==s);)r.push(c),c=_n(c);for(c=0;c<l.length;c++)Mn(l[c],"bubbled",u);for(c=r.length;0<c--;)Mn(r[c],"captured",n);return 0==(64&o)?[u]:[u,n]}};var Lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Dr=Object.prototype.hasOwnProperty;function Br(e,t){if(Lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Dr.call(t,n[r])||!Lr(e[n[r]],t[n[r]]))return!1;return!0}var Fr=P&&"documentMode"in document&&11>=document.documentMode,Ur={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},qr=null,$r=null,Qr=null,Wr=!1;function Vr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Wr||null==qr||qr!==cn(n)?null:("selectionStart"in(n=qr)&&mn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Qr&&Br(Qr,n)?null:(Qr=n,(e=Qn.getPooled(Ur.select,$r,e,t)).type="select",e.target=qr,Ln(e),e))}var Hr={eventTypes:Ur,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Ge(o),i=S.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?An(t):window,e){case"focus":(sr(o)||"true"===o.contentEditable)&&(qr=o,$r=t,Qr=null);break;case"blur":Qr=$r=qr=null;break;case"mousedown":Wr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Wr=!1,Vr(n,r);case"selectionchange":if(Fr)break;case"keydown":case"keyup":return Vr(n,r)}return null}},Kr=Qn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yr=Qn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Xr=Sr.extend({relatedTarget:null});function Zr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Gr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},eo=Sr.extend({key:function(e){if(e.key){var t=Gr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Or,charCode:function(e){return"keypress"===e.type?Zr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),to=Nr.extend({dataTransfer:null}),no=Sr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Or}),ro=Qn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),oo=Nr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),io={eventTypes:Lt,extractEvents:function(e,t,n,r){var o=Dt.get(e);if(!o)return null;switch(e){case"keypress":if(0===Zr(n))return null;case"keydown":case"keyup":e=eo;break;case"blur":case"focus":e=Xr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Nr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=to;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=no;break;case Ve:case He:case Ke:e=Kr;break;case Ye:e=ro;break;case"scroll":e=Sr;break;case"wheel":e=oo;break;case"copy":case"cut":case"paste":e=Yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=jr;break;default:e=Qn}return Ln(t=e.getPooled(o,t,n,r)),t}};if(y)throw Error(a(101));y=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),m=zn,h=On,g=An,T({SimpleEventPlugin:io,EnterLeaveEventPlugin:Ir,ChangeEventPlugin:Er,SelectEventPlugin:Hr,BeforeInputEventPlugin:lr});var ao=[],lo=-1;function uo(e){0>lo||(e.current=ao[lo],ao[lo]=null,lo--)}function so(e,t){lo++,ao[lo]=e.current,e.current=t}var co={},fo={current:co},po={current:!1},mo=co;function ho(e,t){var n=e.type.contextTypes;if(!n)return co;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function go(e){return null!=(e=e.childContextTypes)}function vo(){uo(po),uo(fo)}function yo(e,t,n){if(fo.current!==co)throw Error(a(168));so(fo,t),so(po,n)}function bo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,ge(t)||"Unknown",i));return o({},n,{},r)}function wo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,mo=fo.current,so(fo,e),so(po,po.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,uo(po),uo(fo),so(fo,e)):uo(po),so(po,n)}var ko=i.unstable_runWithPriority,Co=i.unstable_scheduleCallback,Eo=i.unstable_cancelCallback,So=i.unstable_requestPaint,To=i.unstable_now,Po=i.unstable_getCurrentPriorityLevel,Oo=i.unstable_ImmediatePriority,Ao=i.unstable_UserBlockingPriority,zo=i.unstable_NormalPriority,_o=i.unstable_LowPriority,Ro=i.unstable_IdlePriority,No={},jo=i.unstable_shouldYield,Mo=void 0!==So?So:function(){},Io=null,Lo=null,Do=!1,Bo=To(),Fo=1e4>Bo?To:function(){return To()-Bo};function Uo(){switch(Po()){case Oo:return 99;case Ao:return 98;case zo:return 97;case _o:return 96;case Ro:return 95;default:throw Error(a(332))}}function qo(e){switch(e){case 99:return Oo;case 98:return Ao;case 97:return zo;case 96:return _o;case 95:return Ro;default:throw Error(a(332))}}function $o(e,t){return e=qo(e),ko(e,t)}function Qo(e,t,n){return e=qo(e),Co(e,t,n)}function Wo(e){return null===Io?(Io=[e],Lo=Co(Oo,Ho)):Io.push(e),No}function Vo(){if(null!==Lo){var e=Lo;Lo=null,Eo(e)}Ho()}function Ho(){if(!Do&&null!==Io){Do=!0;var e=0;try{var t=Io;$o(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Io=null}catch(t){throw null!==Io&&(Io=Io.slice(e+1)),Co(Oo,Vo),t}finally{Do=!1}}}function Ko(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Yo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Xo={current:null},Zo=null,Go=null,Jo=null;function ei(){Jo=Go=Zo=null}function ti(e){var t=Xo.current;uo(Xo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ri(e,t){Zo=e,Jo=Go=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(za=!0),e.firstContext=null)}function oi(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Go){if(null===Zo)throw Error(a(308));Go=t,Zo.dependencies={expirationTime:0,firstContext:t,responders:null}}else Go=Go.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ui(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function si(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ci(e,t){var n=e.alternate;null!==n&&li(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function fi(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.baseQueue,l=i.shared.pending;if(null!==l){if(null!==a){var u=a.next;a.next=l.next,l.next=u}a=l,i.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=l))}if(null!==a){u=a.next;var s=i.baseState,c=0,f=null,d=null,p=null;if(null!==u)for(var m=u;;){if((l=m.expirationTime)<r){var h={expirationTime:m.expirationTime,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null};null===p?(d=p=h,f=s):p=p.next=h,l>c&&(c=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null}),iu(l,m.suspenseConfig);e:{var g=e,v=m;switch(l=t,h=n,v.tag){case 1:if("function"==typeof(g=v.payload)){s=g.call(h,s,l);break e}s=g;break e;case 3:g.effectTag=-4097&g.effectTag|64;case 0:if(null==(l="function"==typeof(g=v.payload)?g.call(h,s,l):g))break e;s=o({},s,l);break e;case 2:ii=!0}}null!==m.callback&&(e.effectTag|=32,null===(l=i.effects)?i.effects=[m]:l.push(m))}if(null===(m=m.next)||m===u){if(null===(l=i.shared.pending))break;m=a.next=l.next,l.next=u,i.baseQueue=a=l,i.shared.pending=null}}null===p?f=s:p.next=d,i.baseState=f,i.baseQueue=p,au(c),e.expirationTime=c,e.memoizedState=s}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var pi=X.ReactCurrentBatchConfig,mi=(new r.Component).refs;function hi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var gi={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Vl(),o=pi.suspense;(o=ui(r=Hl(r,e,o),o)).payload=t,null!=n&&(o.callback=n),si(e,o),Kl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Vl(),o=pi.suspense;(o=ui(r=Hl(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),si(e,o),Kl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Vl(),r=pi.suspense;(r=ui(n=Hl(n,e,r),r)).tag=2,null!=t&&(r.callback=t),si(e,r),Kl(e,n)}};function vi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!Br(n,r)||!Br(o,i))}function yi(e,t,n){var r=!1,o=co,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=go(t)?mo:fo.current,i=(r=null!=(r=t.contextTypes))?ho(e,o):co),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=gi,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function bi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&gi.enqueueReplaceState(t,t.state,null)}function wi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=go(t)?mo:fo.current,o.context=ho(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(hi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&gi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var xi=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ci(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ei(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Tu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Au(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=Pu(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ou(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Au(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Pu(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case te:return(t=zu(t,e.mode,n)).return=e,t}if(xi(t)||he(t))return(t=Ou(t,e.mode,n,null)).return=e,t;Ci(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case te:return n.key===o?c(e,t,n,r):null}if(xi(n)||he(n))return null!==o?null:f(e,t,n,r,null);Ci(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case te:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(xi(r)||he(r))return f(t,e=e.get(n)||null,r,o,null);Ci(t,r)}return null}function h(o,a,l,u){for(var s=null,c=null,f=a,h=a=0,g=null;null!==f&&h<l.length;h++){f.index>h?(g=f,f=null):g=f.sibling;var v=p(o,f,l[h],u);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,h),null===c?s=v:c.sibling=v,c=v,f=g}if(h===l.length)return n(o,f),s;if(null===f){for(;h<l.length;h++)null!==(f=d(o,l[h],u))&&(a=i(f,a,h),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);h<l.length;h++)null!==(g=m(f,o,h,l[h],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?h:g.key),a=i(g,a,h),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(o,e)})),s}function g(o,l,u,s){var c=he(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,h=l,g=l=0,v=null,y=u.next();null!==h&&!y.done;g++,y=u.next()){h.index>g?(v=h,h=null):v=h.sibling;var b=p(o,h,y.value,s);if(null===b){null===h&&(h=v);break}e&&h&&null===b.alternate&&t(o,h),l=i(b,l,g),null===f?c=b:f.sibling=b,f=b,h=v}if(y.done)return n(o,h),c;if(null===h){for(;!y.done;g++,y=u.next())null!==(y=d(o,y.value,s))&&(l=i(y,l,g),null===f?c=y:f.sibling=y,f=y);return c}for(h=r(o,h);!y.done;g++,y=u.next())null!==(y=m(h,o,g,y.value,s))&&(e&&null!==y.alternate&&h.delete(null===y.key?g:y.key),l=i(y,l,g),null===f?c=y:f.sibling=y,f=y);return e&&h.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case ee:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(i.type===ne){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}break;default:if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=ki(e,s,i),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}i.type===ne?((r=Ou(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Pu(i.type,i.key,i.props,null,e.mode,u)).ref=ki(e,r,i),u.return=e,e=u)}return l(e);case te:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=zu(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Au(i,e.mode,u)).return=e,e=r),l(e);if(xi(i))return h(e,r,i,u);if(he(i))return g(e,r,i,u);if(c&&Ci(e,i),void 0===i&&!s)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Si=Ei(!0),Ti=Ei(!1),Pi={},Oi={current:Pi},Ai={current:Pi},zi={current:Pi};function _i(e){if(e===Pi)throw Error(a(174));return e}function Ri(e,t){switch(so(zi,t),so(Ai,e),so(Oi,Pi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Le(null,"");break;default:t=Le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(Oi),so(Oi,t)}function Ni(){uo(Oi),uo(Ai),uo(zi)}function ji(e){_i(zi.current);var t=_i(Oi.current),n=Le(t,e.type);t!==n&&(so(Ai,e),so(Oi,n))}function Mi(e){Ai.current===e&&(uo(Oi),uo(Ai))}var Ii={current:0};function Li(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Di(e,t){return{responder:e,props:t}}var Bi=X.ReactCurrentDispatcher,Fi=X.ReactCurrentBatchConfig,Ui=0,qi=null,$i=null,Qi=null,Wi=!1;function Vi(){throw Error(a(321))}function Hi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Lr(e[n],t[n]))return!1;return!0}function Ki(e,t,n,r,o,i){if(Ui=i,qi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Bi.current=null===e||null===e.memoizedState?va:ya,e=n(r,o),t.expirationTime===Ui){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Qi=$i=null,t.updateQueue=null,Bi.current=ba,e=n(r,o)}while(t.expirationTime===Ui)}if(Bi.current=ga,t=null!==$i&&null!==$i.next,Ui=0,Qi=$i=qi=null,Wi=!1,t)throw Error(a(300));return e}function Yi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Qi?qi.memoizedState=Qi=e:Qi=Qi.next=e,Qi}function Xi(){if(null===$i){var e=qi.alternate;e=null!==e?e.memoizedState:null}else e=$i.next;var t=null===Qi?qi.memoizedState:Qi.next;if(null!==t)Qi=t,$i=e;else{if(null===e)throw Error(a(310));e={memoizedState:($i=e).memoizedState,baseState:$i.baseState,baseQueue:$i.baseQueue,queue:$i.queue,next:null},null===Qi?qi.memoizedState=Qi=e:Qi=Qi.next=e}return Qi}function Zi(e,t){return"function"==typeof t?t(e):t}function Gi(e){var t=Xi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=$i,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=i=null,s=o;do{var c=s.expirationTime;if(c<Ui){var f={expirationTime:s.expirationTime,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,i=r):u=u.next=f,c>qi.expirationTime&&(qi.expirationTime=c,au(c))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:s.suspenseConfig,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),iu(c,s.suspenseConfig),r=s.eagerReducer===e?s.eagerState:e(r,s.action);s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=l,Lr(r,t.memoizedState)||(za=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Ji(e){var t=Xi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);Lr(i,t.memoizedState)||(za=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ea(e){var t=Yi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Zi,lastRenderedState:e}).dispatch=ha.bind(null,qi,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=qi.updateQueue)?(t={lastEffect:null},qi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Xi().memoizedState}function ra(e,t,n,r){var o=Yi();qi.effectTag|=e,o.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function oa(e,t,n,r){var o=Xi();r=void 0===r?null:r;var i=void 0;if(null!==$i){var a=$i.memoizedState;if(i=a.destroy,null!==r&&Hi(r,a.deps))return void ta(t,n,i,r)}qi.effectTag|=e,o.memoizedState=ta(1|t,n,i,r)}function ia(e,t){return ra(516,4,e,t)}function aa(e,t){return oa(516,4,e,t)}function la(e,t){return oa(4,2,e,t)}function ua(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function sa(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,ua.bind(null,t,e),n)}function ca(){}function fa(e,t){return Yi().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Xi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Hi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Xi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Hi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ma(e,t,n){var r=Uo();$o(98>r?98:r,(function(){e(!0)})),$o(97<r?97:r,(function(){var r=Fi.suspense;Fi.suspense=void 0===t?null:t;try{e(!1),n()}finally{Fi.suspense=r}}))}function ha(e,t,n){var r=Vl(),o=pi.suspense;o={expirationTime:r=Hl(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===qi||null!==i&&i===qi)Wi=!0,o.expirationTime=Ui,qi.expirationTime=Ui;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.eagerReducer=i,o.eagerState=l,Lr(l,a))return}catch(e){}Kl(e,r)}}var ga={readContext:oi,useCallback:Vi,useContext:Vi,useEffect:Vi,useImperativeHandle:Vi,useLayoutEffect:Vi,useMemo:Vi,useReducer:Vi,useRef:Vi,useState:Vi,useDebugValue:Vi,useResponder:Vi,useDeferredValue:Vi,useTransition:Vi},va={readContext:oi,useCallback:fa,useContext:oi,useEffect:ia,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,ua.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Yi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Yi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ha.bind(null,qi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Yi().memoizedState=e},useState:ea,useDebugValue:ca,useResponder:Di,useDeferredValue:function(e,t){var n=ea(e),r=n[0],o=n[1];return ia((function(){var n=Fi.suspense;Fi.suspense=void 0===t?null:t;try{o(e)}finally{Fi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ma.bind(null,t,e),[t,e]),n]}},ya={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:la,useMemo:pa,useReducer:Gi,useRef:na,useState:function(){return Gi(Zi)},useDebugValue:ca,useResponder:Di,useDeferredValue:function(e,t){var n=Gi(Zi),r=n[0],o=n[1];return aa((function(){var n=Fi.suspense;Fi.suspense=void 0===t?null:t;try{o(e)}finally{Fi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Gi(Zi),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},ba={readContext:oi,useCallback:da,useContext:oi,useEffect:aa,useImperativeHandle:sa,useLayoutEffect:la,useMemo:pa,useReducer:Ji,useRef:na,useState:function(){return Ji(Zi)},useDebugValue:ca,useResponder:Di,useDeferredValue:function(e,t){var n=Ji(Zi),r=n[0],o=n[1];return aa((function(){var n=Fi.suspense;Fi.suspense=void 0===t?null:t;try{o(e)}finally{Fi.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ji(Zi),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},wa=null,xa=null,ka=!1;function Ca(e,t){var n=Eu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ea(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Sa(e){if(ka){var t=xa;if(t){var n=t;if(!Ea(e,t)){if(!(t=xn(n.nextSibling))||!Ea(e,t))return e.effectTag=-1025&e.effectTag|2,ka=!1,void(wa=e);Ca(wa,n)}wa=e,xa=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ka=!1,wa=e}}function Ta(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function Pa(e){if(e!==wa)return!1;if(!ka)return Ta(e),ka=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yn(t,e.memoizedProps))for(t=xa;t;)Ca(e,t),t=xn(t.nextSibling);if(Ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xa=xn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}xa=null}}else xa=wa?xn(e.stateNode.nextSibling):null;return!0}function Oa(){xa=wa=null,ka=!1}var Aa=X.ReactCurrentOwner,za=!1;function _a(e,t,n,r){t.child=null===e?Ti(t,null,n,r):Si(t,e.child,n,r)}function Ra(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=Ki(e,t,n,r,i,o),null===e||za?(t.effectTag|=1,_a(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ka(e,t,o))}function Na(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Su(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Pu(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ja(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:Br)(o,r)&&e.ref===t.ref)?Ka(e,t,i):(t.effectTag|=1,(e=Tu(a,r)).ref=t.ref,e.return=t,t.child=e)}function ja(e,t,n,r,o,i){return null!==e&&Br(e.memoizedProps,r)&&e.ref===t.ref&&(za=!1,o<i)?(t.expirationTime=e.expirationTime,Ka(e,t,i)):Ia(e,t,n,r,i)}function Ma(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ia(e,t,n,r,o){var i=go(n)?mo:fo.current;return i=ho(t,i),ri(t,o),n=Ki(e,t,n,r,i,o),null===e||za?(t.effectTag|=1,_a(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Ka(e,t,o))}function La(e,t,n,r,o){if(go(n)){var i=!0;wo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),yi(t,n,r),wi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=oi(s):s=ho(t,s=go(n)?mo:fo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&bi(t,a,r,s),ii=!1;var d=t.memoizedState;a.state=d,fi(t,r,a,o),u=t.memoizedState,l!==r||d!==u||po.current||ii?("function"==typeof c&&(hi(t,n,c,r),u=t.memoizedState),(l=ii||vi(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,li(e,t),l=t.memoizedProps,a.props=t.type===t.elementType?l:Yo(t.type,l),u=a.context,"object"==typeof(s=n.contextType)&&null!==s?s=oi(s):s=ho(t,s=go(n)?mo:fo.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&bi(t,a,r,s),ii=!1,u=t.memoizedState,a.state=u,fi(t,r,a,o),d=t.memoizedState,l!==r||u!==d||po.current||ii?("function"==typeof c&&(hi(t,n,c,r),d=t.memoizedState),(c=ii||vi(t,n,l,r,u,d,s))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,s)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Da(e,t,n,r,i,o)}function Da(e,t,n,r,o,i){Ma(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&xo(t,n,!1),Ka(e,t,i);r=t.stateNode,Aa.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,l,i)):_a(e,t,l,i),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function Ba(e){var t=e.stateNode;t.pendingContext?yo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yo(0,t.context,!1),Ri(e,t.containerInfo)}var Fa,Ua,qa,$a={dehydrated:null,retryTime:0};function Qa(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Ii.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),so(Ii,1&a),null===e){if(void 0!==i.fallback&&Sa(t),l){if(l=i.fallback,(i=Ou(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Ou(l,o,n,null)).return=t,i.sibling=n,t.memoizedState=$a,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=Ti(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(i=i.fallback,(n=Tu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Tu(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=$a,t.child=n,o}return n=Si(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=i.fallback,(i=Ou(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=Ou(l,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=$a,t.child=i,n}return t.memoizedState=null,t.child=Si(t,e,i.children,n)}function Wa(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ni(e.return,t)}function Va(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function Ha(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(_a(e,t,r.children,n),0!=(2&(r=Ii.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Wa(e,n);else if(19===e.tag)Wa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(so(Ii,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Li(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Va(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Li(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Va(t,!0,n,null,i,t.lastEffect);break;case"together":Va(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ka(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&au(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Tu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ya(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Xa(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return go(t.type)&&vo(),null;case 3:return Ni(),uo(po),uo(fo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Pa(t)||(t.effectTag|=4),null;case 5:Mi(t),n=_i(zi.current);var i=t.type;if(null!==e&&null!=t.stateNode)Ua(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=_i(Oi.current),Pa(t)){r=t.stateNode,i=t.type;var l=t.memoizedProps;switch(r[En]=t,r[Sn]=l,i){case"iframe":case"object":case"embed":Ht("load",r);break;case"video":case"audio":for(e=0;e<Xe.length;e++)Ht(Xe[e],r);break;case"source":Ht("error",r);break;case"img":case"image":case"link":Ht("error",r),Ht("load",r);break;case"form":Ht("reset",r),Ht("submit",r);break;case"details":Ht("toggle",r);break;case"input":Ce(r,l),Ht("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Ht("invalid",r),un(n,"onChange");break;case"textarea":_e(r,l),Ht("invalid",r),un(n,"onChange")}for(var u in on(i,l),e=null,l)if(l.hasOwnProperty(u)){var s=l[u];"children"===u?"string"==typeof s?r.textContent!==s&&(e=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(e=["children",""+s]):E.hasOwnProperty(u)&&null!=s&&un(n,u)}switch(i){case"input":we(r),Te(r,l,!0);break;case"textarea":we(r),Ne(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=sn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===ln&&(e=Ie(i)),e===ln?"script"===i?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(i,{is:r.is}):(e=u.createElement(i),"select"===i&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,i),e[En]=t,e[Sn]=r,Fa(e,t),t.stateNode=e,u=an(i,r),i){case"iframe":case"object":case"embed":Ht("load",e),s=r;break;case"video":case"audio":for(s=0;s<Xe.length;s++)Ht(Xe[s],e);s=r;break;case"source":Ht("error",e),s=r;break;case"img":case"image":case"link":Ht("error",e),Ht("load",e),s=r;break;case"form":Ht("reset",e),Ht("submit",e),s=r;break;case"details":Ht("toggle",e),s=r;break;case"input":Ce(e,r),s=ke(e,r),Ht("invalid",e),un(n,"onChange");break;case"option":s=Oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},s=o({},r,{value:void 0}),Ht("invalid",e),un(n,"onChange");break;case"textarea":_e(e,r),s=ze(e,r),Ht("invalid",e),un(n,"onChange");break;default:s=r}on(i,s);var c=s;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?nn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&Be(e,f):"children"===l?"string"==typeof f?("textarea"!==i||""!==f)&&Fe(e,f):"number"==typeof f&&Fe(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?null!=f&&un(n,l):null!=f&&Z(e,l,f,u))}switch(i){case"input":we(e),Te(e,r,!1);break;case"textarea":we(e),Ne(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ye(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Ae(e,!!r.multiple,n,!1):null!=r.defaultValue&&Ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=sn)}vn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)qa(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=_i(zi.current),_i(Oi.current),Pa(t)?(n=t.stateNode,r=t.memoizedProps,n[En]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[En]=t,t.stateNode=n)}return null;case 13:return uo(Ii),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Pa(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=i,i.nextEffect=l):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ii.current)?Pl===wl&&(Pl=xl):(Pl!==wl&&Pl!==xl||(Pl=kl),0!==Rl&&null!==El&&(Nu(El,Tl),ju(El,Rl)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ni(),null;case 10:return ti(t),null;case 17:return go(t.type)&&vo(),null;case 19:if(uo(Ii),null===(r=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(l=r.rendering)){if(i)Ya(r,!1);else if(Pl!==wl||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Li(l))){for(t.effectTag|=64,Ya(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=l,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,l=e.dependencies,i.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return so(Ii,1&Ii.current|2),t.child}l=l.sibling}}else{if(!i)if(null!==(e=Li(l))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ya(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,Ya(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Fo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fo(),n.sibling=null,t=Ii.current,so(Ii,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Za(e){switch(e.tag){case 1:go(e.type)&&vo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ni(),uo(po),uo(fo),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Mi(e),null;case 13:return uo(Ii),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return uo(Ii),null;case 4:return Ni(),null;case 10:return ti(e),null;default:return null}}function Ga(e,t){return{value:e,source:t,stack:ve(t)}}Fa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ua=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var l,u,s=t.stateNode;switch(_i(Oi.current),e=null,n){case"input":a=ke(s,a),r=ke(s,r),e=[];break;case"option":a=Oe(s,a),r=Oe(s,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=ze(s,a),r=ze(s,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(s.onclick=sn)}for(l in on(n,r),n=null,a)if(!r.hasOwnProperty(l)&&a.hasOwnProperty(l)&&null!=a[l])if("style"===l)for(u in s=a[l])s.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var c=r[l];if(s=null!=a?a[l]:void 0,r.hasOwnProperty(l)&&c!==s&&(null!=c||null!=s))if("style"===l)if(s){for(u in s)!s.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in c)c.hasOwnProperty(u)&&s[u]!==c[u]&&(n||(n={}),n[u]=c[u])}else n||(e||(e=[]),e.push(l,n)),n=c;else"dangerouslySetInnerHTML"===l?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(e=e||[]).push(l,c)):"children"===l?s===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(l,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(E.hasOwnProperty(l)?(null!=c&&un(i,l),e||s===c||(e=[])):(e=e||[]).push(l,c))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},qa=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Ja="function"==typeof WeakSet?WeakSet:Set;function el(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ve(n)),null!==n&&ge(n.type),t=t.value,null!==e&&1===e.tag&&ge(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){yu(e,t)}else t.current=null}function nl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void ol(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&vn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&It(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function al(e,t,n){switch("function"==typeof ku&&ku(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;$o(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){yu(o,e)}}e=e.next}while(e!==r)}))}break;case 1:tl(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){yu(e,t)}}(t,n);break;case 5:tl(t);break;case 4:cl(e,t,n)}}function ll(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ll(t)}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:{for(var t=e.return;null!==t;){if(ul(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Fe(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ul(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=sn));else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var o=t.tag,i=5===o||6===o;if(i)t=i?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==o&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function cl(e,t,n){for(var r,o,i=t,l=!1;;){if(!l){l=i.return;e:for(;;){if(null===l)throw Error(a(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===i.tag||6===i.tag){e:for(var u=e,s=i,c=n,f=s;;)if(al(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break e;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(u=r,s=i.stateNode,8===u.nodeType?u.parentNode.removeChild(s):u.removeChild(s)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(al(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(l=!1)}i.sibling.return=i.return,i=i.sibling}}function fl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rl(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Sn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ee(n,r),an(e,o),t=an(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?nn(n,u):"dangerouslySetInnerHTML"===l?Be(n,u):"children"===l?Fe(n,u):Z(n,l,u,t)}switch(e){case"input":Se(n,r);break;case"textarea":Re(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ae(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ae(n,!!r.multiple,r.defaultValue,!0):Ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,It(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,jl=Fo()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=tn("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void dl(t);case 19:return void dl(t);case 17:return}throw Error(a(163))}function dl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ja),t.forEach((function(t){var r=wu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function ml(e,t,n){(n=ui(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Il||(Il=!0,Ll=r),el(e,t)},n}function hl(e,t,n){(n=ui(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return el(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Dl?Dl=new Set([this]):Dl.add(this),el(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var gl,vl=Math.ceil,yl=X.ReactCurrentDispatcher,bl=X.ReactCurrentOwner,wl=0,xl=3,kl=4,Cl=0,El=null,Sl=null,Tl=0,Pl=wl,Ol=null,Al=1073741823,zl=1073741823,_l=null,Rl=0,Nl=!1,jl=0,Ml=null,Il=!1,Ll=null,Dl=null,Bl=!1,Fl=null,Ul=90,ql=null,$l=0,Ql=null,Wl=0;function Vl(){return 0!=(48&Cl)?1073741821-(Fo()/10|0):0!==Wl?Wl:Wl=1073741821-(Fo()/10|0)}function Hl(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Uo();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Cl))return Tl;if(null!==n)e=Ko(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Ko(e,150,100);break;case 97:case 96:e=Ko(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==El&&e===Tl&&--e,e}function Kl(e,t){if(50<$l)throw $l=0,Ql=null,Error(a(185));if(null!==(e=Yl(e,t))){var n=Uo();1073741823===t?0!=(8&Cl)&&0==(48&Cl)?Jl(e):(Zl(e),0===Cl&&Vo()):Zl(e),0==(4&Cl)||98!==n&&99!==n||(null===ql?ql=new Map([[e,t]]):(void 0===(n=ql.get(e))||n>t)&&ql.set(e,t))}}function Yl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(El===o&&(au(t),Pl===kl&&Nu(o,Tl)),ju(o,t)),o}function Xl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Ru(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Zl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Wo(Jl.bind(null,e));else{var t=Xl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Vl();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==No&&Eo(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Wo(Jl.bind(null,e)):Qo(r,Gl.bind(null,e),{timeout:10*(1073741821-t)-Fo()}),e.callbackNode=t}}}function Gl(e,t){if(Wl=0,t)return Mu(e,t=Vl()),Zl(e),null;var n=Xl(e);if(0!==n){if(t=e.callbackNode,0!=(48&Cl))throw Error(a(327));if(hu(),e===El&&n===Tl||nu(e,n),null!==Sl){var r=Cl;Cl|=16;for(var o=ou();;)try{uu();break}catch(t){ru(e,t)}if(ei(),Cl=r,yl.current=o,1===Pl)throw t=Ol,nu(e,n),Nu(e,n),Zl(e),t;if(null===Sl)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Pl,El=null,r){case wl:case 1:throw Error(a(345));case 2:Mu(e,2<n?2:n);break;case xl:if(Nu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),1073741823===Al&&10<(o=jl+500-Fo())){if(Nl){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(i=Xl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(du.bind(null,e),o);break}du(e);break;case kl:if(Nu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fu(o)),Nl&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(o=Xl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==zl?r=10*(1073741821-zl)-Fo():1073741823===Al?r=0:(r=10*(1073741821-Al)-5e3,0>(r=(o=Fo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*vl(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(du.bind(null,e),r);break}du(e);break;case 5:if(1073741823!==Al&&null!==_l){i=Al;var l=_l;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(i=Fo()-(10*(1073741821-i)-(0|l.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Nu(e,n),e.timeoutHandle=bn(du.bind(null,e),r);break}}du(e);break;default:throw Error(a(329))}if(Zl(e),e.callbackNode===t)return Gl.bind(null,e)}}return null}function Jl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Cl))throw Error(a(327));if(hu(),e===El&&t===Tl||nu(e,t),null!==Sl){var n=Cl;Cl|=16;for(var r=ou();;)try{lu();break}catch(t){ru(e,t)}if(ei(),Cl=n,yl.current=r,1===Pl)throw n=Ol,nu(e,t),Nu(e,t),Zl(e),n;if(null!==Sl)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,El=null,du(e),Zl(e)}return null}function eu(e,t){var n=Cl;Cl|=1;try{return e(t)}finally{0===(Cl=n)&&Vo()}}function tu(e,t){var n=Cl;Cl&=-2,Cl|=8;try{return e(t)}finally{0===(Cl=n)&&Vo()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Sl)for(n=Sl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:Ni(),uo(po),uo(fo);break;case 5:Mi(r);break;case 4:Ni();break;case 13:case 19:uo(Ii);break;case 10:ti(r)}n=n.return}El=e,Sl=Tu(e.current,null),Tl=t,Pl=wl,Ol=null,zl=Al=1073741823,_l=null,Rl=0,Nl=!1}function ru(e,t){for(;;){try{if(ei(),Bi.current=ga,Wi)for(var n=qi.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Ui=0,Qi=$i=qi=null,Wi=!1,null===Sl||null===Sl.return)return Pl=1,Ol=t,Sl=null;e:{var o=e,i=Sl.return,a=Sl,l=t;if(t=Tl,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&a.mode)){var s=a.alternate;s?(a.updateQueue=s.updateQueue,a.memoizedState=s.memoizedState,a.expirationTime=s.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var c=0!=(1&Ii.current),f=i;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var m=f.memoizedProps;d=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!c)}}if(d){var h=f.updateQueue;if(null===h){var g=new Set;g.add(u),f.updateQueue=g}else h.add(u);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var v=ui(1073741823,null);v.tag=2,si(a,v)}a.expirationTime=1073741823;break e}l=void 0,a=t;var y=o.pingCache;if(null===y?(y=o.pingCache=new pl,l=new Set,y.set(u,l)):void 0===(l=y.get(u))&&(l=new Set,y.set(u,l)),!l.has(a)){l.add(a);var b=bu.bind(null,o,u,a);u.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ge(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(a))}5!==Pl&&(Pl=2),l=Ga(l,a),f=i;do{switch(f.tag){case 3:u=l,f.effectTag|=4096,f.expirationTime=t,ci(f,ml(f,u,t));break e;case 1:u=l;var w=f.type,x=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Dl||!Dl.has(x)))){f.effectTag|=4096,f.expirationTime=t,ci(f,hl(f,u,t));break e}}f=f.return}while(null!==f)}Sl=cu(Sl)}catch(e){t=e;continue}break}}function ou(){var e=yl.current;return yl.current=ga,null===e?ga:e}function iu(e,t){e<Al&&2<e&&(Al=e),null!==t&&e<zl&&2<e&&(zl=e,_l=t)}function au(e){e>Rl&&(Rl=e)}function lu(){for(;null!==Sl;)Sl=su(Sl)}function uu(){for(;null!==Sl&&!jo();)Sl=su(Sl)}function su(e){var t=gl(e.alternate,e,Tl);return e.memoizedProps=e.pendingProps,null===t&&(t=cu(e)),bl.current=null,t}function cu(e){Sl=e;do{var t=Sl.alternate;if(e=Sl.return,0==(2048&Sl.effectTag)){if(t=Xa(t,Sl,Tl),1===Tl||1!==Sl.childExpirationTime){for(var n=0,r=Sl.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Sl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Sl.firstEffect),null!==Sl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Sl.firstEffect),e.lastEffect=Sl.lastEffect),1<Sl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Sl:e.firstEffect=Sl,e.lastEffect=Sl))}else{if(null!==(t=Za(Sl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Sl.sibling))return t;Sl=e}while(null!==Sl);return Pl===wl&&(Pl=5),null}function fu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function du(e){var t=Uo();return $o(99,pu.bind(null,e,t)),null}function pu(e,t){do{hu()}while(null!==Fl);if(0!=(48&Cl))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=fu(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===El&&(Sl=El=null,Tl=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Cl;Cl|=32,bl.current=null,hn=Vt;var l=pn();if(mn(l)){if("selectionStart"in l)var u={start:l.selectionStart,end:l.selectionEnd};else e:{var s=(u=(u=l.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(s&&0!==s.rangeCount){u=s.anchorNode;var c=s.anchorOffset,f=s.focusNode;s=s.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var d=0,p=-1,m=-1,h=0,g=0,v=l,y=null;t:for(;;){for(var b;v!==u||0!==c&&3!==v.nodeType||(p=d+c),v!==f||0!==s&&3!==v.nodeType||(m=d+s),3===v.nodeType&&(d+=v.nodeValue.length),null!==(b=v.firstChild);)y=v,v=b;for(;;){if(v===l)break t;if(y===u&&++h===c&&(p=d),y===f&&++g===s&&(m=d),null!==(b=v.nextSibling))break;y=(v=y).parentNode}v=b}u=-1===p||-1===m?null:{start:p,end:m}}else u=null}u=u||{start:0,end:0}}else u=null;gn={activeElementDetached:null,focusedElem:l,selectionRange:u},Vt=!1,Ml=o;do{try{mu()}catch(e){if(null===Ml)throw Error(a(330));yu(Ml,e),Ml=Ml.nextEffect}}while(null!==Ml);Ml=o;do{try{for(l=e,u=t;null!==Ml;){var w=Ml.effectTag;if(16&w&&Fe(Ml.stateNode,""),128&w){var x=Ml.alternate;if(null!==x){var k=x.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&w){case 2:sl(Ml),Ml.effectTag&=-3;break;case 6:sl(Ml),Ml.effectTag&=-3,fl(Ml.alternate,Ml);break;case 1024:Ml.effectTag&=-1025;break;case 1028:Ml.effectTag&=-1025,fl(Ml.alternate,Ml);break;case 4:fl(Ml.alternate,Ml);break;case 8:cl(l,c=Ml,u),ll(c)}Ml=Ml.nextEffect}}catch(e){if(null===Ml)throw Error(a(330));yu(Ml,e),Ml=Ml.nextEffect}}while(null!==Ml);if(k=gn,x=pn(),w=k.focusedElem,u=k.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==u&&mn(w)&&(x=u.start,void 0===(k=u.end)&&(k=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(k,w.value.length)):(k=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(k=k.getSelection(),c=w.textContent.length,l=Math.min(u.start,c),u=void 0===u.end?l:Math.min(u.end,c),!k.extend&&l>u&&(c=u,u=l,l=c),c=dn(w,l),f=dn(w,u),c&&f&&(1!==k.rangeCount||k.anchorNode!==c.node||k.anchorOffset!==c.offset||k.focusNode!==f.node||k.focusOffset!==f.offset)&&((x=x.createRange()).setStart(c.node,c.offset),k.removeAllRanges(),l>u?(k.addRange(x),k.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),k.addRange(x))))),x=[];for(k=w;k=k.parentNode;)1===k.nodeType&&x.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(k=x[w]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Vt=!!hn,gn=hn=null,e.current=n,Ml=o;do{try{for(w=e;null!==Ml;){var C=Ml.effectTag;if(36&C&&il(w,Ml.alternate,Ml),128&C){x=void 0;var E=Ml.ref;if(null!==E){var S=Ml.stateNode;switch(Ml.tag){case 5:x=S;break;default:x=S}"function"==typeof E?E(x):E.current=x}}Ml=Ml.nextEffect}}catch(e){if(null===Ml)throw Error(a(330));yu(Ml,e),Ml=Ml.nextEffect}}while(null!==Ml);Ml=null,Mo(),Cl=i}else e.current=n;if(Bl)Bl=!1,Fl=e,Ul=t;else for(Ml=o;null!==Ml;)t=Ml.nextEffect,Ml.nextEffect=null,Ml=t;if(0===(t=e.firstPendingTime)&&(Dl=null),1073741823===t?e===Ql?$l++:($l=0,Ql=e):$l=0,"function"==typeof xu&&xu(n.stateNode,r),Zl(e),Il)throw Il=!1,e=Ll,Ll=null,e;return 0!=(8&Cl)||Vo(),null}function mu(){for(;null!==Ml;){var e=Ml.effectTag;0!=(256&e)&&nl(Ml.alternate,Ml),0==(512&e)||Bl||(Bl=!0,Qo(97,(function(){return hu(),null}))),Ml=Ml.nextEffect}}function hu(){if(90!==Ul){var e=97<Ul?97:Ul;return Ul=90,$o(e,gu)}}function gu(){if(null===Fl)return!1;var e=Fl;if(Fl=null,0!=(48&Cl))throw Error(a(331));var t=Cl;for(Cl|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rl(5,n),ol(5,n)}}catch(t){if(null===e)throw Error(a(330));yu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Cl=t,Vo(),!0}function vu(e,t,n){si(e,t=ml(e,t=Ga(n,t),1073741823)),null!==(e=Yl(e,1073741823))&&Zl(e)}function yu(e,t){if(3===e.tag)vu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){vu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Dl||!Dl.has(r))){si(n,e=hl(n,e=Ga(t,e),1073741823)),null!==(n=Yl(n,1073741823))&&Zl(n);break}}n=n.return}}function bu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),El===e&&Tl===n?Pl===kl||Pl===xl&&1073741823===Al&&Fo()-jl<500?nu(e,Tl):Nl=!0:Ru(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Zl(e)))}function wu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Hl(t=Vl(),e,null)),null!==(e=Yl(e,t))&&Zl(e)}gl=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||po.current)za=!0;else{if(r<n){switch(za=!1,t.tag){case 3:Ba(t),Oa();break;case 5:if(ji(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:go(t.type)&&wo(t);break;case 4:Ri(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,so(Xo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Qa(e,t,n):(so(Ii,1&Ii.current),null!==(t=Ka(e,t,n))?t.sibling:null);so(Ii,1&Ii.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Ha(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),so(Ii,Ii.current),!r)return null}return Ka(e,t,n)}za=!1}}else za=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=ho(t,fo.current),ri(t,n),o=Ki(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(r)){var i=!0;wo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&hi(t,r,l,e),o.updater=gi,t.stateNode=o,o._reactInternalFiber=t,wi(t,r,e,n),t=Da(null,t,r,!0,i,n)}else t.tag=0,_a(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Su(e)?1:0;if(null!=e){if((e=e.$$typeof)===ue)return 11;if(e===fe)return 14}return 2}(o),e=Yo(o,e),i){case 0:t=Ia(null,t,o,e,n);break e;case 1:t=La(null,t,o,e,n);break e;case 11:t=Ra(null,t,o,e,n);break e;case 14:t=Na(null,t,o,Yo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ia(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,La(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Ba(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,li(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)Oa(),t=Ka(e,t,n);else{if((o=t.stateNode.hydrate)&&(xa=xn(t.stateNode.containerInfo.firstChild),wa=t,o=ka=!0),o)for(n=Ti(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else _a(e,t,r,n),Oa();t=t.child}return t;case 5:return ji(t),null===e&&Sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,yn(r,o)?l=null:null!==i&&yn(r,i)&&(t.effectTag|=16),Ma(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(_a(e,t,l,n),t=t.child),t;case 6:return null===e&&Sa(t),null;case 13:return Qa(e,t,n);case 4:return Ri(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):_a(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Ra(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return _a(e,t,t.pendingProps,n),t.child;case 8:case 12:return _a(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(so(Xo,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0===(i=Lr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!po.current){t=Ka(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=ui(n,null)).tag=2,si(u,c)),u.expirationTime<n&&(u.expirationTime=n),null!==(c=u.alternate)&&c.expirationTime<n&&(c.expirationTime=n),ni(u.return,n),s.expirationTime<n&&(s.expirationTime=n);break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}_a(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.effectTag|=1,_a(e,t,r,n),t.child;case 14:return i=Yo(o=t.type,t.pendingProps),Na(e,t,o,i=Yo(o.type,i),r,n);case 15:return ja(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,go(r)?(e=!0,wo(t)):e=!1,ri(t,n),yi(t,r,o),wi(t,r,o,n),Da(null,t,r,!0,e,n);case 19:return Ha(e,t,n)}throw Error(a(156,t.tag))};var xu=null,ku=null;function Cu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Eu(e,t,n,r){return new Cu(e,t,n,r)}function Su(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tu(e,t){var n=e.alternate;return null===n?((n=Eu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Pu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Su(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Ou(n.children,o,i,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Eu(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case se:return(e=Eu(13,n,t,o)).type=se,e.elementType=se,e.expirationTime=i,e;case ce:return(e=Eu(19,n,t,o)).elementType=ce,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:l=10;break e;case ae:l=9;break e;case ue:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case pe:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Eu(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Ou(e,t,n,r){return(e=Eu(7,e,r,t)).expirationTime=n,e}function Au(e,t,n){return(e=Eu(6,e,null,t)).expirationTime=n,e}function zu(e,t,n){return(t=Eu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function _u(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Ru(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Nu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function ju(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Mu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Iu(e,t,n,r){var o=t.current,i=Vl(),l=pi.suspense;i=Hl(i,o,l);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(go(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var s=n.type;if(go(s)){n=bo(n,s,u);break e}}n=u}else n=co;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),si(o,t),Kl(o,i),i}function Lu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Du(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Bu(e,t){Du(e,t),(e=e.alternate)&&Du(e,t)}function Fu(e,t,n){var r=new _u(e,t,n=null!=n&&!0===n.hydrate),o=Eu(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ai(o),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Ge(t);Tt.forEach((function(e){mt(e,t,n)})),Pt.forEach((function(e){mt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Uu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function qu(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Lu(a);l.call(e)}}Iu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Fu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Lu(a);u.call(e)}}tu((function(){Iu(t,a,e,o)}))}return Lu(a)}function $u(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Qu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Uu(t))throw Error(a(200));return $u(e,t,null,n)}Fu.prototype.render=function(e){Iu(e,this._internalRoot,null,null)},Fu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Iu(null,e,null,(function(){t[Tn]=null}))},ht=function(e){if(13===e.tag){var t=Ko(Vl(),150,100);Kl(e,t),Bu(e,t)}},gt=function(e){13===e.tag&&(Kl(e,3),Bu(e,3))},vt=function(e){if(13===e.tag){var t=Vl();Kl(e,t=Hl(t,e,null)),Bu(e,t)}},O=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=zn(r);if(!o)throw Error(a(90));xe(r),Se(r,o)}}}break;case"textarea":Re(e,n);break;case"select":null!=(t=n.value)&&Ae(e,!!n.multiple,t,!1)}},j=eu,M=function(e,t,n,r,o){var i=Cl;Cl|=4;try{return $o(98,e.bind(null,t,n,r,o))}finally{0===(Cl=i)&&Vo()}},I=function(){0==(49&Cl)&&(function(){if(null!==ql){var e=ql;ql=null,e.forEach((function(e,t){Mu(t,e),Zl(t)})),Vo()}}(),hu())},L=function(e,t){var n=Cl;Cl|=2;try{return e(t)}finally{0===(Cl=n)&&Vo()}};var Wu,Vu,Hu={Events:[On,An,zn,T,C,Ln,function(e){ot(e,In)},R,N,Zt,lt,hu,{current:!1}]};Vu=(Wu={findFiberByHostInstance:Pn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},ku=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},Wu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:X.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Vu?Vu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Hu,t.createPortal=Qu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Cl))throw Error(a(187));var n=Cl;Cl|=1;try{return $o(99,e.bind(null,t))}finally{Cl=n,Vo()}},t.hydrate=function(e,t,n){if(!Uu(t))throw Error(a(200));return qu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Uu(t))throw Error(a(200));return qu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Uu(e))throw Error(a(40));return!!e._reactRootContainer&&(tu((function(){qu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Qu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Uu(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return qu(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(31)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,o,i,a,l;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,s=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(c,0))},o=function(e,t){s=setTimeout(e,t)},i=function(){clearTimeout(s)},a=function(){return!1},l=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,m=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var g=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var v=p.now();t.unstable_now=function(){return p.now()-v}}var y=!1,b=null,w=-1,x=5,k=0;a=function(){return t.unstable_now()>=k},l=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var C=new MessageChannel,E=C.port2;C.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();k=e+x;try{b(!0,e)?E.postMessage(null):(y=!1,b=null)}catch(e){throw E.postMessage(null),e}}else y=!1},r=function(e){b=e,y||(y=!0,E.postMessage(null))},o=function(e,n){w=m((function(){e(t.unstable_now())}),n)},i=function(){h(w),w=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<O(o,t)))break e;e[r]=t,e[n]=o,n=r}}function T(e){return void 0===(e=e[0])?null:e}function P(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>O(a,n))void 0!==u&&0>O(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>O(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function O(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var A=[],z=[],_=1,R=null,N=3,j=!1,M=!1,I=!1;function L(e){for(var t=T(z);null!==t;){if(null===t.callback)P(z);else{if(!(t.startTime<=e))break;P(z),t.sortIndex=t.expirationTime,S(A,t)}t=T(z)}}function D(e){if(I=!1,L(e),!M)if(null!==T(A))M=!0,r(B);else{var t=T(z);null!==t&&o(D,t.startTime-e)}}function B(e,n){M=!1,I&&(I=!1,i()),j=!0;var r=N;try{for(L(n),R=T(A);null!==R&&(!(R.expirationTime>n)||e&&!a());){var l=R.callback;if(null!==l){R.callback=null,N=R.priorityLevel;var u=l(R.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?R.callback=u:R===T(A)&&P(A),L(n)}else P(A);R=T(A)}if(null!==R)var s=!0;else{var c=T(z);null!==c&&o(D,c.startTime-n),s=!1}return s}finally{R=null,N=r,j=!1}}function F(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var U=l;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||j||(M=!0,r(B))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return T(A)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=U,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,n,a){var l=t.unstable_now();if("object"==typeof a&&null!==a){var u=a.delay;u="number"==typeof u&&0<u?l+u:l,a="number"==typeof a.timeout?a.timeout:F(e)}else a=F(e),u=l;return e={id:_++,callback:n,priorityLevel:e,startTime:u,expirationTime:a=u+a,sortIndex:-1},u>l?(e.sortIndex=u,S(z,e),null===T(A)&&e===T(z)&&(I?i():I=!0,o(D,u-l))):(e.sortIndex=a,S(A,e),M||j||(M=!0,r(B))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();L(e);var n=T(A);return n!==R&&null!==R&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<R.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},function(e,t,n){"use strict";var r=n(33);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,l=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,s=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,g=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case d:case a:case u:case l:case m:return e;default:switch(e=e&&e.$$typeof){case c:case p:case v:case g:case s:return e;default:return t}}case i:return t}}}function C(e){return k(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=s,t.Element=o,t.ForwardRef=p,t.Fragment=a,t.Lazy=v,t.Memo=g,t.Portal=i,t.Profiler=u,t.StrictMode=l,t.Suspense=m,t.isAsyncMode=function(e){return C(e)||k(e)===f},t.isConcurrentMode=C,t.isContextConsumer=function(e){return k(e)===c},t.isContextProvider=function(e){return k(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return k(e)===p},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===v},t.isMemo=function(e){return k(e)===g},t.isPortal=function(e){return k(e)===i},t.isProfiler=function(e){return k(e)===u},t.isStrictMode=function(e){return k(e)===l},t.isSuspense=function(e){return k(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===u||e===l||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===g||e.$$typeof===s||e.$$typeof===c||e.$$typeof===p||e.$$typeof===b||e.$$typeof===w||e.$$typeof===x||e.$$typeof===y)},t.typeOf=k},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var r=n(1),o=n(15),i=n(37),a=n(21);function l(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var u=l(n(18));u.Axios=i,u.create=function(e){return l(a(u.defaults,e))},u.Cancel=n(22),u.CancelToken=n(51),u.isCancel=n(17),u.all=function(e){return Promise.all(e)},u.spread=n(52),e.exports=u,e.exports.default=u},function(e,t,n){"use strict";var r=n(1),o=n(16),i=n(38),a=n(39),l=n(21);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=l(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},u.prototype.getUri=function(e){return e=l(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(l(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(l(r||{},{method:e,url:t,data:n}))}})),e.exports=u},function(e,t,n){"use strict";var r=n(1);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(1),o=n(40),i=n(17),a=n(18);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,s=[],c=!1,f=-1;function d(){c&&u&&(c=!1,u.length?s=u.concat(s):f=-1,s.length&&p())}function p(){if(!c){var e=l(d);c=!0;for(var t=s.length;t;){for(u=s,s=[];++f<t;)u&&u[f].run();f=-1,t=s.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function m(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new m(e,t)),1!==s.length||c||l(p)},m.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(1);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(20);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(1);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var l=[];l.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),r.isString(o)&&l.push("path="+o),r.isString(i)&&l.push("domain="+i),!0===a&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(47),o=n(48);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(1),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(1);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(22);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){var r=n(54),o=n(55);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);e.exports=o.locals||{}},function(e,t,n){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function l(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],u=t.base?i[0]+t.base:i[0],s=n[u]||0,c="".concat(u," ").concat(s);n[u]=s+1;var f=l(c),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:c,updater:g(d,t),references:1}),r.push(c)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function g(e,t){var n,r,o;if(t.singleton){var i=h++;n=m||(m=s(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=s(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=l(n[r]);a[o].references--}for(var i=u(e,t),s=0;s<n.length;s++){var c=l(n[s]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=i}}}},function(e,t,n){"use strict";n.r(t);var r=n(24),o=n.n(r),i=n(25),a=n.n(i),l=n(26),u=o()(!0),s=a()(l.a);u.push([e.i,'@font-face {\n  font-family: "NotoSansKR-Medium";\n  src: local(※), url('+s+') format("opentype");\n}\n\n* {\n  font-family: "NotoSansKR-Medium";\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  background: linear-gradient(90deg,#111d2a,#295582 );\n  height: 100vh;\n}\n',"",{version:3,sources:["reset.css"],names:[],mappings:"AAAA;EACE,gCAAgC;EAChC,yEAA8D;AAChE;;AAEA;EACE,gCAAgC;EAChC,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,mDAAmD;EACnD,aAAa;AACf",file:"reset.css",sourcesContent:['@font-face {\n  font-family: "NotoSansKR-Medium";\n  src: local(※), url("NotoSansKR-Medium.otf") format("opentype");\n}\n\n* {\n  font-family: "NotoSansKR-Medium";\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  background: linear-gradient(90deg,#111d2a,#295582 );\n  height: 100vh;\n}\n']}]),t.default=u},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(6),a=n.n(i),l=(n(4),o.a.createContext(null));var u=function(e){e()},s={notify:function(){}};function c(){var e=u,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}var f=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=s,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=c())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=s)},e}();var d=function(e){var t=e.store,n=e.context,i=e.children,a=Object(r.useMemo)((function(){var e=new f(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),u=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=a.subscription;return e.trySubscribe(),u!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,u]);var s=n||l;return o.a.createElement(s.Provider,{value:a},i)};function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function m(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n(5),n(7);var h="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;var g=n(9),v=function(){return Math.random().toString(36).substring(7).split("").join(".")},y={INIT:"@@redux/INIT"+v(),REPLACE:"@@redux/REPLACE"+v(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+v()}};function b(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function w(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(w)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,a=[],l=a,u=!1;function s(){l===a&&(l=a.slice())}function c(){if(u)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function f(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(u)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return s(),l.push(e),function(){if(t){if(u)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,s();var n=l.indexOf(e);l.splice(n,1),a=null}}}function d(e){if(!b(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(u)throw new Error("Reducers may not dispatch actions.");try{u=!0,i=o(i,e)}finally{u=!1}for(var t=a=l,n=0;n<t.length;n++){(0,t[n])()}return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,d({type:y.REPLACE})}function m(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[g.a]=function(){return this},e}return d({type:y.INIT}),(r={dispatch:d,subscribe:f,getState:c,replaceReducer:p})[g.a]=m,r}function x(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function k(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:y.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:y.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+y.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},l=0;l<a.length;l++){var u=a[l],s=n[u],c=e[u],f=s(c,t);if(void 0===f){var d=x(u,t);throw new Error(d)}o[u]=f,r=r||f!==c}return(r=r||a.length!==Object.keys(e).length)?o:e}}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function E(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function S(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?E(n,!0).forEach((function(t){C(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):E(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function T(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function P(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return S({},n,{dispatch:r=T.apply(void 0,i)(n.dispatch)})}}}function O(){return Object(r.useContext)(l)}function A(e){void 0===e&&(e=l);var t=e===l?O:function(){return Object(r.useContext)(e)};return function(){return t().store}}var z=A();function _(e){void 0===e&&(e=l);var t=e===l?z:A(e);return function(){return t().dispatch}}var R=_(),N=function(e,t){return e===t};function j(e){void 0===e&&(e=l);var t=e===l?O:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=N);var o=t(),i=function(e,t,n,o){var i,a=Object(r.useReducer)((function(e){return e+1}),0)[1],l=Object(r.useMemo)((function(){return new f(n,o)}),[n,o]),u=Object(r.useRef)(),s=Object(r.useRef)(),c=Object(r.useRef)(),d=Object(r.useRef)(),p=n.getState();try{i=e!==s.current||p!==c.current||u.current?e(p):d.current}catch(e){throw u.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+u.current.stack+"\n\n"),e}return h((function(){s.current=e,c.current=p,d.current=i,u.current=void 0})),h((function(){function e(){try{var e=s.current(n.getState());if(t(e,d.current))return;d.current=e}catch(e){u.current=e}a()}return l.onStateChange=e,l.trySubscribe(),e(),function(){return l.tryUnsubscribe()}}),[n,l]),i}(e,n,o.store,o.subscription);return Object(r.useDebugValue)(i),i}}var M,I=j();function L(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function D(e){return!!e&&!!e[Pe]}function B(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[Te]||!!e.constructor[Te]||V(e)||H(e))}function F(e,t,n){void 0===n&&(n=!1),0===U(e)?(n?Object.keys:Oe)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function U(e){var t=e[Pe];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:V(e)?2:H(e)?3:0}function q(e,t){return 2===U(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function $(e,t){return 2===U(e)?e.get(t):e[t]}function Q(e,t,n){var r=U(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function W(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function V(e){return ke&&e instanceof Map}function H(e){return Ce&&e instanceof Set}function K(e){return e.o||e.t}function Y(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Ae(e);delete t[Pe];for(var n=Oe(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function X(e,t){G(e)||D(e)||!B(e)||(U(e)>1&&(e.set=e.add=e.clear=e.delete=Z),Object.freeze(e),t&&F(e,(function(e,t){return X(t,!0)}),!0))}function Z(){L(2)}function G(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function J(e){var t=ze[e];return t||L(19,e),t}function ee(e,t){ze[e]=t}function te(){return we}function ne(e,t){t&&(J("Patches"),e.u=[],e.s=[],e.v=t)}function re(e){oe(e),e.p.forEach(ae),e.p=null}function oe(e){e===we&&(we=e.l)}function ie(e){return we={p:[],l:we,h:e,m:!0,_:0}}function ae(e){var t=e[Pe];0===t.i||1===t.i?t.j():t.g=!0}function le(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.O||J("ES5").S(t,e,r),r?(n[Pe].P&&(re(t),L(4)),B(e)&&(e=ue(t,e),t.l||ce(t,e)),t.u&&J("Patches").M(n[Pe],e,t.u,t.s)):e=ue(t,n,[]),re(t),t.u&&t.v(t.u,t.s),e!==Se?e:void 0}function ue(e,t,n){if(G(t))return t;var r=t[Pe];if(!r)return F(t,(function(o,i){return se(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return ce(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=Y(r.k):r.o;F(3===r.i?new Set(o):o,(function(t,i){return se(e,r,o,t,i,n)})),ce(e,o,!1),n&&e.u&&J("Patches").R(r,n,e.u,e.s)}return r.o}function se(e,t,n,r,o,i){if(D(o)){var a=ue(e,o,i&&t&&3!==t.i&&!q(t.D,r)?i.concat(r):void 0);if(Q(n,r,a),!D(a))return;e.m=!1}if(B(o)&&!G(o)){if(!e.h.N&&e._<1)return;ue(e,o),t&&t.A.l||ce(e,o)}}function ce(e,t,n){void 0===n&&(n=!1),e.h.N&&e.m&&X(t,n)}function fe(e,t){var n=e[Pe];return(n?K(n):e)[t]}function de(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function pe(e){e.P||(e.P=!0,e.l&&pe(e.l))}function me(e){e.o||(e.o=Y(e.t))}function he(e,t,n){var r=V(t)?J("MapSet").T(t,n):H(t)?J("MapSet").F(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:te(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=_e;n&&(o=[r],i=Re);var a=Proxy.revocable(o,i),l=a.revoke,u=a.proxy;return r.k=u,r.j=l,u}(t,n):J("ES5").J(t,n);return(n?n.A:te()).p.push(r),r}function ge(e){return D(e)||L(22,e),function e(t){if(!B(t))return t;var n,r=t[Pe],o=U(t);if(r){if(!r.P&&(r.i<4||!J("ES5").K(r)))return r.t;r.I=!0,n=ve(t,o),r.I=!1}else n=ve(t,o);return F(n,(function(t,o){r&&$(r.t,t)===o||Q(n,t,e(o))})),3===o?new Set(n):n}(e)}function ve(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return Y(e)}function ye(){function e(e,t){var n=o[e];return n?n.enumerable=t:o[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Pe];return _e.get(t,e)},set:function(t){var n=this[Pe];_e.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][Pe];if(!o.P)switch(o.i){case 5:r(o)&&pe(o);break;case 4:n(o)&&pe(o)}}}function n(e){for(var t=e.t,n=e.k,r=Oe(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==Pe){var a=t[i];if(void 0===a&&!q(t,i))return!0;var l=n[i],u=l&&l[Pe];if(u?u.t!==a:!W(l,a))return!0}}var s=!!t[Pe];return r.length!==Oe(t).length+(s?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var o={};ee("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=Ae(n);delete i[Pe];for(var a=Oe(i),l=0;l<a.length;l++){var u=a[l];i[u]=e(u,t||!!i[u].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:te(),P:!1,I:!1,D:{},l:n,t:t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,Pe,{value:i,writable:!0}),o},S:function(e,n,o){o?D(n)&&n[Pe].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Pe];if(n){var o=n.t,i=n.k,a=n.D,l=n.i;if(4===l)F(i,(function(t){t!==Pe&&(void 0!==o[t]||q(o,t)?a[t]||e(i[t]):(a[t]=!0,pe(n)))})),F(o,(function(e){void 0!==i[e]||q(i,e)||(a[e]=!1,pe(n))}));else if(5===l){if(r(n)&&(pe(n),a.length=!0),i.length<o.length)for(var u=i.length;u<o.length;u++)a[u]=!1;else for(var s=o.length;s<i.length;s++)a[s]=!0;for(var c=Math.min(i.length,o.length),f=0;f<c;f++)void 0===a[f]&&e(i[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}M=i.unstable_batchedUpdates,u=M;var be,we,xe="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),ke="undefined"!=typeof Map,Ce="undefined"!=typeof Set,Ee="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,Se=xe?Symbol.for("immer-nothing"):((be={})["immer-nothing"]=!0,be),Te=xe?Symbol.for("immer-draftable"):"__$immer_draftable",Pe=xe?Symbol.for("immer-state"):"__$immer_state",Oe=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),Ae=Object.getOwnPropertyDescriptors||function(e){var t={};return Oe(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},ze={},_e={get:function(e,t){if(t===Pe)return e;var n=K(e);if(!q(n,t))return function(e,t,n){var r,o=de(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!B(r)?r:r===fe(e.t,t)?(me(e),e.o[t]=he(e.A.h,r,e)):r},has:function(e,t){return t in K(e)},ownKeys:function(e){return Reflect.ownKeys(K(e))},set:function(e,t,n){var r=de(K(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(e.D[t]=!0,!e.P){if(W(n,fe(K(e),t))&&(void 0!==n||q(e.t,t)))return!0;me(e),pe(e)}return e.o[t]=n,!0},deleteProperty:function(e,t){return void 0!==fe(e.t,t)||t in e.t?(e.D[t]=!1,me(e),pe(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=K(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){L(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){L(12)}},Re={};F(_e,(function(e,t){Re[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Re.deleteProperty=function(e,t){return _e.deleteProperty.call(this,e[0],t)},Re.set=function(e,t,n){return _e.set.call(this,e[0],t,n,e[0])};var Ne=new(function(){function e(e){this.O=Ee,this.N=!1,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var t=e.prototype;return t.produce=function(e,t,n){if("function"==typeof e&&"function"!=typeof t){var r=t;t=e;var o=this;return function(e){var n=this;void 0===e&&(e=r);for(var i=arguments.length,a=Array(i>1?i-1:0),l=1;l<i;l++)a[l-1]=arguments[l];return o.produce(e,(function(e){var r;return(r=t).call.apply(r,[n,e].concat(a))}))}}var i;if("function"!=typeof t&&L(6),void 0!==n&&"function"!=typeof n&&L(7),B(e)){var a=ie(this),l=he(this,e,void 0),u=!0;try{i=t(l),u=!1}finally{u?re(a):oe(a)}return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return ne(a,n),le(e,a)}),(function(e){throw re(a),e})):(ne(a,n),le(i,a))}if(!e||"object"!=typeof e){if((i=t(e))===Se)return;return void 0===i&&(i=e),this.N&&X(i,!0),i}L(21,e)},t.produceWithPatches=function(e,t){var n,r,o=this;return"function"==typeof e?function(t){for(var n=arguments.length,r=Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(r))}))}:[this.produce(e,t,(function(e,t){n=e,r=t})),n,r]},t.createDraft=function(e){B(e)||L(8),D(e)&&(e=ge(e));var t=ie(this),n=he(this,e,void 0);return n[Pe].C=!0,oe(t),n},t.finishDraft=function(e,t){var n=(e&&e[Pe]).A;return ne(n,t),le(void 0,n)},t.setAutoFreeze=function(e){this.N=e},t.setUseProxies=function(e){e&&!Ee&&L(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var o=J("Patches").$;return D(e)?o(e,t):this.produce(e,(function(e){return o(e,t.slice(n+1))}))},e}()),je=Ne.produce,Me=(Ne.produceWithPatches.bind(Ne),Ne.setAutoFreeze.bind(Ne),Ne.setUseProxies.bind(Ne),Ne.applyPatches.bind(Ne),Ne.createDraft.bind(Ne),Ne.finishDraft.bind(Ne),je);function Ie(e,t){return e===t}function Le(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}function De(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}!function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r]}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ie,n=null,r=null;return function(){return Le(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}}));function Be(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var Fe=Be();Fe.withExtraArgument=Be;var Ue=Fe;function qe(){return(qe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function $e(e){return($e=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Qe(e,t){return(Qe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function We(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function Ve(e,t,n){return(Ve=We()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&Qe(o,n.prototype),o}).apply(null,arguments)}function He(e){var t="function"==typeof Map?new Map:void 0;return(He=function(e){if(null===e||!function(e){return-1!==Function.toString.call(e).indexOf("[native code]")}(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return Ve(e,arguments,$e(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),Qe(n,e)})(e)}var Ke="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?T:T.apply(null,arguments)};function Ye(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var Xe=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.concat=function(){for(var t,n=arguments.length,o=new Array(n),i=0;i<n;i++)o[i]=arguments[i];return Ve(r,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 1===t.length&&Array.isArray(t[0])?Ve(r,t[0].concat(this)):Ve(r,t.concat(this))},r}(He(Array));function Ze(){return function(e){return function(e){void 0===e&&(e={});var t=e,n=t.thunk,r=void 0===n||n,o=(t.immutableCheck,t.serializableCheck,new Xe);r&&(!function(e){return"boolean"==typeof e}(r)?o.push(Ue.withExtraArgument(r.extraArgument)):o.push(Ue));0;return o}(e)}}function Ge(e,t){function n(){if(t){var n=t.apply(void 0,arguments);if(!n)throw new Error("prepareAction did not return an object");return qe({type:e,payload:n.payload},"meta"in n&&{meta:n.meta},{},"error"in n&&{error:n.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Je(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));ye();var et=n(10),tt=n.n(et);const nt={async fail(e){await tt.a.fire({icon:"error",text:e})},async success(e){await tt.a.fire({icon:"success",text:e,timer:1e3})}},rt=e=>e.split("#").map(e=>e.trim()).filter(e=>e),ot={getCurrentDate(){const e=new Date;return`${e.getFullYear()}-${e.getMonth()+1}-${e.getDate()}`},getTotalDay(e){const[t,n,r]=e.split("-").map(e=>Number(e));return 12*t*30+30*n+r}},it={1:1,2:3,3:7,4:15,5:30,6:60,7:120};var at=e=>{const t=ot.getCurrentDate(),n=ot.getTotalDay(t);return e.filter(e=>{const{layer:t,lastSolved:r}=e,o=ot.getTotalDay(r),i=n-o;return[1,2,3,4,5,6,7].some(e=>t<=e&&i>=it[e])})},lt=n(3),ut=n.n(lt);const st="http://localhost:3000";const ct=()=>({headers:{Authorization:"Bearer "+localStorage.getItem("token")}});var ft={async login(e,t){try{const{data:n}=await ut.a.post(st+"/auth/login",{userId:e,userPw:t}),{token:r}=n;return r}catch(e){return null}},async getUserName(){try{const{data:e}=await ut.a.get(st+"/auth",ct()),{user:t}=e;return t}catch(e){return null}},async addQuiz(e,t,n){try{const r={question:e,answer:t,tags:n},{data:o}=await ut.a.post(st+"/quiz",r,ct()),{newQuiz:i}=o;return i}catch(e){return null}},async getQuizzes(){try{const{data:e}=await ut.a.get(st+"/quiz",ct()),{quizzes:t}=e;return t}catch(e){return[]}},async editQuiz(e,t,n,r){try{const o={quizId:e,question:t,answer:n,tags:r};return await ut.a.patch(st+"/quiz/edit",o,ct()),!0}catch(e){return!1}},async deleteQuiz(e){try{return await ut.a.delete(`${st}/quiz/${e}`,ct()),!0}catch(e){return!1}},async passQuiz(e){try{return await ut.a.patch(st+"/quiz/pass",{quizId:e},ct()),!0}catch(e){return!1}},async failQuiz(e){try{return await ut.a.patch(st+"/quiz/fail",{quizId:e},ct()),!0}catch(e){return!1}}};const{reducer:dt,actions:pt}=function(e){var t=e.name,n=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var r=e.reducers||{},o=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?Je(e.extraReducers):[e.extraReducers],i=o[0],a=void 0===i?{}:i,l=o[1],u=void 0===l?[]:l,s=o[2],c=void 0===s?void 0:s,f=Object.keys(r),d={},p={},m={};f.forEach((function(e){var n,o,i=r[e],a=function(e,t){return e+"/"+t}(t,e);"reducer"in i?(n=i.reducer,o=i.prepare):n=i,d[e]=n,p[a]=n,m[e]=o?Ge(a,o):Ge(a)}));var h=function(e,t,n,r){void 0===n&&(n=[]);var o="function"==typeof t?Je(t):[t,n,r],i=o[0],a=o[1],l=o[2];return function(t,n){void 0===t&&(t=e);var r=[i[n.type]].concat(a.filter((function(e){return(0,e.matcher)(n)})).map((function(e){return e.reducer})));return 0===r.filter((function(e){return!!e})).length&&(r=[l]),r.reduce((function(e,t){if(t){if(D(e)){var r=t(e,n);return void 0===r?e:r}if(B(e))return Me(e,(function(e){return t(e,n)}));var o=t(e,n);if(void 0===o)throw Error("A case reducer on a non-draftable value must not return undefined");return o}return e}),t)}}(n,qe({},a,{},p),u,c);return{name:t,reducer:h,actions:m,caseReducers:d}}({name:"self-quiz",initialState:{user:{name:""},login:{id:"",pw:""},token:localStorage.getItem("token"),quizzes:[],quizForm:{question:"",answer:"",tagString:""},modal:{overlay:!1,adding:!1,archive:{},editting:!1,todays:!1},todays:{answerOn:!1,quizzes:[]}},reducers:{setUserName:(e,{payload:t})=>({...e,user:{...e.user,name:t}}),setLoginId:(e,{payload:t})=>({...e,login:{...e.login,id:t}}),setLoginPw:(e,{payload:t})=>({...e,login:{...e.login,pw:t}}),setToken:(e,{payload:t})=>({...e,token:t}),setQuizzes:(e,{payload:t})=>({...e,quizzes:t}),addQuiz:(e,{payload:t})=>({...e,quizzes:[...e.quizzes,t]}),removeQuiz(e,{payload:t}){const n=e.quizzes.filter(e=>e._id!==t);return{...e,quizzes:n}},editQuiz(e,{payload:t}){const{_id:n,question:r,answer:o,tagString:i}=t,a=rt(i),l=e.quizzes.findIndex(e=>e._id===n),u=[...e.quizzes];return u[l]={...u[l],question:r,answer:o,tags:a},{...e,quizzes:u}},setQuizForm:(e,{payload:t})=>({...e,quizForm:{...e.quizForm,...t}}),setOverlay:(e,{payload:t})=>({...e,modal:{...e.modal,overlay:t}}),setAddingModal:(e,{payload:t})=>({...e,modal:{...e.modal,adding:t}}),resetQuizForm:e=>({...e,quizForm:{...e.quizForm,question:"",answer:"",tagString:""}}),setArchiveQuizModal:(e,{payload:t})=>({...e,modal:{...e.modal,archive:{...t}}}),setEdittingModal:(e,{payload:t})=>({...e,modal:{...e.modal,editting:t}}),closeAllModal:e=>({...e,modal:{...e.modal,archive:{},adding:!1,overlay:!1,editting:!1,todays:!1},quizForm:{...e.quizForm,question:"",answer:"",tagString:""}}),setTodaysQuizModal:(e,{payload:t})=>({...e,modal:{...e.modal,todays:t}}),setTodaysAnswerOn:(e,{payload:t})=>({...e,todays:{...e.todays,answerOn:t}}),setTodaysQuizzes:(e,{payload:t})=>({...e,todays:{...e.todays,quizzes:[...t]}}),removeTodaysQuiz:(e,{payload:t})=>({...e,todays:{...e.todays,quizzes:e.todays.quizzes.filter(e=>e._id!==t)}})}}),{setUserName:mt,setLoginId:ht,setLoginPw:gt,setToken:vt,setQuizzes:yt,addQuiz:bt,removeQuiz:wt,editQuiz:xt,setQuizForm:kt,setOverlay:Ct,setAddingModal:Et,resetQuizForm:St,setArchiveQuizModal:Tt,setEdittingModal:Pt,closeAllModal:Ot,setTodaysQuizModal:At,setTodaysAnswerOn:zt,setTodaysQuizzes:_t,removeTodaysQuiz:Rt}=pt,Nt=()=>async e=>{const t=await ft.getQuizzes();e(yt(t)),e(_t(at(t)))};var jt=function(e){var t,n=Ze(),r=e||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,l=void 0===a?n():a,u=r.devTools,s=void 0===u||u,c=r.preloadedState,f=void 0===c?void 0:c,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!Ye(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=k(i)}var m=P.apply(void 0,"function"==typeof l?l(n):l),h=T;s&&(h=Ke(qe({trace:!1},"object"==typeof s&&s)));var g=[m];return Array.isArray(p)?g=[m].concat(p):"function"==typeof p&&(g=p(g)),w(t,f,h.apply(void 0,g))}({reducer:{selfQuizReducer:dt}}),Mt=(n(53),n(2));function It(e){return"/"===e.charAt(0)}function Lt(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var Dt=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],o=t&&t.split("/")||[],i=e&&It(e),a=t&&It(t),l=i||a;if(e&&It(e)?o=r:r.length&&(o.pop(),o=o.concat(r)),!o.length)return"/";if(o.length){var u=o[o.length-1];n="."===u||".."===u||""===u}else n=!1;for(var s=0,c=o.length;c>=0;c--){var f=o[c];"."===f?Lt(o,c):".."===f?(Lt(o,c),s++):s&&(Lt(o,c),s--)}if(!l)for(;s--;s)o.unshift("..");!l||""===o[0]||o[0]&&It(o[0])||o.unshift("");var d=o.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};var Bt=function(e,t){if(!e)throw new Error("Invariant failed")};function Ft(e){return"/"===e.charAt(0)?e:"/"+e}function Ut(e){return"/"===e.charAt(0)?e.substr(1):e}function qt(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function $t(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function Qt(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function Wt(e,t,n,r){var o;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=p({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Dt(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o}function Vt(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var Ht=!("undefined"==typeof window||!window.document||!window.document.createElement);function Kt(e,t){t(window.confirm(e))}function Yt(){try{return window.history.state||{}}catch(e){return{}}}function Xt(e){void 0===e&&(e={}),Ht||Bt(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e,a=i.forceRefresh,l=void 0!==a&&a,u=i.getUserConfirmation,s=void 0===u?Kt:u,c=i.keyLength,f=void 0===c?6:c,d=e.basename?$t(Ft(e.basename)):"";function m(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return d&&(i=qt(i,d)),Wt(i,r,n)}function h(){return Math.random().toString(36).substr(2,f)}var g=Vt();function v(e){p(A,e),A.length=n.length,g.notifyListeners(A.location,A.action)}function y(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||x(m(e.state))}function b(){x(m(Yt()))}var w=!1;function x(e){if(w)w=!1,v();else{g.confirmTransitionTo(e,"POP",s,(function(t){t?v({action:"POP",location:e}):function(e){var t=A.location,n=C.indexOf(t.key);-1===n&&(n=0);var r=C.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(w=!0,S(o))}(e)}))}}var k=m(Yt()),C=[k.key];function E(e){return d+Qt(e)}function S(e){n.go(e)}var T=0;function P(e){1===(T+=e)&&1===e?(window.addEventListener("popstate",y),o&&window.addEventListener("hashchange",b)):0===T&&(window.removeEventListener("popstate",y),o&&window.removeEventListener("hashchange",b))}var O=!1;var A={length:n.length,action:"POP",location:k,createHref:E,push:function(e,t){var o=Wt(e,t,h(),A.location);g.confirmTransitionTo(o,"PUSH",s,(function(e){if(e){var t=E(o),i=o.key,a=o.state;if(r)if(n.pushState({key:i,state:a},null,t),l)window.location.href=t;else{var u=C.indexOf(A.location.key),s=C.slice(0,u+1);s.push(o.key),C=s,v({action:"PUSH",location:o})}else window.location.href=t}}))},replace:function(e,t){var o=Wt(e,t,h(),A.location);g.confirmTransitionTo(o,"REPLACE",s,(function(e){if(e){var t=E(o),i=o.key,a=o.state;if(r)if(n.replaceState({key:i,state:a},null,t),l)window.location.replace(t);else{var u=C.indexOf(A.location.key);-1!==u&&(C[u]=o.key),v({action:"REPLACE",location:o})}else window.location.replace(t)}}))},go:S,goBack:function(){S(-1)},goForward:function(){S(1)},block:function(e){void 0===e&&(e=!1);var t=g.setPrompt(e);return O||(P(1),O=!0),function(){return O&&(O=!1,P(-1)),t()}},listen:function(e){var t=g.appendListener(e);return P(1),function(){P(-1),t()}}};return A}var Zt={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+Ut(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:Ut,decodePath:Ft},slash:{encodePath:Ft,decodePath:Ft}};function Gt(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function Jt(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function en(e){window.location.replace(Gt(window.location.href)+"#"+e)}function tn(e){void 0===e&&(e={}),Ht||Bt(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,o=void 0===r?Kt:r,i=n.hashType,a=void 0===i?"slash":i,l=e.basename?$t(Ft(e.basename)):"",u=Zt[a],s=u.encodePath,c=u.decodePath;function f(){var e=c(Jt());return l&&(e=qt(e,l)),Wt(e)}var d=Vt();function m(e){p(T,e),T.length=t.length,d.notifyListeners(T.location,T.action)}var h=!1,g=null;function v(){var e,t,n=Jt(),r=s(n);if(n!==r)en(r);else{var i=f(),a=T.location;if(!h&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(g===Qt(i))return;g=null,function(e){if(h)h=!1,m();else{d.confirmTransitionTo(e,"POP",o,(function(t){t?m({action:"POP",location:e}):function(e){var t=T.location,n=x.lastIndexOf(Qt(t));-1===n&&(n=0);var r=x.lastIndexOf(Qt(e));-1===r&&(r=0);var o=n-r;o&&(h=!0,k(o))}(e)}))}}(i)}}var y=Jt(),b=s(y);y!==b&&en(b);var w=f(),x=[Qt(w)];function k(e){t.go(e)}var C=0;function E(e){1===(C+=e)&&1===e?window.addEventListener("hashchange",v):0===C&&window.removeEventListener("hashchange",v)}var S=!1;var T={length:t.length,action:"POP",location:w,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=Gt(window.location.href)),n+"#"+s(l+Qt(e))},push:function(e,t){var n=Wt(e,void 0,void 0,T.location);d.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=Qt(n),r=s(l+t);if(Jt()!==r){g=t,function(e){window.location.hash=e}(r);var o=x.lastIndexOf(Qt(T.location)),i=x.slice(0,o+1);i.push(t),x=i,m({action:"PUSH",location:n})}else m()}}))},replace:function(e,t){var n=Wt(e,void 0,void 0,T.location);d.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=Qt(n),r=s(l+t);Jt()!==r&&(g=t,en(r));var o=x.indexOf(Qt(T.location));-1!==o&&(x[o]=t),m({action:"REPLACE",location:n})}}))},go:k,goBack:function(){k(-1)},goForward:function(){k(1)},block:function(e){void 0===e&&(e=!1);var t=d.setPrompt(e);return S||(E(1),S=!0),function(){return S&&(S=!1,E(-1)),t()}},listen:function(e){var t=d.appendListener(e);return E(1),function(){E(-1),t()}}};return T}function nn(e,t,n){return Math.min(Math.max(e,t),n)}function rn(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,o=void 0===r?["/"]:r,i=t.initialIndex,a=void 0===i?0:i,l=t.keyLength,u=void 0===l?6:l,s=Vt();function c(e){p(v,e),v.length=v.entries.length,s.notifyListeners(v.location,v.action)}function f(){return Math.random().toString(36).substr(2,u)}var d=nn(a,0,o.length-1),m=o.map((function(e){return Wt(e,void 0,"string"==typeof e?f():e.key||f())})),h=Qt;function g(e){var t=nn(v.index+e,0,v.entries.length-1),r=v.entries[t];s.confirmTransitionTo(r,"POP",n,(function(e){e?c({action:"POP",location:r,index:t}):c()}))}var v={length:m.length,action:"POP",location:m[d],index:d,entries:m,createHref:h,push:function(e,t){var r=Wt(e,t,f(),v.location);s.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=v.index+1,n=v.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),c({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=Wt(e,t,f(),v.location);s.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(v.entries[v.index]=r,c({action:"REPLACE",location:r}))}))},go:g,goBack:function(){g(-1)},goForward:function(){g(1)},canGo:function(e){var t=v.index+e;return t>=0&&t<v.entries.length},block:function(e){return void 0===e&&(e=!1),s.setPrompt(e)},listen:function(e){return s.appendListener(e)}};return v}var on=n(11),an=n(12),ln=n.n(an),un=function(e){var t=Object(on.a)();return t.displayName=e,t}("Router-History"),sn=function(e){var t=Object(on.a)();return t.displayName=e,t}("Router"),cn=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(Mt.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(sn.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},o.a.createElement(un.Provider,{children:this.props.children||null,value:this.props.history}))},t}(o.a.Component);o.a.Component;o.a.Component;var fn={},dn=0;function pn(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,l=void 0!==a&&a,u=n.sensitive,s=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=fn[n]||(fn[n]={});if(r[e])return r[e];var o=[],i={regexp:ln()(e,o,t),keys:o};return dn<1e4&&(r[e]=i,dn++),i}(n,{end:i,strict:l,sensitive:s}),o=r.regexp,a=r.keys,u=o.exec(e);if(!u)return null;var c=u[0],f=u.slice(1),d=e===c;return i&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var mn=function(e){function t(){return e.apply(this,arguments)||this}return Object(Mt.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(sn.Consumer,null,(function(t){t||Bt(!1);var n=e.props.location||t.location,r=p({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?pn(n.pathname,e.props):t.match}),i=e.props,a=i.children,l=i.component,u=i.render;return Array.isArray(a)&&0===a.length&&(a=null),o.a.createElement(sn.Provider,{value:r},r.match?a?"function"==typeof a?a(r):a:l?o.a.createElement(l,r):u?u(r):null:"function"==typeof a?a(r):null)}))},t}(o.a.Component);function hn(e){return"/"===e.charAt(0)?e:"/"+e}function gn(e,t){if(!e)return t;var n=hn(e);return 0!==t.pathname.indexOf(n)?t:p({},t,{pathname:t.pathname.substr(n.length)})}function vn(e){return"string"==typeof e?e:Qt(e)}function yn(e){return function(){Bt(!1)}}function bn(){}o.a.Component;var wn=function(e){function t(){return e.apply(this,arguments)||this}return Object(Mt.a)(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(sn.Consumer,null,(function(t){t||Bt(!1);var n,r,i=e.props.location||t.location;return o.a.Children.forEach(e.props.children,(function(e){if(null==r&&o.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?pn(i.pathname,p({},e.props,{path:a})):t.match}})),r?o.a.cloneElement(n,{location:i,computedMatch:r}):null}))},t}(o.a.Component);var xn=o.a.useContext;function kn(){return xn(un)}var Cn=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).history=Xt(t.props),t}return Object(Mt.a)(t,e),t.prototype.render=function(){return o.a.createElement(cn,{history:this.history,children:this.props.children})},t}(o.a.Component);o.a.Component;var En=function(e,t){return"function"==typeof e?e(t):e},Sn=function(e,t){return"string"==typeof e?Wt(e,null,null,t):e},Tn=function(e){return e},Pn=o.a.forwardRef;void 0===Pn&&(Pn=Tn);var On=Pn((function(e,t){var n=e.innerRef,r=e.navigate,i=e.onClick,a=m(e,["innerRef","navigate","onClick"]),l=a.target,u=p({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return u.ref=Tn!==Pn&&t||n,o.a.createElement("a",u)}));var An=Pn((function(e,t){var n=e.component,r=void 0===n?On:n,i=e.replace,a=e.to,l=e.innerRef,u=m(e,["component","replace","to","innerRef"]);return o.a.createElement(sn.Consumer,null,(function(e){e||Bt(!1);var n=e.history,s=Sn(En(a,e.location),e.location),c=s?n.createHref(s):"",f=p({},u,{href:c,navigate:function(){var t=En(a,e.location);(i?n.replace:n.push)(t)}});return Tn!==Pn?f.ref=t||l:f.innerRef=l,o.a.createElement(r,f)}))})),zn=function(e){return e},_n=o.a.forwardRef;void 0===_n&&(_n=zn);_n((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,i=e.activeClassName,a=void 0===i?"active":i,l=e.activeStyle,u=e.className,s=e.exact,c=e.isActive,f=e.location,d=e.sensitive,h=e.strict,g=e.style,v=e.to,y=e.innerRef,b=m(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return o.a.createElement(sn.Consumer,null,(function(e){e||Bt(!1);var n=f||e.location,i=Sn(En(v,n),n),m=i.pathname,w=m&&m.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),x=w?pn(n.pathname,{path:w,exact:s,sensitive:d,strict:h}):null,k=!!(c?c(x,n):x),C=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,a):u,E=k?p({},g,{},l):g,S=p({"aria-current":k&&r||null,className:C,style:E,to:i},b);return zn!==_n?S.ref=t||y:S.innerRef=y,o.a.createElement(An,S)}))}));var Rn=n(27),Nn=n.n(Rn);var jn=function(){function e(e){this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.before=null}var t=e.prototype;return t.insert=function(e){if(this.ctr%(this.isSpeedy?65e3:1)==0){var t,n=function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t}(this);t=0===this.tags.length?this.before:this.tags[this.tags.length-1].nextSibling,this.container.insertBefore(n,t),this.tags.push(n)}var r=this.tags[this.tags.length-1];if(this.isSpeedy){var o=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(r);try{var i=105===e.charCodeAt(1)&&64===e.charCodeAt(0);o.insertRule(e,i?0:o.cssRules.length)}catch(e){0}}else r.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}();var Mn=function(e){function t(e,t,r){var o=t.trim().split(m);t=o;var i=o.length,a=e.length;switch(a){case 0:case 1:var l=0;for(e=0===a?"":e[0]+" ";l<i;++l)t[l]=n(e,t[l],r).trim();break;default:var u=l=0;for(t=[];l<i;++l)for(var s=0;s<a;++s)t[u++]=n(e[s]+" ",o[l],r).trim()}return t}function n(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(h,"$1"+e.trim());case 58:return e.trim()+t.replace(h,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(h,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function r(e,t,n,i){var a=e+";",l=2*t+3*n+4*i;if(944===l){e=a.indexOf(":",9)+1;var u=a.substring(e,a.length-1).trim();return u=a.substring(0,e).trim()+u+";",1===A||2===A&&o(u,1)?"-webkit-"+u+u:u}if(0===A||2===A&&!o(a,1))return a;switch(l){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(S,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(u=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+u+a;case 1005:return d.test(a)?a.replace(f,":-webkit-")+a.replace(f,":-moz-")+a:a;case 1e3:switch(t=(u=a.substring(13).trim()).indexOf("-")+1,u.charCodeAt(0)+u.charCodeAt(t)){case 226:u=a.replace(b,"tb");break;case 232:u=a.replace(b,"tb-rl");break;case 220:u=a.replace(b,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+u+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,l=(u=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|u.charCodeAt(7))){case 203:if(111>u.charCodeAt(8))break;case 115:a=a.replace(u,"-webkit-"+u)+";"+a;break;case 207:case 102:a=a.replace(u,"-webkit-"+(102<l?"inline-":"")+"box")+";"+a.replace(u,"-webkit-"+u)+";"+a.replace(u,"-ms-"+u+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return u=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+u+"-ms-flex-"+u+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(k,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(k,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===E.test(e))return 115===(u=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),t,n,i).replace(":fill-available",":stretch"):a.replace(u,"-webkit-"+u)+a.replace(u,"-moz-"+u.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+i&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+a}return a}function o(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),N(2!==t?r:r.replace(C,"$1"),n,t)}function i(e,t){var n=r(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(x," or ($1)").substring(4):"("+t+")"}function a(e,t,n,r,o,i,a,l,s,c){for(var f,d=0,p=t;d<R;++d)switch(f=_[d].call(u,e,p,n,r,o,i,a,l,s,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function l(e){return void 0!==(e=e.prefix)&&(N=null,e?"function"!=typeof e?A=1:(A=2,N=e):A=0),l}function u(e,n){var l=e;if(33>l.charCodeAt(0)&&(l=l.trim()),l=[l],0<R){var u=a(-1,n,l,l,P,T,0,0,0,0);void 0!==u&&"string"==typeof u&&(n=u)}var f=function e(n,l,u,f,d){for(var p,m,h,b,x,k=0,C=0,E=0,S=0,_=0,N=0,M=h=p=0,I=0,L=0,D=0,B=0,F=u.length,U=F-1,q="",$="",Q="",W="";I<F;){if(m=u.charCodeAt(I),I===U&&0!==C+S+E+k&&(0!==C&&(m=47===C?10:47),S=E=k=0,F++,U++),0===C+S+E+k){if(I===U&&(0<L&&(q=q.replace(c,"")),0<q.trim().length)){switch(m){case 32:case 9:case 59:case 13:case 10:break;default:q+=u.charAt(I)}m=59}switch(m){case 123:for(p=(q=q.trim()).charCodeAt(0),h=1,B=++I;I<F;){switch(m=u.charCodeAt(I)){case 123:h++;break;case 125:h--;break;case 47:switch(m=u.charCodeAt(I+1)){case 42:case 47:e:{for(M=I+1;M<U;++M)switch(u.charCodeAt(M)){case 47:if(42===m&&42===u.charCodeAt(M-1)&&I+2!==M){I=M+1;break e}break;case 10:if(47===m){I=M+1;break e}}I=M}}break;case 91:m++;case 40:m++;case 34:case 39:for(;I++<U&&u.charCodeAt(I)!==m;);}if(0===h)break;I++}switch(h=u.substring(B,I),0===p&&(p=(q=q.replace(s,"").trim()).charCodeAt(0)),p){case 64:switch(0<L&&(q=q.replace(c,"")),m=q.charCodeAt(1)){case 100:case 109:case 115:case 45:L=l;break;default:L=z}if(B=(h=e(l,L,h,m,d+1)).length,0<R&&(x=a(3,h,L=t(z,q,D),l,P,T,B,m,d,f),q=L.join(""),void 0!==x&&0===(B=(h=x.trim()).length)&&(m=0,h="")),0<B)switch(m){case 115:q=q.replace(w,i);case 100:case 109:case 45:h=q+"{"+h+"}";break;case 107:h=(q=q.replace(g,"$1 $2"))+"{"+h+"}",h=1===A||2===A&&o("@"+h,3)?"@-webkit-"+h+"@"+h:"@"+h;break;default:h=q+h,112===f&&($+=h,h="")}else h="";break;default:h=e(l,t(l,q,D),h,f,d+1)}Q+=h,h=D=L=M=p=0,q="",m=u.charCodeAt(++I);break;case 125:case 59:if(1<(B=(q=(0<L?q.replace(c,""):q).trim()).length))switch(0===M&&(p=q.charCodeAt(0),45===p||96<p&&123>p)&&(B=(q=q.replace(" ",":")).length),0<R&&void 0!==(x=a(1,q,l,n,P,T,$.length,f,d,f))&&0===(B=(q=x.trim()).length)&&(q="\0\0"),p=q.charCodeAt(0),m=q.charCodeAt(1),p){case 0:break;case 64:if(105===m||99===m){W+=q+u.charAt(I);break}default:58!==q.charCodeAt(B-1)&&($+=r(q,p,m,q.charCodeAt(2)))}D=L=M=p=0,q="",m=u.charCodeAt(++I)}}switch(m){case 13:case 10:47===C?C=0:0===1+p&&107!==f&&0<q.length&&(L=1,q+="\0"),0<R*j&&a(0,q,l,n,P,T,$.length,f,d,f),T=1,P++;break;case 59:case 125:if(0===C+S+E+k){T++;break}default:switch(T++,b=u.charAt(I),m){case 9:case 32:if(0===S+k+C)switch(_){case 44:case 58:case 9:case 32:b="";break;default:32!==m&&(b=" ")}break;case 0:b="\\0";break;case 12:b="\\f";break;case 11:b="\\v";break;case 38:0===S+C+k&&(L=D=1,b="\f"+b);break;case 108:if(0===S+C+k+O&&0<M)switch(I-M){case 2:112===_&&58===u.charCodeAt(I-3)&&(O=_);case 8:111===N&&(O=N)}break;case 58:0===S+C+k&&(M=I);break;case 44:0===C+E+S+k&&(L=1,b+="\r");break;case 34:case 39:0===C&&(S=S===m?0:0===S?m:S);break;case 91:0===S+C+E&&k++;break;case 93:0===S+C+E&&k--;break;case 41:0===S+C+k&&E--;break;case 40:if(0===S+C+k){if(0===p)switch(2*_+3*N){case 533:break;default:p=1}E++}break;case 64:0===C+E+S+k+M+h&&(h=1);break;case 42:case 47:if(!(0<S+k+E))switch(C){case 0:switch(2*m+3*u.charCodeAt(I+1)){case 235:C=47;break;case 220:B=I,C=42}break;case 42:47===m&&42===_&&B+2!==I&&(33===u.charCodeAt(B+2)&&($+=u.substring(B,I+1)),b="",C=0)}}0===C&&(q+=b)}N=_,_=m,I++}if(0<(B=$.length)){if(L=l,0<R&&(void 0!==(x=a(2,$,L,n,P,T,B,f,d,f))&&0===($=x).length))return W+$+Q;if($=L.join(",")+"{"+$+"}",0!=A*O){switch(2!==A||o($,2)||(O=0),O){case 111:$=$.replace(y,":-moz-$1")+$;break;case 112:$=$.replace(v,"::-webkit-input-$1")+$.replace(v,"::-moz-$1")+$.replace(v,":-ms-input-$1")+$}O=0}}return W+$+Q}(z,l,n,0,0);return 0<R&&(void 0!==(u=a(-2,f,l,l,P,T,f.length,0,0,0))&&(f=u)),"",O=0,T=P=1,f}var s=/^\0+/g,c=/[\0\r\f]/g,f=/: */g,d=/zoo|gra/,p=/([,: ])(transform)/g,m=/,\r+?/g,h=/([\t\r\n ])*\f?&/g,g=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,y=/:(read-only)/g,b=/[svh]\w+-[tblr]{2}/,w=/\(\s*(.*)\s*\)/g,x=/([\s\S]*?);/g,k=/-self|flex-/g,C=/[^]*?(:[rp][el]a[\w-]+)[^]*/,E=/stretch|:\s*\w+\-(?:conte|avail)/,S=/([^-])(image-set\()/,T=1,P=1,O=0,A=1,z=[],_=[],R=0,N=null,j=0;return u.use=function e(t){switch(t){case void 0:case null:R=_.length=0;break;default:if("function"==typeof t)_[R++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else j=0|!!t}return e},u.set=l,void 0!==e&&l(e),u};function In(e){e&&Ln.current.insert(e+"}")}var Ln={current:null},Dn=function(e,t,n,r,o,i,a,l,u,s){switch(e){case 1:switch(t.charCodeAt(0)){case 64:return Ln.current.insert(t+";"),"";case 108:if(98===t.charCodeAt(2))return""}break;case 2:if(0===l)return t+"/*|*/";break;case 3:switch(l){case 102:case 112:return Ln.current.insert(n[0]+t),"";default:return t+(0===s?"/*|*/":"")}case-2:t.split("/*|*/}").forEach(In)}},Bn=function(e){void 0===e&&(e={});var t,n=e.key||"css";void 0!==e.prefix&&(t={prefix:e.prefix});var r=new Mn(t);var o,i={};o=e.container||document.head;var a,l=document.querySelectorAll("style[data-emotion-"+n+"]");Array.prototype.forEach.call(l,(function(e){e.getAttribute("data-emotion-"+n).split(" ").forEach((function(e){i[e]=!0})),e.parentNode!==o&&o.appendChild(e)})),r.use(e.stylisPlugins)(Dn),a=function(e,t,n,o){var i=t.name;Ln.current=n,r(e,t.styles),o&&(u.inserted[i]=!0)};var u={key:n,sheet:new jn({key:n,container:o,nonce:e.nonce,speedy:e.speedy}),nonce:e.nonce,inserted:i,registered:{},insert:a};return u};function Fn(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]):r+=n+" "})),r}var Un=function(e,t,n){var r=e.key+"-"+t.name;if(!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles),void 0===e.inserted[t.name]){var o=t;do{e.insert("."+r,o,e.sheet,!0);o=o.next}while(void 0!==o)}};var qn=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},$n={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Qn=/[A-Z]|^ms/g,Wn=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Vn=function(e){return 45===e.charCodeAt(1)},Hn=function(e){return null!=e&&"boolean"!=typeof e},Kn=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return Vn(e)?e:e.replace(Qn,"-$&").toLowerCase()})),Yn=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(Wn,(function(e,t,n){return Zn={name:t,styles:n,next:Zn},t}))}return 1===$n[e]||Vn(e)||"number"!=typeof t||0===t?t:t+"px"};function Xn(e,t,n,r){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return Zn={name:n.name,styles:n.styles,next:Zn},n.name;if(void 0!==n.styles){var o=n.next;if(void 0!==o)for(;void 0!==o;)Zn={name:o.name,styles:o.styles,next:Zn},o=o.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=Xn(e,t,n[o],!1);else for(var i in n){var a=n[i];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=i+"{"+t[a]+"}":Hn(a)&&(r+=Kn(i)+":"+Yn(i,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var l=Xn(e,t,a,!1);switch(i){case"animation":case"animationName":r+=Kn(i)+":"+l+";";break;default:r+=i+"{"+l+"}"}}else for(var u=0;u<a.length;u++)Hn(a[u])&&(r+=Kn(i)+":"+Yn(i,a[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var i=Zn,a=n(e);return Zn=i,Xn(e,t,a,r)}break;case"string":}if(null==t)return n;var l=t[n];return void 0===l||r?n:l}var Zn,Gn=/label:\s*([^\s;\n{]+)\s*;/g;var Jn=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";Zn=void 0;var i=e[0];null==i||void 0===i.raw?(r=!1,o+=Xn(n,t,i,!1)):o+=i[0];for(var a=1;a<e.length;a++)o+=Xn(n,t,e[a],46===o.charCodeAt(o.length-1)),r&&(o+=i[a]);Gn.lastIndex=0;for(var l,u="";null!==(l=Gn.exec(o));)u+="-"+l[1];return{name:qn(o)+u,styles:o,next:Zn}};var er=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Jn(t)},tr=Object(r.createContext)("undefined"!=typeof HTMLElement?Bn():null),nr=Object(r.createContext)({}),rr=(tr.Provider,function(e){return Object(r.forwardRef)((function(t,n){return Object(r.createElement)(tr.Consumer,null,(function(r){return e(t,r,n)}))}))}),or="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",ir=Object.prototype.hasOwnProperty,ar=function(e,t,n,o){var i=null===n?t.css:t.css(n);"string"==typeof i&&void 0!==e.registered[i]&&(i=e.registered[i]);var a=t[or],l=[i],u="";"string"==typeof t.className?u=Fn(e.registered,l,t.className):null!=t.className&&(u=t.className+" ");var s=Jn(l);Un(e,s,"string"==typeof a);u+=e.key+"-"+s.name;var c={};for(var f in t)ir.call(t,f)&&"css"!==f&&f!==or&&(c[f]=t[f]);return c.ref=o,c.className=u,Object(r.createElement)(a,c)},lr=rr((function(e,t,n){return"function"==typeof e.css?Object(r.createElement)(nr.Consumer,null,(function(r){return ar(t,e,r,n)})):ar(t,e,null,n)}));var ur=function(e,t){var n=arguments;if(null==t||!ir.call(t,"css"))return r.createElement.apply(void 0,n);var o=n.length,i=new Array(o);i[0]=lr;var a={};for(var l in t)ir.call(t,l)&&(a[l]=t[l]);a[or]=e,i[1]=a;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)},sr=(r.Component,function e(t){for(var n=t.length,r=0,o="";r<n;r++){var i=t[r];if(null!=i){var a=void 0;switch(typeof i){case"boolean":break;case"object":if(Array.isArray(i))a=e(i);else for(var l in a="",i)i[l]&&l&&(a&&(a+=" "),a+=l);break;default:a=i}a&&(o&&(o+=" "),o+=a)}}return o});function cr(e,t,n){var r=[],o=Fn(e,r,n);return r.length<2?n:o+t(r)}rr((function(e,t){return Object(r.createElement)(nr.Consumer,null,(function(n){var r=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var o=Jn(n,t.registered);return Un(t,o,!1),t.key+"-"+o.name},o={css:r,cx:function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return cr(t.registered,r,sr(n))},theme:n},i=e.children(o);return!0,i}))}));const fr={overlay:{width:"100%",position:"fixed",height:"100%",background:"#00000070"}};function dr(){const e=R();return ur("div",{onClick:()=>{e(Ot())},css:fr.overlay})}function pr({title:e,onClick:t,emotion:n}){return ur("button",{type:"button",onClick:t,css:n},e)}const mr={button:{position:"absolute",right:0,width:"7rem",height:"3rem",fontSize:"1rem",fontWeight:"bold",color:"white",background:"linear-gradient(90deg,#263443, #34679d)",border:"none",borderRadius:"0.6rem",cursor:"pointer",margin:"2rem",boxShadow:"0 0 8px 0px #ffffff"}};function hr(){const e=R();return ur(pr,{title:"로그아웃",onClick:async()=>{localStorage.removeItem("token"),e(vt(null)),await nt.success("로그아웃 되었습니다.")},emotion:mr.button})}function gr({value:e,onChange:t,emotion:n,placeholder:r="",disabled:o=""}){return ur("textarea",{onChange:t,value:e,css:er({...n,resize:"none"},";label:Textarea;"),placeholder:r,disabled:o})}const vr={title:{fontWeight:"bold",fontSize:"1.3rem",marginTop:"1rem"},input:{display:"block",width:"100%",height:"8rem",fontSize:"1rem",padding:"0.7rem",boxSizing:"border-box",borderRadius:"0.4rem"},tags:{height:"3rem"}};function yr(){const e=R(),t=I(({selfQuizReducer:e})=>e.quizForm),{question:n,answer:r,tagString:i}=t,a=t=>n=>{const r={};r[t]=n.target.value,e(kt(r))};return ur(o.a.Fragment,null,ur("div",{css:vr.title},"문제"),ur(gr,{value:n,onChange:a("question"),emotion:vr.input,placeholder:"문제를 입력해주세요."}),ur("div",{css:vr.title},"정답"),ur(gr,{value:r,onChange:a("answer"),emotion:vr.input,placeholder:"정답을 입력해주세요."}),ur("div",{css:vr.title},"#태그"),ur(gr,{value:i,onChange:a("tagString"),emotion:{...vr.input,...vr.tags},placeholder:"#오늘의 #문제"}))}const br={button:{width:"100%",marginTop:"2rem",height:"3rem",fontSize:"1.4rem",fontWeight:"bold",color:"white",background:"#244a72",border:"none",borderRadius:"0.5rem"}};function wr(){const e=R(),t=I(({selfQuizReducer:e})=>e.quizForm),{question:n,answer:r,tagString:o}=t;return ur(pr,{title:"확인",onClick:async()=>{const t=rt(o),i=await ft.addQuiz(n,r,t);i?(await nt.success("추가되었습니다."),e(bt(i)),e(St())):await nt.fail("실패했습니다. 다시 시도해주세요.")},emotion:br.button})}const xr={layout:{top:"15%",left:"50%",transform:"translate(-50%, 0)",position:"absolute",width:"40rem",height:"40rem",borderRadius:"0.5rem",background:"white",boxShadow:"0 0 11px 0px #244a72"},title:{fontSize:"1.5rem",fontWeight:"bold",background:"#244a72",color:"white",padding:"0.4rem 1rem",boxSizing:"border-box",borderRadius:"0.5rem 0.5rem 0 0"},container:{padding:"2rem"}};function kr(){return ur("div",{css:xr.layout},ur("div",{css:xr.title},"문제 만들기"),ur("div",{css:xr.container},ur(yr,null),ur(wr,null)))}const Cr={layout:{display:"flex",justifyContent:"space-between",marginTop:"2rem"},bundle:{display:"flex",justifyContent:"flex-end"},button:{margin:"1rem 0 0 0.2rem",color:"white",background:"#244a72",fontSize:"1rem",fontWeight:"bold",width:"8rem",height:"3rem",border:"none",borderRadius:"0.3rem",boxShadow:"0 0 4px 3px #a9dfc3",cursor:"pointer"}};function Er({quiz:e}){const t=R();return ur(o.a.Fragment,null,ur("div",{css:Cr.layout},ur("div",null,ur(pr,{title:"정답 확인하기",onClick:()=>{t(zt(!0))},emotion:Cr.button})),ur("div",{css:Cr.bundle},ur(pr,{title:"실패",onClick:async()=>{await ft.failQuiz(e._id),t(Rt(e._id)),t(zt(!1))},emotion:{...Cr.button,background:"black"}}),ur(pr,{title:"통과",onClick:async()=>{await ft.passQuiz(e._id),t(Rt(e._id)),t(zt(!1))},emotion:{...Cr.button,background:"green"}}))))}const Sr={layout:{position:"absolute",right:"0",bottom:"0",width:"100%",height:"47rem",opacity:"0.8",background:"#000000"},message:{fontSize:"2rem",fontWeight:"bold",width:"max-content",padding:"0.5rem",margin:"20rem auto",borderBottom:"3px solid white",color:"white"},question:{fontSize:"1.8rem",fontWeight:"bold",marginBottom:"2rem",height:"10rem"},answer:{width:"100%",height:"12rem",background:"white",fontSize:"1.2rem",marginBottom:"2rem",resize:"none",color:"black",border:"3px solid white",boxSizing:"border-box"},box:{width:"100%",height:"7rem",fontSize:"1.2rem",padding:"1rem",boxSizing:"border-box"},count:{textAlign:"end",marginBottom:"1rem"}};function Tr(){const e='"오늘의 문제"라는 웹 어플리케이션을 만든 이유는 무엇인지 설명하시오.',t='주기적인 복습을 통해 학습 능률을 높이고자 "오늘의 문제"라는 프로젝트를 진행하게 되었습니다. "오늘의 문제"는 그날그날 복습해야하는 지식들을 망각곡선을 토대로 자동적으로 보여주어 주기적인 복습을 강요하는 웹 어플리케이션입니다.';return ur(o.a.Fragment,null,ur("div",{css:Sr.layout},ur("div",{css:Sr.message},"오늘의 모든 문제를 다 풀었습니다")),ur("div",{css:Sr.count},"남은 문제: 0"),ur("div",{css:Sr.question},"Q. ",e),ur(gr,{value:"A. "+t,emotion:Sr.answer,disabled:"disabled"}),ur(gr,{emotion:Sr.box,placeholder:"정답을 입력하세요."}),ur("div",null,"정답을 생각만하는 것과 직접 글로 작성하여 끄집어내는 것은 다릅니다. 직접 입력하신 뒤 정답을 확인하시길 추천드립니다."),ur(Er,null))}const Pr={question:{fontSize:"1.8rem",fontWeight:"bold",marginBottom:"2rem",height:"10rem"},answer:{width:"100%",height:"12rem",background:"white",fontSize:"1.2rem",marginBottom:"2rem",resize:"none"},on:{color:"black",border:"3px solid white",boxSizing:"border-box"},off:{color:"white",border:"3px dashed #244a72",boxSizing:"border-box"},box:{width:"100%",height:"7rem",fontSize:"1.2rem",padding:"1rem",boxSizing:"border-box"}};function Or({quiz:e}){const{answerOn:t}=I(({selfQuizReducer:e})=>e.todays),{question:n,answer:r,tags:i}=e;return ur(o.a.Fragment,null,ur("div",{css:Pr.question},"Q. ",n),ur(gr,{value:"A. "+r,emotion:{...Pr.answer,...t?Pr.on:Pr.off},disabled:"disabled"}),ur(gr,{emotion:Pr.box,placeholder:"정답을 입력하세요."}),ur("div",null,"정답을 생각만하는 것과 직접 글로 작성하여 끄집어내는 것은 다릅니다. 직접 입력하신 뒤 정답을 확인하시길 추천드립니다."))}const Ar={layout:{top:"8%",left:"50%",transform:"translate(-50%,0)",position:"absolute",width:"63rem",height:"50rem",borderRadius:"0.5rem",background:"white",boxShadow:"0 0 11px 0px #244a72"},title:{fontSize:"1.5rem",fontWeight:"bold",background:"#244a72",color:"white",padding:"0.4rem 1rem",boxSizing:"border-box",borderRadius:"0.5rem 0.5rem 0 0"},container:{padding:"2rem"},count:{textAlign:"end",marginBottom:"1rem"}};function zr(){const{todays:e}=I(({selfQuizReducer:e})=>e),t=e.quizzes[0]||{question:"",answer:"",tags:[]};return ur("div",{css:Ar.layout},ur("div",{css:Ar.title},"오늘의 문제"),ur("div",{css:Ar.container},0===e.quizzes.length?ur(Tr,null):ur(o.a.Fragment,null,ur("div",{css:Ar.count},"남은 문제: ",e.quizzes.length),ur(Or,{quiz:t}),ur(Er,{quiz:t}))))}const _r={tab:{display:"flex",justifyContent:"center"},selection:{border:"none",borderRadius:"1rem",width:"20rem",height:"20rem",margin:"0.5rem",boxShadow:"0 0 6px 0px #ffffff",background:"linear-gradient(45deg, black, transparent)",color:"white",fontSize:"1.3rem",fontWeight:"bold","&:hover":{background:"#3e7cbc54",cursor:"pointer"},"&:focus":{background:"#3e7cbc54",cursor:"pointer"}}};function Rr(){const e=R(),t=kn();return ur("div",{css:_r.tab},ur(pr,{title:"문제 추가",onClick:()=>{e(Et(!0)),e(Ct(!0))},emotion:_r.selection}),ur(pr,{title:"오늘의 문제",onClick:()=>{e(At(!0)),e(Ct(!0))},emotion:_r.selection}),ur(pr,{title:"아카이브",onClick:()=>t.push("/archive"),emotion:_r.selection}))}const Nr={title:{width:"60rem",display:"table",margin:"0 auto"},name:{fontSize:"3rem",fontWeight:"bold",color:"white",marginTop:"10rem"},text:{fontSize:"1.5rem",color:"white",marginBottom:"10rem"}};function jr(){const e=R(),{user:t,todays:n}=I(({selfQuizReducer:e})=>e),{name:o}=t;return Object(r.useEffect)(()=>{o||e(async e=>{const t=await ft.getUserName();e(mt(t))})},[]),ur("div",{css:Nr.title},ur("div",{css:Nr.name},o,"님,"),ur("div",{css:Nr.text},"오늘 복습해야 할 문제는 총 ",n.quizzes.length,"문제 입니다."))}function Mr(){const e=R(),t=I(({selfQuizReducer:e})=>e),{quizzes:n,modal:o}=t,{adding:i,todays:a}=o;return Object(r.useEffect)(()=>{0===n.length&&e(Nt())},[]),ur("div",null,ur(hr,null),i&&ur(kr,null),a&&ur(zr,null),ur(jr,null),ur(Rr,null))}function Ir({value:e,onChange:t,emotion:n,placeholder:r="",type:o="text"}){return ur("input",{type:o,onChange:t,value:e,css:n,placeholder:r})}const Lr={layout:{marginBottom:"1rem"},input:{display:"block",fontSize:"1rem",width:"25rem",height:"3rem",border:"none",borderBottom:"1px solid #3e7cbc",paddingLeft:"1rem"}};function Dr(){const e=R(),{id:t,pw:n}=I(({selfQuizReducer:e})=>e.login);return ur("div",{css:Lr.layout},ur(Ir,{value:t,onChange:t=>{e(ht(t.target.value))},emotion:Lr.input,placeholder:"아이디를 입력해주세요."}),ur(Ir,{value:n,onChange:t=>{e(gt(t.target.value))},emotion:Lr.input,type:"password",placeholder:"비밀번호를 입력해주세요."}))}const Br={button:{fontSize:"1rem",fontWeight:"bold",color:"white",backgroundColor:"#244a72",width:"100%",height:"3rem",border:"none",borderRadius:"0.5rem",marginTop:"0.5rem",cursor:"pointer"}};function Fr(){const e=R(),{id:t,pw:n}=I(({selfQuizReducer:e})=>e.login),r=async()=>{const r=await ft.login(t,n);if(!r)return void await nt.fail("아이디 혹은 패스워드가 일치하지 않습니다.");await nt.success("로그인 성공"),localStorage.setItem("token",r),e(vt(r));const o=await ft.getQuizzes();e(yt(o))};return ur(o.a.Fragment,null,ur(pr,{title:"로그인",onClick:r,emotion:Br.button}),ur(pr,{title:"회원가입",onClick:r,emotion:{...Br.button,backgroundColor:"#2779ce"}}))}const Ur={layout:{position:"absolute",top:"20%",left:"50%",transform:"translate(-50%, 0)",width:"30rem",height:"35rem",borderRadius:"0.5rem",background:"white",boxShadow:"0 0 11px 0px #244a72"},title:{background:"#092747",height:"3rem",borderRadius:"0.5rem 0.5rem 0 0"},container:{padding:"2rem"},text:{marginTop:"2rem",textAlign:"center",fontSize:"2rem",fontWeight:"bold",color:"#244a72"},logo:{width:"12rem",margin:"0 auto 4rem auto",display:"table"}};function qr(){return ur("div",{css:Ur.layout},ur("div",{css:Ur.title}),ur("div",{css:Ur.container},ur("div",{css:Ur.text},"오늘의 문제"),ur("img",{src:"src/styles/logo.png",alt:"로고",css:Ur.logo}),ur(Dr,null),ur(Fr,null)))}function $r(){const e=I(({selfQuizReducer:e})=>e.token);return ur(e?Mr:qr,null)}const Qr={button:{width:"7rem",height:"3rem",fontSize:"1rem",fontWeight:"bold",color:"white",background:"linear-gradient(90deg,#000000,#263443 )",border:"none",borderRadius:"0.6rem",cursor:"pointer",margin:"2rem 1rem",boxShadow:"0 0 8px 0px #ffffff"}};function Wr(){const e=kn();return ur(pr,{title:"돌아가기",emotion:Qr.button,onClick:()=>{e.push("/")}})}const Vr={layout:{width:"100%",padding:"1rem 3rem",boxShadow:"0 0 7px 1px #cfcfcf",borderRadius:"1rem",marginTop:"0.5rem",color:"white",cursor:"pointer","&:hover":{background:"black"}}};function Hr({question:e,onClick:t}){return ur("div",{onClick:t,css:Vr.layout},ur("div",null,"Q. ",e))}function Kr({quiz:e}){const t=R(),{question:n,answer:r,lastSolved:o,layer:i,tags:a,_id:l}=e;return ur(Hr,{question:n,onClick:()=>{const e=(e=>e.map(e=>"#"+e).join(" "))(a);t(Tt({question:n,answer:r,lastSolved:o,layer:i,tagString:e,_id:l})),t(Ct(!0))}})}const Yr={text:{fontWeight:"bold",fontSize:"1.3rem",marginTop:"1rem"},input:{display:"block",width:"100%",fontSize:"1rem",padding:"0.7rem",boxSizing:"border-box",borderRadius:"0.4rem",background:"white",border:"none"},container:{padding:"2rem"},tag:{margin:"1rem 0"}};function Xr(){const{archive:e}=I(({selfQuizReducer:e})=>e.modal),{question:t,answer:n,tagString:r}=e;return ur(o.a.Fragment,null,ur("div",{css:Yr.text},"문제"),ur(gr,{value:t,emotion:{...Yr.input,height:"7rem"},disabled:"disabled"}),ur("div",{css:Yr.text},"정답"),ur(gr,{value:n,emotion:{...Yr.input,height:"16rem"},disabled:"disabled"}),ur("div",{css:Yr.tag},r))}const Zr={width:"50%",height:"2rem",border:"none",color:"white",fontSize:"1rem",fontWeight:"bold",borderRadius:"0.4rem",cursor:"pointer"};function Gr(){const e=R(),{_id:t}=I(({selfQuizReducer:e})=>e.modal.archive);return ur(o.a.Fragment,null,ur(pr,{title:"수정",onClick:async()=>{e(Pt(!0))},emotion:{...Zr,background:"#244a72"}}),ur(pr,{title:"삭제",onClick:async()=>{await ft.deleteQuiz(t)?(await nt.success("해당 퀴즈를 삭제하였습니다."),e(wt(t)),e(Tt({})),e(Ct(!1))):await nt.fail("삭제하지 못했습니다. 다시 시도해주세요.")},emotion:{...Zr,background:"black"}}))}const Jr={layout:{position:"fixed",top:"15%",left:"50%",transform:"translate(-50%, 0)",width:"40rem",height:"40rem",color:"black",background:"white",borderRadius:"0.5rem"},title:{fontSize:"1.5rem",fontWeight:"bold",background:"#244a72",color:"white",padding:"0.4rem 1rem",boxSizing:"border-box",borderRadius:"0.5rem 0.5rem 0 0"},container:{padding:"2rem"}};function eo(){return ur("div",{css:Jr.layout},ur("div",{css:Jr.title},"Quiz"),ur("div",{css:Jr.container},ur(Xr,null),ur(Gr,null)))}const to={text:{fontWeight:"bold",fontSize:"1.3rem",marginTop:"1rem"},input:{display:"block",width:"100%",fontSize:"1rem",padding:"0.7rem",boxSizing:"border-box",borderRadius:"0.4rem",background:"white"},tag:{margin:"0.8rem 0",width:"100%",resize:"none",borderRadius:"0.4rem",height:"1.5rem",padding:"0.1rem 0.4rem 0 0.4rem",boxSizing:"border-box"}};function no(){const e=R(),t=I(({selfQuizReducer:e})=>e.quizForm),{question:n,answer:r,tagString:i}=t,a=t=>n=>{const r={};r[t]=n.target.value,e(kt(r))};return ur(o.a.Fragment,null,ur("div",{css:to.text},"문제"),ur(gr,{value:n,onChange:a("question"),emotion:{...to.input,height:"7rem"}}),ur("div",{css:to.text},"정답"),ur(gr,{value:r,onChange:a("answer"),emotion:{...to.input,height:"16rem"}}),ur(gr,{value:i,onChange:a("tagString"),emotion:to.tag}))}const ro={width:"100%",height:"2rem",border:"none",color:"white",fontSize:"1rem",fontWeight:"bold",borderRadius:"0.4rem",cursor:"pointer"};function oo(){const e=R(),{modal:t,quizForm:n}=I(({selfQuizReducer:e})=>e),{archive:r}=t,{question:o,answer:i,tagString:a}=n,{_id:l}=r;return ur(pr,{title:"수정",emotion:{...ro,background:"#244a72"},onClick:async()=>{const t=rt(a);await ft.editQuiz(l,o,i,t)?(await nt.success("해당 퀴즈를 수정하였습니다."),e(Ot()),e(xt({_id:l,question:o,answer:i,tagString:a}))):await nt.fail("수정하지 못했습니다. 다시 시도해주세요.")}})}const io={layout:{position:"fixed",top:"15%",left:"50%",transform:"translate(-50%, 0)",width:"40rem",height:"40rem",color:"black",background:"white",borderRadius:"0.5rem"},title:{fontSize:"1.5rem",fontWeight:"bold",background:"#244a72",color:"white",padding:"0.4rem 1rem",boxSizing:"border-box",borderRadius:"0.5rem 0.5rem 0 0"},container:{padding:"2rem"}};function ao(){const e=R(),{archive:t}=I(({selfQuizReducer:e})=>e.modal),{question:n,answer:o,tagString:i}=t;return Object(r.useEffect)(()=>{e(kt({question:n,answer:o,tagString:i}))},[]),ur("div",{css:io.layout},ur("div",{css:io.title},"Quiz"),ur("div",{css:io.container},ur(no,null),ur(oo,null)))}const lo={body:{background:"linear-gradient(90deg, #111d2a, #295582 )",width:"100%"},layout:{display:"table",margin:"0 auto",padding:"0 0 10rem 0",width:"50rem"},title:{fontSize:"2rem",fontWeight:"bold",color:"white",margin:"3rem 0",width:"100%"}};function uo(){const{quizzes:e,modal:t}=I(({selfQuizReducer:e})=>e),{archive:n,editting:r}=t,o=Object.keys(n).length>0;return ur("div",{css:lo.body},ur(Wr,null),o&&ur(eo,null),r&&ur(ao,null),ur("div",{css:lo.layout},ur("div",{css:lo.title},"아카이브"),e.map(e=>ur("div",{key:e._id},ur(Kr,{quiz:e})))))}function so(){const e=R(),t=I(({selfQuizReducer:e})=>e.quizzes);return Object(r.useEffect)(()=>{0===t.length&&e(Nt())},[]),ur(uo,null)}a.a.render(ur(d,{store:jt},ur((function(){const{overlay:e}=I(({selfQuizReducer:e})=>e.modal);return ur(o.a.Fragment,null,e&&ur(dr,null),ur(Cn,null,ur(wn,null,ur(mn,{exact:!0,path:"/"},ur($r,null)),ur(mn,{path:"/archive"},ur(so,null)))))}),null)),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N3ZWV0YWxlcnQyL2Rpc3Qvc3dlZXRhbGVydDIuYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL05vdG9TYW5zS1ItTWVkaXVtLm90ZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL3Jlc2V0LmNzcz80Y2ZiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VSZWR1eENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VEaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ltbWVyL2Rpc3QvaW1tZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AcmVkdXhqcy90b29sa2l0L2Rpc3QvcmVkdXgtdG9vbGtpdC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FsZ29yaXRobS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGlzL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3NoZWV0L2Rpc3Qvc2hlZXQuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxpcy9kaXN0L3N0eWxpcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY2FjaGUvZGlzdC9jYWNoZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC91dGlscy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2hhc2guYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9tZW1vaXplLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zZXJpYWxpemUvZGlzdC9zZXJpYWxpemUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2Nzcy9kaXN0L2Nzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY29yZS9kaXN0L2NvcmUuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL092ZXJsYXkuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0J1dHRvbi5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9nb3V0QnV0dG9uQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UZXh0YXJlYS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUXVpekZvcm1JbnB1dENvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvUXVpekZvcm1CdXR0b25Db250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1F1aXpGb3JtLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2RheXNRdWl6QnV0dG9uLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2RheXNRdWl6RW1wdHkuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1RvZGF5c1F1aXpJdGVtLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ub2RheXNRdWl6LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9UYWIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1VzZXJUaXRsZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL01haW5QYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9JbnB1dC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9naW5JbnB1dENvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvTG9naW5CdXR0b25Db250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xvZ2luRm9ybS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhZ2VzL0hvbWVQYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcmNoaXZlUmV0dXJuQnV0dG9uQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcmNoaXZlUXVpei5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXJjaGl2ZVF1aXpDb250YWluZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0FyY2hpdmVRdWl6TW9kYWxJbnB1dENvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXJjaGl2ZVF1aXpNb2RhbEJ1dHRvbkNvbnRhaW5lci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXJjaGl2ZVF1aXpNb2RhbC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQXJjaGl2ZUVkaXRNb2RhbElucHV0Q29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcmNoaXZlRWRpdE1vZGFsQnV0dG9uQ29udGFpbmVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcmNoaXZlRWRpdE1vZGFsLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9BcmNoaXZlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvQXJjaGl2ZVBhZ2UuanN4Iiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5qc3giXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJ2YWwiLCJpc1VuZGVmaW5lZCIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiaXNGdW5jdGlvbiIsImZvckVhY2giLCJvYmoiLCJmbiIsImxlbmd0aCIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwiaXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc1N0cmVhbSIsInBpcGUiLCJpc1VSTFNlYXJjaFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsIndpbmRvdyIsImRvY3VtZW50IiwibWVyZ2UiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsInNsaWNlIiwiYXJndW1lbnRzIiwiZXh0ZW5kIiwiYSIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0IiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfX3Byb3RvX18iLCJyZWFjdElzIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsImUiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsInJvb3QiLCJzZWxmIiwiZ2xvYmFsIiwiX3R5cGVvZiIsIml0ZXJhdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9leHRlbmRzIiwiYXNzaWduIiwic291cmNlIiwiYXBwbHkiLCJ0aGlzIiwiX2dldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfc2V0UHJvdG90eXBlT2YiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIkRhdGUiLCJfY29uc3RydWN0IiwiUGFyZW50IiwiYXJncyIsIkNsYXNzIiwicHVzaCIsIkZ1bmN0aW9uIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWZlcmVuY2VFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfZ2V0IiwicmVjZWl2ZXIiLCJiYXNlIiwiX3N1cGVyUHJvcEJhc2UiLCJkZXNjIiwib2JqZWN0VmFsdWVzIiwibWFwIiwidG9BcnJheSIsIm5vZGVMaXN0IiwiQXJyYXkiLCJ3YXJuIiwibWVzc2FnZSIsInByZXZpb3VzV2Fybk9uY2VNZXNzYWdlcyIsIndhcm5BYm91dERlcHJlY2F0aW9uIiwiZGVwcmVjYXRlZFBhcmFtIiwidXNlSW5zdGVhZCIsImluZGV4T2YiLCJjYWxsSWZGdW5jdGlvbiIsImFyZyIsImhhc1RvUHJvbWlzZUZuIiwidG9Qcm9taXNlIiwiYXNQcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJpc1Byb21pc2UiLCJEaXNtaXNzUmVhc29uIiwiZnJlZXplIiwiY2FuY2VsIiwiYmFja2Ryb3AiLCJjbG9zZSIsImVzYyIsInRpbWVyIiwiaXNFbGVtZW50IiwiZWxlbSIsIkVsZW1lbnQiLCJqcXVlcnkiLCJpc0pxdWVyeUVsZW1lbnQiLCJwcmVmaXgiLCJpdGVtcyIsInN3YWxDbGFzc2VzIiwiaWNvblR5cGVzIiwiZ2V0Q29udGFpbmVyIiwiYm9keSIsInF1ZXJ5U2VsZWN0b3IiLCJjb250YWluZXIiLCJlbGVtZW50QnlTZWxlY3RvciIsInNlbGVjdG9yU3RyaW5nIiwiZWxlbWVudEJ5Q2xhc3MiLCJjbGFzc05hbWUiLCJnZXRQb3B1cCIsInBvcHVwIiwiZ2V0SWNvbnMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaWNvbiIsImdldEljb24iLCJ2aXNpYmxlSWNvbiIsImZpbHRlciIsImlzVmlzaWJsZSIsImdldFRpdGxlIiwidGl0bGUiLCJnZXRDb250ZW50IiwiZ2V0SW1hZ2UiLCJpbWFnZSIsImdldFByb2dyZXNzU3RlcHMiLCJnZXRWYWxpZGF0aW9uTWVzc2FnZSIsImdldENvbmZpcm1CdXR0b24iLCJhY3Rpb25zIiwiY29uZmlybSIsImdldERlbnlCdXR0b24iLCJkZW55IiwiZ2V0TG9hZGVyIiwibG9hZGVyIiwiZ2V0Q2FuY2VsQnV0dG9uIiwiZ2V0QWN0aW9ucyIsImdldEhlYWRlciIsImhlYWRlciIsImdldEZvb3RlciIsImZvb3RlciIsImdldFRpbWVyUHJvZ3Jlc3NCYXIiLCJnZXRDbG9zZUJ1dHRvbiIsImdldEZvY3VzYWJsZUVsZW1lbnRzIiwiZm9jdXNhYmxlRWxlbWVudHNXaXRoVGFiaW5kZXgiLCJzb3J0IiwicGFyc2VJbnQiLCJnZXRBdHRyaWJ1dGUiLCJvdGhlckZvY3VzYWJsZUVsZW1lbnRzIiwiZWwiLCJhcnIiLCJ1bmlxdWVBcnJheSIsImlzTW9kYWwiLCJpc1RvYXN0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJzdGF0ZXMiLCJwcmV2aW91c0JvZHlQYWRkaW5nIiwic2V0SW5uZXJIdG1sIiwiaHRtbCIsInRleHRDb250ZW50IiwicGFyc2VkIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiY2hpbGROb2RlcyIsImNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJoYXNDbGFzcyIsInNwbGl0IiwiYXBwbHlDdXN0b21DbGFzcyIsInBhcmFtcyIsInNob3dDbGFzcyIsInJlbW92ZSIsInJlbW92ZUN1c3RvbUNsYXNzZXMiLCJjdXN0b21DbGFzcyIsImFkZENsYXNzIiwiZ2V0SW5wdXQiLCJpbnB1dFR5cGUiLCJnZXRDaGlsZEJ5Q2xhc3MiLCJjaGVja2JveCIsInJhZGlvIiwicmFuZ2UiLCJpbnB1dCIsIm9sZElucHV0VmFsIiwiZm9jdXNJbnB1dCIsImZvY3VzIiwidG9nZ2xlQ2xhc3MiLCJjb25kaXRpb24iLCJCb29sZWFuIiwiYWRkIiwicmVtb3ZlQ2xhc3MiLCJhcHBseU51bWVyaWNhbFN0eWxlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInNob3ciLCJkaXNwbGF5IiwidW5kZWZpbmVkIiwiaGlkZSIsInNldFN0eWxlIiwicGFyZW50Iiwic2VsZWN0b3IiLCJ0b2dnbGUiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImdldENsaWVudFJlY3RzIiwiaXNTY3JvbGxhYmxlIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiaGFzQ3NzQW5pbWF0aW9uIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImFuaW1EdXJhdGlvbiIsInBhcnNlRmxvYXQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwidHJhbnNEdXJhdGlvbiIsImFuaW1hdGVUaW1lclByb2dyZXNzQmFyIiwicmVzZXQiLCJ0aW1lclByb2dyZXNzQmFyIiwidHJhbnNpdGlvbiIsIndpZHRoIiwic2V0VGltZW91dCIsImlzTm9kZUVudiIsInN3ZWV0SFRNTCIsInF1ZXN0aW9uIiwid2FybmluZyIsImluZm8iLCJzdWNjZXNzIiwiZmlsZSIsInNlbGVjdCIsImxhYmVsIiwidGV4dGFyZWEiLCJyZXNldFZhbGlkYXRpb25NZXNzYWdlIiwiU3dhbCIsImluaXQiLCJvbGRDb250YWluZXIiLCJvbGRDb250YWluZXJFeGlzdGVkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZG9jdW1lbnRFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInJhbmdlT3V0cHV0IiwidGFyZ2V0RWxlbWVudCIsInNldEF0dHJpYnV0ZSIsInRvYXN0Iiwic2V0dXBBY2Nlc3NpYmlsaXR5IiwiZGlyZWN0aW9uIiwicnRsIiwic2V0dXBSVEwiLCJvbmlucHV0Iiwib25jaGFuZ2UiLCJuZXh0U2libGluZyIsInBhcnNlSHRtbFRvQ29udGFpbmVyIiwicGFyYW0iLCJIVE1MRWxlbWVudCIsImhhbmRsZU9iamVjdCIsImhhbmRsZUpxdWVyeUVsZW0iLCJjbG9uZU5vZGUiLCJhbmltYXRpb25FbmRFdmVudCIsInRlc3RFbCIsInRyYW5zRW5kRXZlbnROYW1lcyIsIldlYmtpdEFuaW1hdGlvbiIsIk9BbmltYXRpb24iLCJhbmltYXRpb24iLCJyZW5kZXJBY3Rpb25zIiwiY29uZmlybUJ1dHRvbiIsImRlbnlCdXR0b24iLCJjYW5jZWxCdXR0b24iLCJzaG93Q29uZmlybUJ1dHRvbiIsInNob3dEZW55QnV0dG9uIiwic2hvd0NhbmNlbEJ1dHRvbiIsInJlbmRlckJ1dHRvbiIsImlubmVySFRNTCIsImxvYWRlckh0bWwiLCJidXR0b25zU3R5bGluZyIsInN0eWxlZCIsImNvbmZpcm1CdXR0b25Db2xvciIsImJhY2tncm91bmRDb2xvciIsImRlbnlCdXR0b25Db2xvciIsImNhbmNlbEJ1dHRvbkNvbG9yIiwiaGFuZGxlQnV0dG9uc1N0eWxpbmciLCJyZXZlcnNlQnV0dG9ucyIsImluc2VydEJlZm9yZSIsImJ1dHRvbiIsImJ1dHRvblR5cGUiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInJlbmRlckNvbnRhaW5lciIsImJhY2tncm91bmQiLCJoYW5kbGVCYWNrZHJvcFBhcmFtIiwiYWxsb3dPdXRzaWRlQ2xpY2siLCJwb3NpdGlvbiIsImNlbnRlciIsImhhbmRsZVBvc2l0aW9uUGFyYW0iLCJncm93IiwiZ3Jvd0NsYXNzIiwiaGFuZGxlR3Jvd1BhcmFtIiwicXVldWVTdGVwIiwicmVtb3ZlQXR0cmlidXRlIiwicHJpdmF0ZVByb3BzIiwicHJvbWlzZSIsIldlYWtNYXAiLCJpbm5lclBhcmFtcyIsImRvbUNhY2hlIiwiaW5wdXRUeXBlcyIsInNob3dJbnB1dCIsInJlbmRlcklucHV0VHlwZSIsImlucHV0Q29udGFpbmVyIiwiZ2V0SW5wdXRDb250YWluZXIiLCJzZXRBdHRyaWJ1dGVzIiwiaW5wdXRBdHRyaWJ1dGVzIiwiYXR0ciIsImF0dHJpYnV0ZXMiLCJhdHRyTmFtZSIsInJlbW92ZUF0dHJpYnV0ZXMiLCJzZXRDdXN0b21DbGFzcyIsInNldElucHV0UGxhY2Vob2xkZXIiLCJwbGFjZWhvbGRlciIsImlucHV0UGxhY2Vob2xkZXIiLCJzZXRJbnB1dExhYmVsIiwicHJlcGVuZFRvIiwiaW5wdXRMYWJlbCIsImlkIiwibGFiZWxDbGFzcyIsImlubmVyVGV4dCIsImluc2VydEFkamFjZW50RWxlbWVudCIsImlucHV0Q2xhc3MiLCJ0ZXh0IiwiZW1haWwiLCJwYXNzd29yZCIsIm51bWJlciIsInRlbCIsInVybCIsImlucHV0VmFsdWUiLCJyYW5nZUlucHV0IiwiZGlzYWJsZWQiLCJzZWxlY3RlZCIsImNoZWNrYm94Q29udGFpbmVyIiwiY2hlY2tlZCIsImluaXRpYWxQb3B1cFdpZHRoIiwicG9wdXBQYWRkaW5nIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJNdXRhdGlvbk9ic2VydmVyIiwiY29udGVudFdpZHRoIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZUZpbHRlciIsInJlbmRlckNvbnRlbnQiLCJyZXJlbmRlciIsInJlbmRlcklucHV0IiwiaGlkZUFsbEljb25zIiwiaWNvbnMiLCJhcHBseVN0eWxlcyIsInNldENvbG9yIiwiYWRqdXN0U3VjY2Vzc0ljb25CYWNrZ291bmRDb2xvciIsInBvcHVwQmFja2dyb3VuZENvbG9yIiwic3VjY2Vzc0ljb25QYXJ0cyIsInNldENvbnRlbnQiLCJpY29uSHRtbCIsImljb25Db250ZW50IiwiaWNvbkNvbG9yIiwiY29sb3IiLCJib3JkZXJDb2xvciIsIl9pIiwiX2FyciIsImN1cnJlbnRTdGVwcyIsImdldFF1ZXVlU3RlcCIsInJlbmRlclByb2dyZXNzU3RlcHMiLCJwcm9ncmVzc1N0ZXBzQ29udGFpbmVyIiwicHJvZ3Jlc3NTdGVwcyIsImN1cnJlbnRQcm9ncmVzc1N0ZXAiLCJzdGVwIiwiaW5kZXgiLCJzdGVwRWwiLCJjcmVhdGVTdGVwRWxlbWVudCIsImxpbmVFbCIsInByb2dyZXNzU3RlcHNEaXN0YW5jZSIsImNyZWF0ZUxpbmVFbGVtZW50IiwicmVuZGVySGVhZGVyIiwicmVuZGVySWNvbiIsImltYWdlVXJsIiwiaW1hZ2VBbHQiLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJyZW5kZXJJbWFnZSIsInRpdGxlVGV4dCIsInJlbmRlclRpdGxlIiwiY2xvc2VCdXR0b24iLCJjbG9zZUJ1dHRvbkh0bWwiLCJzaG93Q2xvc2VCdXR0b24iLCJjbG9zZUJ1dHRvbkFyaWFMYWJlbCIsInJlbmRlckNsb3NlQnV0dG9uIiwiYWRkQ2xhc3NlcyIsIm1vZGFsIiwicGFkZGluZyIsInJlbmRlclBvcHVwIiwicmVuZGVyRm9vdGVyIiwiZGlkUmVuZGVyIiwib25SZW5kZXIiLCJjbGlja0NvbmZpcm0iLCJjbGljayIsInNob3dMb2FkaW5nIiwiZmlyZSIsImxvYWRpbmciLCJnbG9iYWxTdGF0ZSIsInJlc3RvcmVBY3RpdmVFbGVtZW50IiwieCIsInNjcm9sbFgiLCJ5Iiwic2Nyb2xsWSIsInJlc3RvcmVGb2N1c1RpbWVvdXQiLCJwcmV2aW91c0FjdGl2ZUVsZW1lbnQiLCJzY3JvbGxUbyIsInN0b3BUaW1lciIsInRpbWVvdXQiLCJ0aW1lclByb2dyZXNzQmFyV2lkdGgiLCJ0aW1lclByb2dyZXNzQmFyRnVsbFdpZHRoIiwidGltZXJQcm9ncmVzc0JhclBlcmNlbnQiLCJzdG9wVGltZXJQcm9ncmVzc0JhciIsInN0b3AiLCJyZXN1bWVUaW1lciIsInJlbWFpbmluZyIsInN0YXJ0IiwiZGVmYXVsdFBhcmFtcyIsImhpZGVDbGFzcyIsImhlaWdodEF1dG8iLCJhbGxvd0VzY2FwZUtleSIsImFsbG93RW50ZXJLZXkiLCJzdG9wS2V5ZG93blByb3BhZ2F0aW9uIiwia2V5ZG93bkxpc3RlbmVyQ2FwdHVyZSIsInByZUNvbmZpcm0iLCJjb25maXJtQnV0dG9uVGV4dCIsImNvbmZpcm1CdXR0b25BcmlhTGFiZWwiLCJkZW55QnV0dG9uVGV4dCIsImRlbnlCdXR0b25BcmlhTGFiZWwiLCJjYW5jZWxCdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uQXJpYUxhYmVsIiwiZm9jdXNDb25maXJtIiwiZm9jdXNEZW55IiwiZm9jdXNDYW5jZWwiLCJzaG93TG9hZGVyT25Db25maXJtIiwiaW5wdXRPcHRpb25zIiwiaW5wdXRBdXRvVHJpbSIsImlucHV0VmFsaWRhdG9yIiwicmV0dXJuSW5wdXRWYWx1ZU9uRGVueSIsInZhbGlkYXRpb25NZXNzYWdlIiwib25CZWZvcmVPcGVuIiwib25PcGVuIiwid2lsbE9wZW4iLCJkaWRPcGVuIiwib25DbG9zZSIsIm9uQWZ0ZXJDbG9zZSIsIndpbGxDbG9zZSIsImRpZENsb3NlIiwib25EZXN0cm95IiwiZGlkRGVzdHJveSIsInNjcm9sbGJhclBhZGRpbmciLCJ1cGRhdGFibGVQYXJhbXMiLCJkZXByZWNhdGVkUGFyYW1zIiwidG9hc3RJbmNvbXBhdGlibGVQYXJhbXMiLCJpc1ZhbGlkUGFyYW1ldGVyIiwicGFyYW1OYW1lIiwiaXNEZXByZWNhdGVkUGFyYW1ldGVyIiwiY2hlY2tJZlBhcmFtSXNWYWxpZCIsImNoZWNrSWZUb2FzdFBhcmFtSXNWYWxpZCIsImNoZWNrSWZQYXJhbUlzRGVwcmVjYXRlZCIsInN0YXRpY01ldGhvZHMiLCJpc1VwZGF0YWJsZVBhcmFtZXRlciIsImFyZ3NUb1BhcmFtcyIsImNsaWNrRGVueSIsImNsaWNrQ2FuY2VsIiwiZ2V0SHRtbENvbnRhaW5lciIsImdldElucHV0TGFiZWwiLCJpc0xvYWRpbmciLCJoYXNBdHRyaWJ1dGUiLCJfbGVuIiwiX2tleSIsIm1peGluIiwibWl4aW5QYXJhbXMiLCJfdGhpcyIsIl9pbmhlcml0cyIsIk1peGluU3dhbCIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX3N1cGVyIiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJxdWV1ZSIsInN0ZXBzIiwicmVzZXRBbmRSZXNvbHZlIiwicXVldWVSZXN1bHQiLCJjYWxsYmFjayIsInRoZW4iLCJkaXNtaXNzIiwiaW5zZXJ0UXVldWVTdGVwIiwic3BsaWNlIiwiZGVsZXRlUXVldWVTdGVwIiwiZW5hYmxlTG9hZGluZyIsImdldFRpbWVyTGVmdCIsInRvZ2dsZVRpbWVyIiwicnVubmluZyIsImluY3JlYXNlVGltZXIiLCJpbmNyZWFzZSIsImlzVGltZXJSdW5uaW5nIiwiaXNSdW5uaW5nIiwiaGlkZUxvYWRpbmciLCJmaXhTY3JvbGxiYXIiLCJpbm5lckhlaWdodCIsInNjcm9sbERpdiIsInNjcm9sbGJhcldpZHRoIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50V2lkdGgiLCJtZWFzdXJlU2Nyb2xsYmFyIiwiYWRkQm90dG9tUGFkZGluZ0ZvclRhbGxQb3B1cHMiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsInBhZGRpbmdCb3R0b20iLCJsb2NrQm9keVNjcm9sbCIsInByZXZlbnRUb3VjaE1vdmUiLCJvbnRvdWNoc3RhcnQiLCJzaG91bGRQcmV2ZW50VG91Y2hNb3ZlIiwib250b3VjaG1vdmUiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImV2ZW50IiwidG91Y2hlcyIsInRvdWNoVHlwZSIsInRhZ05hbWUiLCJpc0lFMTEiLCJNU0lucHV0TWV0aG9kQ29udGV4dCIsImRvY3VtZW50TW9kZSIsImZpeFZlcnRpY2FsUG9zaXRpb25JRSIsIm9mZnNldFRvcCIsImFsaWduSXRlbXMiLCJwcml2YXRlTWV0aG9kcyIsInN3YWxQcm9taXNlUmVzb2x2ZSIsInJlbW92ZVBvcHVwQW5kUmVzZXRTdGF0ZSIsImlzVG9hc3QkJDEiLCJ0cmlnZ2VyRGlkQ2xvc2VBbmREaXNwb3NlIiwia2V5ZG93blRhcmdldCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJrZXlkb3duSGFuZGxlciIsImNhcHR1cmUiLCJrZXlkb3duSGFuZGxlckFkZGVkIiwiaW9zZml4Iiwib2Zmc2V0IiwidG9wIiwic2Nyb2xsVG9wIiwidW5kb0lPU2ZpeCIsImNoaWxkcmVuIiwic2hvd24iLCJyZXNvbHZlVmFsdWUiLCJwcmVwYXJlUmVzb2x2ZVZhbHVlIiwiaGFuZGxlUG9wdXBBbmltYXRpb24iLCJpc0NvbmZpcm1lZCIsImlzRGVuaWVkIiwiaXNEaXNtaXNzZWQiLCJhbmltYXRpb25Jc1N1cHBvcnRlZCIsInJ1bkRpZENsb3NlIiwiYW5pbWF0ZVBvcHVwIiwic3dhbENsb3NlRXZlbnRGaW5pc2hlZENhbGxiYWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9kZXN0cm95Iiwic2V0QnV0dG9uc0Rpc2FibGVkIiwiYnV0dG9ucyIsInNldElucHV0RGlzYWJsZWQiLCJyYWRpb3MiLCJUaW1lciIsImRlbGF5Iiwic3RhcnRlZCIsImNsZWFyVGltZW91dCIsImRlZmF1bHRJbnB1dFZhbGlkYXRvcnMiLCJzdHJpbmciLCJ0ZXN0Iiwic2V0UGFyYW1ldGVycyIsInNldERlZmF1bHRJbnB1dFZhbGlkYXRvcnMiLCJ2YWxpZGF0ZUN1c3RvbVRhcmdldEVsZW1lbnQiLCJqb2luIiwiY3VycmVudEluc3RhbmNlIiwib3BlblBvcHVwIiwiaW5pdGlhbEJvZHlPdmVyZmxvdyIsIm92ZXJmbG93WSIsImFkZENsYXNzZXMkMSIsInNldFNjcm9sbGluZ1Zpc2liaWxpdHkiLCJmaXhTY3JvbGxDb250YWluZXIiLCJoYXlzdGFjayIsIm5lZWRsZSIsImFjdGl2ZUVsZW1lbnQiLCJydW5EaWRPcGVuIiwic3dhbE9wZW5BbmltYXRpb25GaW5pc2hlZCIsIk1TU3RyZWFtIiwicGxhdGZvcm0iLCJtYXhUb3VjaFBvaW50cyIsImlPU2ZpeCIsInNldFByb3BlcnR5IiwiZ2V0Q2hlY2tib3hWYWx1ZSIsImdldFJhZGlvVmFsdWUiLCJnZXRGaWxlVmFsdWUiLCJmaWxlcyIsImhhbmRsZUlucHV0T3B0aW9ucyIsInByb2Nlc3NJbnB1dE9wdGlvbnMiLCJwb3B1bGF0ZUlucHV0T3B0aW9ucyIsImZvcm1hdElucHV0T3B0aW9ucyIsImhhbmRsZUlucHV0VmFsdWUiLCJyZW5kZXJPcHRpb24iLCJvcHRpb25MYWJlbCIsIm9wdGlvblZhbHVlIiwib3B0aW9uIiwiaW5wdXRPcHRpb24iLCJvcHRncm91cCIsInJhZGlvVmFsdWUiLCJyYWRpb0xhYmVsIiwicmFkaW9JbnB1dCIsInJhZGlvTGFiZWxFbGVtZW50IiwiTWFwIiwidmFsdWVGb3JtYXR0ZWQiLCJoYW5kbGVDb25maXJtT3JEZW55V2l0aElucHV0IiwiZ2V0SW5wdXRWYWx1ZSIsImhhbmRsZUlucHV0VmFsaWRhdG9yIiwiY2hlY2tWYWxpZGl0eSIsImVuYWJsZUJ1dHRvbnMiLCJzaG93VmFsaWRhdGlvbk1lc3NhZ2UiLCJkaXNhYmxlSW5wdXQiLCJlbmFibGVJbnB1dCIsImNsb3NlUG9wdXAiLCJzdWNjZWVkV2l0aCIsInByZUNvbmZpcm1WYWx1ZSIsInNldEZvY3VzIiwiaW5jcmVtZW50IiwiZm9jdXNhYmxlRWxlbWVudHMiLCJhcnJvd0tleXNOZXh0QnV0dG9uIiwiYXJyb3dLZXlzUHJldmlvdXNCdXR0b24iLCJlc2NLZXlzIiwiZGlzbWlzc1dpdGgiLCJoYW5kbGVFbnRlciIsImhhbmRsZVRhYiIsImhhbmRsZUFycm93cyIsImhhbmRsZUVzYyIsImlzQ29tcG9zaW5nIiwib3V0ZXJIVE1MIiwiYnRuSW5kZXgiLCJzaGlmdEtleSIsInNpYmxpbmciLCJidXR0b25Ub0ZvY3VzIiwiaGFuZGxlVG9hc3RDbGljayIsIm9uY2xpY2siLCJpZ25vcmVPdXRzaWRlQ2xpY2siLCJoYW5kbGVNb2RhbE1vdXNlZG93biIsIm9ubW91c2Vkb3duIiwib25tb3VzZXVwIiwiaGFuZGxlQ29udGFpbmVyTW91c2Vkb3duIiwiaGFuZGxlTW9kYWxDbGljayIsInByZXBhcmVQYXJhbXMiLCJ1c2VyUGFyYW1zIiwic3dhbFByb21pc2UiLCJzZXQiLCJkaXNhYmxlQnV0dG9ucyIsImhhbmRsZUNvbmZpcm1CdXR0b25DbGljayIsImhhbmRsZURlbnlCdXR0b25DbGljayIsImhhbmRsZUNhbmNlbEJ1dHRvbkNsaWNrIiwiaGFuZGxlUG9wdXBDbGljayIsImFkZEtleWRvd25IYW5kbGVyIiwiaGFuZGxlSW5wdXRPcHRpb25zQW5kVmFsdWUiLCJzZXR1cFRpbWVyIiwiaW5pdEZvY3VzIiwicG9wdWxhdGVEb21DYWNoZSIsImdsb2JhbFN0YXRlJCQxIiwiZm9jdXNCdXR0b24iLCJibHVyQWN0aXZlRWxlbWVudCIsImJsdXIiLCJydW5EaWREZXN0cm95IiwiZGlzcG9zZVN3YWwiLCJ1bnNldFdlYWtNYXBzIiwiaW5zdGFuY2VNZXRob2RzIiwiZGlzYWJsZUxvYWRpbmciLCJjbG9zZU1vZGFsIiwiY2xvc2VUb2FzdCIsImlucHV0ZXJyb3IiLCJfbWFpbiIsInNob3dXYXJuaW5nc0ZvclBhcmFtcyIsInVwZGF0ZSIsInZhbGlkVXBkYXRhYmxlUGFyYW1zIiwidXBkYXRlZFBhcmFtcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZlckRpc3Bvc2FsVGltZXIiLCJTd2VldEFsZXJ0Iiwib3V0ZXJQYXJhbXMiLCJvbkZ1bGZpbGxlZCIsIm9uRmluYWxseSIsIl9jdXJyZW50SW5zdGFuY2UiLCJ2ZXJzaW9uIiwiZmFjdG9yeSIsIlN3ZWV0YWxlcnQyIiwic3dhbCIsInN3ZWV0QWxlcnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY29tbW9uanNHbG9iYWwiLCJnbG9iYWxUaGlzIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsImhhbmRsZXIiLCJvZmYiLCJoIiwibmV3VmFsdWUiLCJjaGFuZ2VkQml0cyIsImNyZWF0ZUNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwiZW1pdHRlciIsIl9wcm90byIsImdldENoaWxkQ29udGV4dCIsIl9yZWYiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJpc1JlcXVpcmVkIiwiQ29uc3VtZXIiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsInN0YXRlIiwiZ2V0VmFsdWUiLCJvblVwZGF0ZSIsIm9ic2VydmVkQml0cyIsInNldFN0YXRlIiwiX3Byb3RvMiIsImNvbXBvbmVudERpZE1vdW50IiwiY29udGV4dCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsIm9wdGlvbnMiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsInJlcyIsInRva2VucyIsInBhdGgiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXhlYyIsImVzY2FwZWQiLCJuZXh0IiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicGFydGlhbCIsInJlcGVhdCIsIm9wdGlvbmFsIiwicGF0dGVybiIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwibWF0Y2hlcyIsImZsYWdzIiwib3B0cyIsImRhdGEiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiaiIsImF0dGFjaEtleXMiLCJyZSIsInNlbnNpdGl2ZSIsInN0cmljdCIsImVuZCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsInBhcnRzIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ0ZXN0MSIsIlN0cmluZyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJmcm9tIiwic3ltYm9scyIsInRvIiwiZyIsInV0aWxzIiwicGFyYW1zU2VyaWFsaXplciIsInNlcmlhbGl6ZWRQYXJhbXMiLCJ2IiwidG9JU09TdHJpbmciLCJoYXNobWFya0luZGV4IiwiX19DQU5DRUxfXyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJhZGFwdGVyIiwiZGVmYXVsdHMiLCJYTUxIdHRwUmVxdWVzdCIsInByb2Nlc3MiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsImNvbW1vbiIsIm1ldGhvZCIsInNldHRsZSIsImNvb2tpZXMiLCJidWlsZFVSTCIsImJ1aWxkRnVsbFBhdGgiLCJwYXJzZUhlYWRlcnMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjcmVhdGVFcnJvciIsImNvbmZpZyIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwidW5lc2NhcGUiLCJBdXRob3JpemF0aW9uIiwiYnRvYSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbFRva2VuIiwiYWJvcnQiLCJzZW5kIiwiZW5oYW5jZUVycm9yIiwiY29kZSIsIkVycm9yIiwiY29uZmlnMSIsImNvbmZpZzIiLCJ2YWx1ZUZyb21Db25maWcyS2V5cyIsIm1lcmdlRGVlcFByb3BlcnRpZXNLZXlzIiwiZGVmYXVsdFRvQ29uZmlnMktleXMiLCJkaXJlY3RNZXJnZUtleXMiLCJnZXRNZXJnZWRWYWx1ZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJwcm9wIiwiYXhpb3NLZXlzIiwib3RoZXJLZXlzIiwiQ2FuY2VsIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwib2JzZXJ2YWJsZSIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJpdGVtIiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJiYXNlNjQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJkZWZhdWx0IiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJmb3IiLCJxIiwidSIsInciLCJ6IiwiQSIsIkIiLCJDIiwiRCIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJFIiwiRiIsInJlZnMiLCJ1cGRhdGVyIiwiRyIsIkgiLCJpc1JlYWN0Q29tcG9uZW50IiwiZm9yY2VVcGRhdGUiLCJJIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJKIiwiY3VycmVudCIsIksiLCJMIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiayIsImYiLCIkJHR5cGVvZiIsIl9vd25lciIsIk8iLCJQIiwiUSIsIlIiLCJwb3AiLCJrZXlQcmVmaXgiLCJmdW5jIiwiY291bnQiLCJTIiwiViIsIlQiLCJVIiwiZG9uZSIsImVzY2FwZSIsIlciLCJhYSIsIlgiLCJOIiwiWSIsIloiLCJiYSIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIkNoaWxkcmVuIiwib25seSIsIkNvbXBvbmVudCIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIm1lbW8iLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJvbkVycm9yIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJwYSIsInFhIiwicmEiLCJzYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwidGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInVhIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhIiwid2EiLCJkZXBlbmRlbmNpZXMiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwiVWEiLCJWYSIsInhsaW5rSHJlZiIsIldhIiwiWGEiLCJTYSIsImlzTmFOIiwiVGEiLCJSYSIsInNldEF0dHJpYnV0ZU5TIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsInBiIiwicWIiLCJ0YWciLCJfZGVidWdPd25lciIsIl9kZWJ1Z1NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJldHVybiIsInJiIiwic2IiLCJub2RlTmFtZSIsInhiIiwiX3ZhbHVlVHJhY2tlciIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwidGIiLCJ5YiIsInpiIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJBYiIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIm93bmVyRG9jdW1lbnQiLCJHYiIsIkZiIiwiSGIiLCJkZWZhdWx0U2VsZWN0ZWQiLCJJYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsIlJiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImFsdGVybmF0ZSIsImVmZmVjdFRhZyIsImVjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJmYyIsImhjIiwiZ2MiLCJpYyIsImpjIiwia2MiLCJsYyIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIm1jIiwibmMiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJvYyIsInBjIiwicWMiLCJ0b3BMZXZlbFR5cGUiLCJuYXRpdmVFdmVudCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJyYyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJzYyIsImNvbnRhaW5lckluZm8iLCJ0YyIsInVjIiwiaGFzIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiTGMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsInNoaWZ0IiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsIk9jIiwiamQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImtkIiwibGQiLCJtZCIsInN1YnN0cmluZyIsIm5kIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJ0cmFjayIsIndiciIsIm9kIiwicGQiLCJpcyIsInFkIiwicmQiLCJzZCIsInRkIiwidWQiLCJ2ZCIsIm5vZGUiLCJ4ZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiRGQiLCJFZCIsIkZkIiwiYXV0b0ZvY3VzIiwiR2QiLCJfX2h0bWwiLCJIZCIsIklkIiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwiTWF0aCIsInJhbmRvbSIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJkaXNwYXRjaENvbmZpZyIsIlVkIiwiX3RhcmdldEluc3QiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImJlIiwiY2UiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJlZSIsImV2ZW50UG9vbCIsImZlIiwiZGVzdHJ1Y3RvciIsImRlIiwiZ2V0UG9vbGVkIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIm5vdyIsImlzVHJ1c3RlZCIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJsZSIsIm1lIiwibmUiLCJvZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJwZSIsInFlIiwia2V5Q29kZSIsImRldGFpbCIsInNlIiwidmUiLCJsb2NhbGUiLCJ3aGljaCIsInRlIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwidWUiLCJ3ZSIsImRhdGUiLCJkYXRldGltZSIsIm1vbnRoIiwic2VhcmNoIiwidGltZSIsIndlZWsiLCJ4ZSIsInllIiwiY2hhbmdlIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJHZSIsImRldGFjaEV2ZW50IiwiSGUiLCJJZSIsImF0dGFjaEV2ZW50IiwiSmUiLCJLZSIsIkxlIiwiTWUiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiTmUiLCJ2aWV3IiwiT2UiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGUiLCJnZXRNb2RpZmllclN0YXRlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJXZSIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJYZSIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiWWUiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJrZiIsIm9uU2VsZWN0IiwibGYiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwibWYiLCJjbGlwYm9hcmREYXRhIiwibmYiLCJvZiIsImNoYXJDb2RlIiwicGYiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwicWYiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwicmYiLCJzZiIsImRhdGFUcmFuc2ZlciIsInRmIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJPZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsInFnIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJyZyIsInNnIiwicmVzcG9uZGVycyIsInRnIiwidWciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImJhc2VRdWV1ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwidmciLCJ3ZyIsInN1c3BlbnNlQ29uZmlnIiwicGF5bG9hZCIsInhnIiwieWciLCJ6ZyIsImNhIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiSmciLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiR2ciLCJIZyIsIklnIiwiS2ciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJMZyIsIk1nIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJOZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsIk9nIiwiUGciLCJfc3RyaW5nUmVmIiwiUWciLCJSZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJTZyIsIlRnIiwiZWxlbWVudFR5cGUiLCJVZyIsImltcGxlbWVudGF0aW9uIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJlaCIsImZoIiwiZ2giLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiZGVzdHJveSIsImRlcHMiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJwZW5kaW5nUHJvcHMiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImdpIiwiaGkiLCJwZW5kaW5nQ29udGV4dCIsIm5pIiwicGkiLCJxaSIsImlpIiwicmV0cnlUaW1lIiwiamkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwibWkiLCJyaSIsInNpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwic3RhY2siLCJCaSIsIldlYWtTZXQiLCJTZXQiLCJDaSIsIkZpIiwiRWkiLCJHaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiSGkiLCJJaSIsIkppIiwiS2kiLCJMaSIsIkRpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJSaSIsIlNpIiwiVGkiLCJVaSIsIlZpIiwiV2kiLCJYaSIsImVsZW1lbnQiLCJZaSIsIlppIiwiJGkiLCJjb21wb25lbnREaWRDYXRjaCIsImFqIiwiY29tcG9uZW50U3RhY2siLCJSaiIsImJqIiwiY2VpbCIsImNqIiwiZGoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJ0aW1lb3V0TXMiLCJ4aiIsInlqIiwiemoiLCJsYXN0RXhwaXJlZFRpbWUiLCJBaiIsImZpcnN0UGVuZGluZ1RpbWUiLCJsYXN0UGluZ2VkVGltZSIsIm5leHRLbm93blBlbmRpbmdMZXZlbCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2FsbGJhY2tOb2RlIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZEV4cGlyYXRpb25UaW1lIiwibGFzdFN1c3BlbmRlZFRpbWUiLCJJaiIsInRpbWVvdXRIYW5kbGUiLCJKaiIsImJ1c3lNaW5EdXJhdGlvbk1zIiwiYnVzeURlbGF5TXMiLCJLaiIsIk1qIiwiTmoiLCJwaW5nQ2FjaGUiLCJPaiIsInViIiwiUGoiLCJYYyIsIlFqIiwiU2oiLCJmaXJzdFN1c3BlbmRlZFRpbWUiLCJyYW5nZUNvdW50Iiwid2IiLCJhY3RpdmVFbGVtZW50RGV0YWNoZWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiVGoiLCJ3ZCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsImhpZGRlbiIsIm9iIiwiWGoiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsInBlbmRpbmdDaGlsZHJlbiIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsIkpjIiwiX2ludGVybmFsUm9vdCIsImdrIiwiaWsiLCJoayIsImprIiwia2siLCJ1bm1vdW50IiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJib29sIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJMYXp5IiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJnZXRVcmkiLCJ1c2UiLCJlamVjdCIsInRyYW5zZm9ybURhdGEiLCJ0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwidGhyb3dJZlJlcXVlc3RlZCIsInJlYXNvbiIsImZucyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJub3JtYWxpemVkTmFtZSIsImlzQXhpb3NFcnJvciIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwiY29sdW1uTnVtYmVyIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwibGluZSIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsInJlcXVlc3RVUkwiLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwiYXBpIiwibG9jYWxzIiwiaXNPbGRJRSIsImF0b2IiLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImNzcyIsIm1lZGlhIiwicmVmZXJlbmNlcyIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwibm9uY2UiLCJpbnNlcnQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImNzc05vZGUiLCJhcHBseVRvVGFnIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlSW5kZXgiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiUmVhY3RSZWR1eENvbnRleHQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiYmF0Y2giLCJmaXJzdCIsImNsZWFyIiwibGlzdGVuZXIiLCJzdWJzY3JpYmUiLCJpc1N1YnNjcmliZWQiLCJwcmV2IiwiU3Vic2NyaXB0aW9uIiwic3RvcmUiLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJhZGROZXN0ZWRTdWIiLCJ0cnlTdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwib25TdGF0ZUNoYW5nZSIsInRyeVVuc3Vic2NyaWJlIiwiY29udGV4dFZhbHVlIiwic3Vic2NyaXB0aW9uIiwicHJldmlvdXNTdGF0ZSIsImdldFN0YXRlIiwiQ29udGV4dCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsInByb3RvIiwiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsIl9yZWYyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlU3RhdGUiLCJnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZSIsImFjdGlvblR5cGUiLCJjb21iaW5lUmVkdWNlcnMiLCJyZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNoYXBlQXNzZXJ0aW9uRXJyb3IiLCJmaW5hbFJlZHVjZXJLZXlzIiwiYXNzZXJ0UmVkdWNlclNoYXBlIiwiaGFzQ2hhbmdlZCIsIm5leHRTdGF0ZSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJlcnJvck1lc3NhZ2UiLCJfZGVmaW5lUHJvcGVydHkiLCJvd25LZXlzIiwiZW51bWVyYWJsZU9ubHkiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJjb21wb3NlIiwiZnVuY3MiLCJyZWR1Y2UiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJtaWRkbGV3YXJlIiwiY3JlYXRlU3RvcmVIb29rIiwidXNlUmVkdXhDb250ZXh0IiwiY3JlYXRlRGlzcGF0Y2hIb29rIiwidXNlU3RvcmUiLCJ1c2VEaXNwYXRjaCIsInJlZkVxdWFsaXR5IiwiY3JlYXRlU2VsZWN0b3JIb29rIiwiZXF1YWxpdHlGbiIsIl91c2VSZWR1eENvbnRleHQiLCJzZWxlY3RlZFN0YXRlIiwiY29udGV4dFN1YiIsImZvcmNlUmVuZGVyIiwibGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciIsImxhdGVzdFNlbGVjdG9yIiwibGF0ZXN0U3RvcmVTdGF0ZSIsImxhdGVzdFNlbGVjdGVkU3RhdGUiLCJzdG9yZVN0YXRlIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3U2VsZWN0ZWRTdGF0ZSIsInVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uIiwibmV3QmF0Y2giLCJubiIsImlzRnJvemVuIiwidG4iLCJfIiwicm4iLCJlbiIsInJldm9jYWJsZSIsInJldm9rZSIsInByb3h5IiwiZGVsZXRlUHJvcGVydHkiLCJ1biIsInVzZVByb3hpZXMiLCJzZXRVc2VQcm94aWVzIiwiYXV0b0ZyZWV6ZSIsInNldEF1dG9GcmVlemUiLCJwcm9kdWNlIiwicHJvZHVjZVdpdGhQYXRjaGVzIiwiY3JlYXRlRHJhZnQiLCJmaW5pc2hEcmFmdCIsImFwcGx5UGF0Y2hlcyIsIm9wIiwiJCIsImFuIiwiZGVmYXVsdEVxdWFsaXR5Q2hlY2siLCJhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbCIsImVxdWFsaXR5Q2hlY2siLCJnZXREZXBlbmRlbmNpZXMiLCJldmVyeSIsImRlcCIsImRlcGVuZGVuY3lUeXBlcyIsIm1lbW9pemUiLCJtZW1vaXplT3B0aW9ucyIsImNyZWF0ZVNlbGVjdG9yQ3JlYXRvciIsImxhc3RBcmdzIiwibGFzdFJlc3VsdCIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ3aXRoRXh0cmFBcmd1bWVudCIsImlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl93cmFwTmF0aXZlU3VwZXIiLCJfY2FjaGUiLCJfaXNOYXRpdmVGdW5jdGlvbiIsIldyYXBwZXIiLCJjb21wb3NlV2l0aERldlRvb2xzIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIiwiTWlkZGxld2FyZUFycmF5IiwiX0FycmF5IiwiX0FycmF5JHByb3RvdHlwZSRjb25jIiwicHJlcGVuZCIsIl9sZW4yIiwiX2tleTIiLCJjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlIiwiX29wdGlvbnMiLCJfb3B0aW9ucyR0aHVuayIsInRodW5rIiwibWlkZGxld2FyZUFycmF5IiwiaW1tdXRhYmxlQ2hlY2siLCJzZXJpYWxpemFibGVDaGVjayIsImlzQm9vbGVhbiIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwiY3JlYXRlQWN0aW9uIiwicHJlcGFyZUFjdGlvbiIsImFjdGlvbkNyZWF0b3IiLCJwcmVwYXJlZCIsImV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrIiwiYnVpbGRlckNhbGxiYWNrIiwiZGVmYXVsdENhc2VSZWR1Y2VyIiwiYWN0aW9uc01hcCIsImFjdGlvbk1hdGNoZXJzIiwiYnVpbGRlciIsImFkZENhc2UiLCJ0eXBlT3JBY3Rpb25DcmVhdG9yIiwiYWRkTWF0Y2hlciIsIm1hdGNoZXIiLCJhZGREZWZhdWx0Q2FzZSIsImFzeW5jSXRlcmF0b3IiLCJwb3B1cE1lc3NhZ2VzIiwiY29udmVydFRhZ1N0cmluZ1RvVGFncyIsInRhZ1N0cmluZyIsInV0aWxGdW5jdGlvbnMiLCJnZXRDdXJyZW50RGF0ZSIsInRvZGF5IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRUb3RhbERheSIsInllYXIiLCJkYXkiLCJOdW1iZXIiLCJsYXllckxpbWl0TWFwIiwiMSIsIjIiLCIzIiwiNCIsIjUiLCI2IiwiNyIsImZpbHRlclRvZGF5c1F1aXoiLCJxdWl6emVzIiwiY3VycmVudERhdGUiLCJjdXJyZW50VG90YWxEYXkiLCJxdWl6IiwibGF5ZXIiLCJxdWl6TGF5ZXIiLCJsYXN0U29sdmVkIiwibGFzdFNvbHZlZFRvdGFsRGF5IiwiZGF0ZURpZmZlcmVuY2UiLCJzb21lIiwiYmFzZUxheWVyIiwiVVJMIiwiZ2V0SGVhZGVycyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJ1c2VySWQiLCJ1c2VyUHciLCJwb3N0IiwidXNlciIsInVzZXJOYW1lIiwiYW5zd2VyIiwidGFncyIsIm5ld1F1aXoiLCJxdWl6SWQiLCJwYXRjaCIsImluaXRpYWxTdGF0ZSIsImV4dHJhUmVkdWNlcnMiLCJfcmVmJCIsIl9yZWYkMiIsIl9yZWYkMyIsInJlZHVjZXJOYW1lcyIsInNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lIiwic2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUiLCJhY3Rpb25DcmVhdG9ycyIsInJlZHVjZXJOYW1lIiwiY2FzZVJlZHVjZXIiLCJwcmVwYXJlQ2FsbGJhY2siLCJtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSIsImFjdGlvbktleSIsImdldFR5cGUkMSIsInByZXBhcmUiLCJtYXBPckJ1aWxkZXJDYWxsYmFjayIsImZpbmFsQWN0aW9uTWF0Y2hlcnMiLCJmaW5hbERlZmF1bHRDYXNlUmVkdWNlciIsImNhc2VSZWR1Y2VycyIsIl9yZWYzIiwiY3IiLCJkcmFmdCIsImNyZWF0ZVJlZHVjZXIiLCJjcmVhdGVTbGljZSIsImxvZ2luIiwicHciLCJxdWl6Rm9ybSIsIm92ZXJsYXkiLCJhZGRpbmciLCJhcmNoaXZlIiwiZWRpdHRpbmciLCJ0b2RheXMiLCJhbnN3ZXJPbiIsInNldFVzZXJOYW1lIiwic2V0TG9naW5JZCIsInNldExvZ2luUHciLCJzZXRUb2tlbiIsInNldFF1aXp6ZXMiLCJhZGRRdWl6IiwicmVtb3ZlUXVpeiIsIl9pZCIsImZpbHRlcmVkUXVpenplcyIsImVkaXRRdWl6IiwiZmluZEluZGV4IiwiY29weSIsInNldFF1aXpGb3JtIiwic2V0T3ZlcmxheSIsInNldEFkZGluZ01vZGFsIiwicmVzZXRRdWl6Rm9ybSIsInNldEFyY2hpdmVRdWl6TW9kYWwiLCJzZXRFZGl0dGluZ01vZGFsIiwiY2xvc2VBbGxNb2RhbCIsInNldFRvZGF5c1F1aXpNb2RhbCIsInNldFRvZGF5c0Fuc3dlck9uIiwic2V0VG9kYXlzUXVpenplcyIsInJlbW92ZVRvZGF5c1F1aXoiLCJsb2FkUXVpenplcyIsImFzeW5jIiwiZ2V0UXVpenplcyIsImNvbmZpZ3VyZVN0b3JlIiwicm9vdFJlZHVjZXIiLCJjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJfcmVmJHJlZHVjZXIiLCJfcmVmJG1pZGRsZXdhcmUiLCJfcmVmJGRldlRvb2xzIiwiZGV2VG9vbHMiLCJfcmVmJHByZWxvYWRlZFN0YXRlIiwiX3JlZiRlbmhhbmNlcnMiLCJlbmhhbmNlcnMiLCJtaWRkbGV3YXJlRW5oYW5jZXIiLCJmaW5hbENvbXBvc2UiLCJ0cmFjZSIsInN0b3JlRW5oYW5jZXJzIiwic2VsZlF1aXpSZWR1Y2VyIiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInBhcnQiLCJhZGRMZWFkaW5nU2xhc2giLCJzdHJpcExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJjcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiZGVjb2RlVVJJIiwiVVJJRXJyb3IiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImFwcGVuZExpc3RlbmVyIiwiaXNBY3RpdmUiLCJub3RpZnlMaXN0ZW5lcnMiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJnZXRIaXN0b3J5U3RhdGUiLCJoaXN0b3J5IiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwiaGFuZGxlUG9wU3RhdGUiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZnJvbUluZGV4IiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwibWF4IiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsImVudHJpZXMiLCJlbnRyeSIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwiY2FuR28iLCJoaXN0b3J5Q29udGV4dCIsImNyZWF0ZU5hbWVkQ29udGV4dCQxIiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJpc0V4YWN0IiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zJGV4YWN0IiwiX29wdGlvbnMkc3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwibWF0Y2hlZCIsIl9jb21waWxlUGF0aCIsImNhY2hlS2V5IiwicGF0aENhY2hlIiwicmVnZXhwIiwiY29tcGlsZVBhdGgkMSIsInZhbHVlcyIsIlJvdXRlIiwiY29udGV4dCQxIiwiY29tcHV0ZWRNYXRjaCIsIl90aGlzJHByb3BzIiwiY3JlYXRlVVJMIiwic3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJTd2l0Y2giLCJ1c2VIaXN0b3J5IiwiQnJvd3NlclJvdXRlciIsInJlc29sdmVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJMaW5rQW5jaG9yIiwiZm9yd2FyZGVkUmVmIiwiaW5uZXJSZWYiLCJuYXZpZ2F0ZSIsIl9vbkNsaWNrIiwicmVzdCIsImV4IiwiaXNNb2RpZmllZEV2ZW50IiwiTGluayIsIl9yZWYyJGNvbXBvbmVudCIsImZvcndhcmRSZWZTaGltJDEiLCJmb3J3YXJkUmVmJDEiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiU3R5bGVTaGVldCIsImlzU3BlZWR5Iiwic3BlZWR5IiwiY3RyIiwiYmVmb3JlIiwicnVsZSIsIl90YWciLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzaGVldCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJpc0ltcG9ydFJ1bGUiLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJmbHVzaCIsInRvU2hlZXQiLCJTaGVldCIsInJ1bGVTaGVldCIsInNlbGVjdG9ycyIsInBhcmVudHMiLCJjb2x1bW4iLCJkZXB0aCIsImF0Iiwic3R5bGlzT3B0aW9ucyIsInN0eWxpcyIsImluc2VydGVkIiwiX2luc2VydCIsIm5vZGVzIiwic3R5bGlzUGx1Z2lucyIsInNlcmlhbGl6ZWQiLCJzaG91bGRDYWNoZSIsInN0eWxlcyIsImNhY2hlIiwicmVnaXN0ZXJlZCIsImdldFJlZ2lzdGVyZWRTdHlsZXMiLCJyZWdpc3RlcmVkU3R5bGVzIiwiY2xhc3NOYW1lcyIsInJhd0NsYXNzTmFtZSIsImluc2VydFN0eWxlcyIsImlzU3RyaW5nVGFnIiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJXZWJraXRMaW5lQ2xhbXAiLCJoeXBoZW5hdGVSZWdleCIsImFuaW1hdGlvblJlZ2V4IiwiaXNDdXN0b21Qcm9wZXJ0eSIsImlzUHJvY2Vzc2FibGVWYWx1ZSIsInByb2Nlc3NTdHlsZU5hbWUiLCJzdHlsZU5hbWUiLCJwMSIsInAyIiwiY3Vyc29yIiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW50ZXJwb2xhdGlvbiIsImNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24iLCJfX2Vtb3Rpb25fc3R5bGVzIiwiYW5pbSIsImludGVycG9sYXRlZCIsImNyZWF0ZVN0cmluZ0Zyb21PYmplY3QiLCJwcmV2aW91c0N1cnNvciIsImNhY2hlZCIsImxhYmVsUGF0dGVybiIsInN0cmluZ01vZGUiLCJzdHJpbmdzIiwicmF3IiwibGFzdEluZGV4IiwiaWRlbnRpZmllck5hbWUiLCJFbW90aW9uQ2FjaGVDb250ZXh0IiwiVGhlbWVDb250ZXh0IiwidHlwZVByb3BOYW1lIiwidGhlbWUiLCJjc3NQcm9wIiwibmV3UHJvcHMiLCJFbW90aW9uIiwiYXJnc0xlbmd0aCIsImNyZWF0ZUVsZW1lbnRBcmdBcnJheSIsImNscyIsInRvQWRkIiwiY3giLCJlbGUiLCJPdmVybGF5IiwiQnV0dG9uIiwiZW1vdGlvbiIsInJpZ2h0IiwiZm9udFNpemUiLCJib3JkZXIiLCJib3JkZXJSYWRpdXMiLCJtYXJnaW4iLCJib3hTaGFkb3ciLCJMb2dpbkZvcm0iLCJyZW1vdmVJdGVtIiwiVGV4dGFyZWEiLCJvbkNoYW5nZSIsInJlc2l6ZSIsIm1hcmdpblRvcCIsImJveFNpemluZyIsIlF1aXpGb3JtSW5wdXRDb250YWluZXIiLCJ1c2VTZWxlY3RvciIsImhhbmRsZUlucHV0Q2hhbmdlIiwiZm9ybVN0YXRlIiwiZmFpbCIsImxheW91dCIsInRyYW5zZm9ybSIsIlF1aXpGb3JtIiwianVzdGlmeUNvbnRlbnQiLCJidW5kbGUiLCJUb2RheXNRdWl6IiwiZmFpbFF1aXoiLCJwYXNzUXVpeiIsImJvdHRvbSIsImJvcmRlckJvdHRvbSIsIm1hcmdpbkJvdHRvbSIsImJveCIsInRleHRBbGlnbiIsIlRvZGF5c1F1aXpFbXB0eSIsImR1bW15UXVpeiIsIlRvZGF5c1F1aXpJdGVtIiwidGFyZ2V0UXVpeiIsInRhYiIsInNlbGVjdGlvbiIsIlRhYiIsIlVzZXJUaXRsZSIsImdldFVzZXJOYW1lIiwiTWFpblBhZ2UiLCJJbnB1dCIsImhhbmRsZUxvZ2luQnV0dG9uQ2xpY2siLCJzZXRJdGVtIiwibG9nbyIsInNyYyIsImFsdCIsIkhvbWVQYWdlIiwiQXJjaGl2ZVJldHVybkJ1dHRvbkNvbnRhaW5lciIsIkFyY2hpdmVRdWl6IiwiQXJjaGl2ZVF1aXpDb250YWluZXIiLCJjb252ZXJ0VGFnc1RvVGFnU3RyaW5nIiwiQXJjaGl2ZVF1aXpNb2RhbElucHV0IiwiQXJjaGl2ZVF1aXpNb2RhbEJ1dHRvbkNvbnRhaW5lciIsImRlbGV0ZVF1aXoiLCJBcmNoaXZlUXVpek1vZGFsIiwiQXJjaGl2ZUVkaXRNb2RhbElucHV0Q29udGFpbmVyIiwiQXJjaGl2ZUVkaXRNb2RhbEJ1dHRvbkNvbnRhaW5lciIsIkFyY2hpdmVFZGl0TW9kYWwiLCJBcmNoaXZlIiwiaXNBcmNoaXZlRmlsbGVkIiwiQXJjaGl2ZVBhZ2UiLCJSZWFjdERvbSIsImdldEVsZW1lbnRCeUlkIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEs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Q0FBT3o5RCxLQUFLLFlBQ1YsR0FBQ3UrRCxHQUFELFlEZFIsT0FFRjN2RixTQUFTNnZGLGVBQWUiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA1Nyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vKmdsb2JhbCB0b1N0cmluZzp0cnVlKi9cblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgdHlwZW9mIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKHZhbCkge1xuICByZXR1cm4gKHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcpICYmICh2YWwgaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKHZhbC5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbCkge1xuICBpZiAodG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiLyohXG4qIHN3ZWV0YWxlcnQyIHYxMC42LjFcbiogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuU3dlZXRhbGVydDIgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cblxuICBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcblxuICAgIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgICByZXR1cm4gbztcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICAgIHRyeSB7XG4gICAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgIGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHtcbiAgICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgICB9IGVsc2Uge1xuICAgICAgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgICBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gICAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgICAgcmV0dXJuIGNhbGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkge1xuICAgIHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkge1xuICAgICAgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLFxuICAgICAgICAgIHJlc3VsdDtcblxuICAgICAgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHtcbiAgICAgICAgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtcblxuICAgICAgICByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkge1xuICAgICAgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgICBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkge1xuICAgICAgX2dldCA9IFJlZmxlY3QuZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICAgICAgICB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmICghYmFzZSkgcmV0dXJuO1xuICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gICAgICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICAgIHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpO1xuICB9XG5cbiAgdmFyIGNvbnNvbGVQcmVmaXggPSAnU3dlZXRBbGVydDI6JztcbiAgLyoqXG4gICAqIEZpbHRlciB0aGUgdW5pcXVlIHZhbHVlcyBpbnRvIGEgbmV3IGFycmF5XG4gICAqIEBwYXJhbSBhcnJcbiAgICovXG5cbiAgdmFyIHVuaXF1ZUFycmF5ID0gZnVuY3Rpb24gdW5pcXVlQXJyYXkoYXJyKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZXN1bHQuaW5kZXhPZihhcnJbaV0pID09PSAtMSkge1xuICAgICAgICByZXN1bHQucHVzaChhcnJbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIC8qKlxuICAgKiBDYXBpdGFsaXplIHRoZSBmaXJzdCBsZXR0ZXIgb2YgYSBzdHJpbmdcbiAgICogQHBhcmFtIHN0clxuICAgKi9cblxuICB2YXIgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyID0gZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cikge1xuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG4gIH07XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBvYmplY3QgdmFsdWVzIChPYmplY3QudmFsdWVzIGlzbid0IHN1cHBvcnRlZCBpbiBJRTExKVxuICAgKiBAcGFyYW0gb2JqXG4gICAqL1xuXG4gIHZhciBvYmplY3RWYWx1ZXMgPSBmdW5jdGlvbiBvYmplY3RWYWx1ZXMob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XTtcbiAgICB9KTtcbiAgfTtcbiAgLyoqXG4gICAqIENvbnZlcnQgTm9kZUxpc3QgdG8gQXJyYXlcbiAgICogQHBhcmFtIG5vZGVMaXN0XG4gICAqL1xuXG4gIHZhciB0b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheShub2RlTGlzdCkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChub2RlTGlzdCk7XG4gIH07XG4gIC8qKlxuICAgKiBTdGFuZGFyZGlzZSBjb25zb2xlIHdhcm5pbmdzXG4gICAqIEBwYXJhbSBtZXNzYWdlXG4gICAqL1xuXG4gIHZhciB3YXJuID0gZnVuY3Rpb24gd2FybihtZXNzYWdlKSB7XG4gICAgY29uc29sZS53YXJuKFwiXCIuY29uY2F0KGNvbnNvbGVQcmVmaXgsIFwiIFwiKS5jb25jYXQobWVzc2FnZSkpO1xuICB9O1xuICAvKipcbiAgICogU3RhbmRhcmRpc2UgY29uc29sZSBlcnJvcnNcbiAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICovXG5cbiAgdmFyIGVycm9yID0gZnVuY3Rpb24gZXJyb3IobWVzc2FnZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJcIi5jb25jYXQoY29uc29sZVByZWZpeCwgXCIgXCIpLmNvbmNhdChtZXNzYWdlKSk7XG4gIH07XG4gIC8qKlxuICAgKiBQcml2YXRlIGdsb2JhbCBzdGF0ZSBmb3IgYHdhcm5PbmNlYFxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG4gIHZhciBwcmV2aW91c1dhcm5PbmNlTWVzc2FnZXMgPSBbXTtcbiAgLyoqXG4gICAqIFNob3cgYSBjb25zb2xlIHdhcm5pbmcsIGJ1dCBvbmx5IGlmIGl0IGhhc24ndCBhbHJlYWR5IGJlZW4gc2hvd25cbiAgICogQHBhcmFtIG1lc3NhZ2VcbiAgICovXG5cbiAgdmFyIHdhcm5PbmNlID0gZnVuY3Rpb24gd2Fybk9uY2UobWVzc2FnZSkge1xuICAgIGlmICghKHByZXZpb3VzV2Fybk9uY2VNZXNzYWdlcy5pbmRleE9mKG1lc3NhZ2UpICE9PSAtMSkpIHtcbiAgICAgIHByZXZpb3VzV2Fybk9uY2VNZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgd2FybihtZXNzYWdlKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBTaG93IGEgb25lLXRpbWUgY29uc29sZSB3YXJuaW5nIGFib3V0IGRlcHJlY2F0ZWQgcGFyYW1zL21ldGhvZHNcbiAgICovXG5cbiAgdmFyIHdhcm5BYm91dERlcHJlY2F0aW9uID0gZnVuY3Rpb24gd2FybkFib3V0RGVwcmVjYXRpb24oZGVwcmVjYXRlZFBhcmFtLCB1c2VJbnN0ZWFkKSB7XG4gICAgd2Fybk9uY2UoXCJcXFwiXCIuY29uY2F0KGRlcHJlY2F0ZWRQYXJhbSwgXCJcXFwiIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBQbGVhc2UgdXNlIFxcXCJcIikuY29uY2F0KHVzZUluc3RlYWQsIFwiXFxcIiBpbnN0ZWFkLlwiKSk7XG4gIH07XG4gIC8qKlxuICAgKiBJZiBgYXJnYCBpcyBhIGZ1bmN0aW9uLCBjYWxsIGl0ICh3aXRoIG5vIGFyZ3VtZW50cyBvciBjb250ZXh0KSBhbmQgcmV0dXJuIHRoZSByZXN1bHQuXG4gICAqIE90aGVyd2lzZSwganVzdCBwYXNzIHRoZSB2YWx1ZSB0aHJvdWdoXG4gICAqIEBwYXJhbSBhcmdcbiAgICovXG5cbiAgdmFyIGNhbGxJZkZ1bmN0aW9uID0gZnVuY3Rpb24gY2FsbElmRnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicgPyBhcmcoKSA6IGFyZztcbiAgfTtcbiAgdmFyIGhhc1RvUHJvbWlzZUZuID0gZnVuY3Rpb24gaGFzVG9Qcm9taXNlRm4oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnLnRvUHJvbWlzZSA9PT0gJ2Z1bmN0aW9uJztcbiAgfTtcbiAgdmFyIGFzUHJvbWlzZSA9IGZ1bmN0aW9uIGFzUHJvbWlzZShhcmcpIHtcbiAgICByZXR1cm4gaGFzVG9Qcm9taXNlRm4oYXJnKSA/IGFyZy50b1Byb21pc2UoKSA6IFByb21pc2UucmVzb2x2ZShhcmcpO1xuICB9O1xuICB2YXIgaXNQcm9taXNlID0gZnVuY3Rpb24gaXNQcm9taXNlKGFyZykge1xuICAgIHJldHVybiBhcmcgJiYgUHJvbWlzZS5yZXNvbHZlKGFyZykgPT09IGFyZztcbiAgfTtcblxuICB2YXIgRGlzbWlzc1JlYXNvbiA9IE9iamVjdC5mcmVlemUoe1xuICAgIGNhbmNlbDogJ2NhbmNlbCcsXG4gICAgYmFja2Ryb3A6ICdiYWNrZHJvcCcsXG4gICAgY2xvc2U6ICdjbG9zZScsXG4gICAgZXNjOiAnZXNjJyxcbiAgICB0aW1lcjogJ3RpbWVyJ1xuICB9KTtcblxuICB2YXIgaXNKcXVlcnlFbGVtZW50ID0gZnVuY3Rpb24gaXNKcXVlcnlFbGVtZW50KGVsZW0pIHtcbiAgICByZXR1cm4gX3R5cGVvZihlbGVtKSA9PT0gJ29iamVjdCcgJiYgZWxlbS5qcXVlcnk7XG4gIH07XG5cbiAgdmFyIGlzRWxlbWVudCA9IGZ1bmN0aW9uIGlzRWxlbWVudChlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0gaW5zdGFuY2VvZiBFbGVtZW50IHx8IGlzSnF1ZXJ5RWxlbWVudChlbGVtKTtcbiAgfTtcblxuICB2YXIgYXJnc1RvUGFyYW1zID0gZnVuY3Rpb24gYXJnc1RvUGFyYW1zKGFyZ3MpIHtcbiAgICB2YXIgcGFyYW1zID0ge307XG5cbiAgICBpZiAoX3R5cGVvZihhcmdzWzBdKSA9PT0gJ29iamVjdCcgJiYgIWlzRWxlbWVudChhcmdzWzBdKSkge1xuICAgICAgX2V4dGVuZHMocGFyYW1zLCBhcmdzWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgWyd0aXRsZScsICdodG1sJywgJ2ljb24nXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lLCBpbmRleCkge1xuICAgICAgICB2YXIgYXJnID0gYXJnc1tpbmRleF07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8IGlzRWxlbWVudChhcmcpKSB7XG4gICAgICAgICAgcGFyYW1zW25hbWVdID0gYXJnO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZXJyb3IoXCJVbmV4cGVjdGVkIHR5cGUgb2YgXCIuY29uY2F0KG5hbWUsIFwiISBFeHBlY3RlZCBcXFwic3RyaW5nXFxcIiBvciBcXFwiRWxlbWVudFxcXCIsIGdvdCBcIikuY29uY2F0KF90eXBlb2YoYXJnKSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyYW1zO1xuICB9O1xuXG4gIHZhciBzd2FsUHJlZml4ID0gJ3N3YWwyLSc7XG4gIHZhciBwcmVmaXggPSBmdW5jdGlvbiBwcmVmaXgoaXRlbXMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKHZhciBpIGluIGl0ZW1zKSB7XG4gICAgICByZXN1bHRbaXRlbXNbaV1dID0gc3dhbFByZWZpeCArIGl0ZW1zW2ldO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHZhciBzd2FsQ2xhc3NlcyA9IHByZWZpeChbJ2NvbnRhaW5lcicsICdzaG93bicsICdoZWlnaHQtYXV0bycsICdpb3NmaXgnLCAncG9wdXAnLCAnbW9kYWwnLCAnbm8tYmFja2Ryb3AnLCAnbm8tdHJhbnNpdGlvbicsICd0b2FzdCcsICd0b2FzdC1zaG93bicsICd0b2FzdC1jb2x1bW4nLCAnc2hvdycsICdoaWRlJywgJ2Nsb3NlJywgJ3RpdGxlJywgJ2hlYWRlcicsICdjb250ZW50JywgJ2h0bWwtY29udGFpbmVyJywgJ2FjdGlvbnMnLCAnY29uZmlybScsICdkZW55JywgJ2NhbmNlbCcsICdmb290ZXInLCAnaWNvbicsICdpY29uLWNvbnRlbnQnLCAnaW1hZ2UnLCAnaW5wdXQnLCAnZmlsZScsICdyYW5nZScsICdzZWxlY3QnLCAncmFkaW8nLCAnY2hlY2tib3gnLCAnbGFiZWwnLCAndGV4dGFyZWEnLCAnaW5wdXRlcnJvcicsICdpbnB1dC1sYWJlbCcsICd2YWxpZGF0aW9uLW1lc3NhZ2UnLCAncHJvZ3Jlc3Mtc3RlcHMnLCAnYWN0aXZlLXByb2dyZXNzLXN0ZXAnLCAncHJvZ3Jlc3Mtc3RlcCcsICdwcm9ncmVzcy1zdGVwLWxpbmUnLCAnbG9hZGVyJywgJ2xvYWRpbmcnLCAnc3R5bGVkJywgJ3RvcCcsICd0b3Atc3RhcnQnLCAndG9wLWVuZCcsICd0b3AtbGVmdCcsICd0b3AtcmlnaHQnLCAnY2VudGVyJywgJ2NlbnRlci1zdGFydCcsICdjZW50ZXItZW5kJywgJ2NlbnRlci1sZWZ0JywgJ2NlbnRlci1yaWdodCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2JvdHRvbS1lbmQnLCAnYm90dG9tLWxlZnQnLCAnYm90dG9tLXJpZ2h0JywgJ2dyb3ctcm93JywgJ2dyb3ctY29sdW1uJywgJ2dyb3ctZnVsbHNjcmVlbicsICdydGwnLCAndGltZXItcHJvZ3Jlc3MtYmFyJywgJ3RpbWVyLXByb2dyZXNzLWJhci1jb250YWluZXInLCAnc2Nyb2xsYmFyLW1lYXN1cmUnLCAnaWNvbi1zdWNjZXNzJywgJ2ljb24td2FybmluZycsICdpY29uLWluZm8nLCAnaWNvbi1xdWVzdGlvbicsICdpY29uLWVycm9yJ10pO1xuICB2YXIgaWNvblR5cGVzID0gcHJlZml4KFsnc3VjY2VzcycsICd3YXJuaW5nJywgJ2luZm8nLCAncXVlc3Rpb24nLCAnZXJyb3InXSk7XG5cbiAgdmFyIGdldENvbnRhaW5lciA9IGZ1bmN0aW9uIGdldENvbnRhaW5lcigpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChzd2FsQ2xhc3Nlcy5jb250YWluZXIpKTtcbiAgfTtcbiAgdmFyIGVsZW1lbnRCeVNlbGVjdG9yID0gZnVuY3Rpb24gZWxlbWVudEJ5U2VsZWN0b3Ioc2VsZWN0b3JTdHJpbmcpIHtcbiAgICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgcmV0dXJuIGNvbnRhaW5lciA/IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yU3RyaW5nKSA6IG51bGw7XG4gIH07XG5cbiAgdmFyIGVsZW1lbnRCeUNsYXNzID0gZnVuY3Rpb24gZWxlbWVudEJ5Q2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRCeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChjbGFzc05hbWUpKTtcbiAgfTtcblxuICB2YXIgZ2V0UG9wdXAgPSBmdW5jdGlvbiBnZXRQb3B1cCgpIHtcbiAgICByZXR1cm4gZWxlbWVudEJ5Q2xhc3Moc3dhbENsYXNzZXMucG9wdXApO1xuICB9O1xuICB2YXIgZ2V0SWNvbnMgPSBmdW5jdGlvbiBnZXRJY29ucygpIHtcbiAgICB2YXIgcG9wdXAgPSBnZXRQb3B1cCgpO1xuICAgIHJldHVybiB0b0FycmF5KHBvcHVwLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIuY29uY2F0KHN3YWxDbGFzc2VzLmljb24pKSk7XG4gIH07XG4gIHZhciBnZXRJY29uID0gZnVuY3Rpb24gZ2V0SWNvbigpIHtcbiAgICB2YXIgdmlzaWJsZUljb24gPSBnZXRJY29ucygpLmZpbHRlcihmdW5jdGlvbiAoaWNvbikge1xuICAgICAgcmV0dXJuIGlzVmlzaWJsZShpY29uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdmlzaWJsZUljb24ubGVuZ3RoID8gdmlzaWJsZUljb25bMF0gOiBudWxsO1xuICB9O1xuICB2YXIgZ2V0VGl0bGUgPSBmdW5jdGlvbiBnZXRUaXRsZSgpIHtcbiAgICByZXR1cm4gZWxlbWVudEJ5Q2xhc3Moc3dhbENsYXNzZXMudGl0bGUpO1xuICB9O1xuICB2YXIgZ2V0Q29udGVudCA9IGZ1bmN0aW9uIGdldENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRCeUNsYXNzKHN3YWxDbGFzc2VzLmNvbnRlbnQpO1xuICB9O1xuICB2YXIgZ2V0SHRtbENvbnRhaW5lciA9IGZ1bmN0aW9uIGdldEh0bWxDb250YWluZXIoKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRCeUNsYXNzKHN3YWxDbGFzc2VzWydodG1sLWNvbnRhaW5lciddKTtcbiAgfTtcbiAgdmFyIGdldEltYWdlID0gZnVuY3Rpb24gZ2V0SW1hZ2UoKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRCeUNsYXNzKHN3YWxDbGFzc2VzLmltYWdlKTtcbiAgfTtcbiAgdmFyIGdldFByb2dyZXNzU3RlcHMgPSBmdW5jdGlvbiBnZXRQcm9ncmVzc1N0ZXBzKCkge1xuICAgIHJldHVybiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlc1sncHJvZ3Jlc3Mtc3RlcHMnXSk7XG4gIH07XG4gIHZhciBnZXRWYWxpZGF0aW9uTWVzc2FnZSA9IGZ1bmN0aW9uIGdldFZhbGlkYXRpb25NZXNzYWdlKCkge1xuICAgIHJldHVybiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlc1sndmFsaWRhdGlvbi1tZXNzYWdlJ10pO1xuICB9O1xuICB2YXIgZ2V0Q29uZmlybUJ1dHRvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1CdXR0b24oKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRCeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChzd2FsQ2xhc3Nlcy5hY3Rpb25zLCBcIiAuXCIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5jb25maXJtKSk7XG4gIH07XG4gIHZhciBnZXREZW55QnV0dG9uID0gZnVuY3Rpb24gZ2V0RGVueUJ1dHRvbigpIHtcbiAgICByZXR1cm4gZWxlbWVudEJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KHN3YWxDbGFzc2VzLmFjdGlvbnMsIFwiIC5cIikuY29uY2F0KHN3YWxDbGFzc2VzLmRlbnkpKTtcbiAgfTtcbiAgdmFyIGdldElucHV0TGFiZWwgPSBmdW5jdGlvbiBnZXRJbnB1dExhYmVsKCkge1xuICAgIHJldHVybiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlc1snaW5wdXQtbGFiZWwnXSk7XG4gIH07XG4gIHZhciBnZXRMb2FkZXIgPSBmdW5jdGlvbiBnZXRMb2FkZXIoKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRCeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChzd2FsQ2xhc3Nlcy5sb2FkZXIpKTtcbiAgfTtcbiAgdmFyIGdldENhbmNlbEJ1dHRvbiA9IGZ1bmN0aW9uIGdldENhbmNlbEJ1dHRvbigpIHtcbiAgICByZXR1cm4gZWxlbWVudEJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KHN3YWxDbGFzc2VzLmFjdGlvbnMsIFwiIC5cIikuY29uY2F0KHN3YWxDbGFzc2VzLmNhbmNlbCkpO1xuICB9O1xuICB2YXIgZ2V0QWN0aW9ucyA9IGZ1bmN0aW9uIGdldEFjdGlvbnMoKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRCeUNsYXNzKHN3YWxDbGFzc2VzLmFjdGlvbnMpO1xuICB9O1xuICB2YXIgZ2V0SGVhZGVyID0gZnVuY3Rpb24gZ2V0SGVhZGVyKCkge1xuICAgIHJldHVybiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlcy5oZWFkZXIpO1xuICB9O1xuICB2YXIgZ2V0Rm9vdGVyID0gZnVuY3Rpb24gZ2V0Rm9vdGVyKCkge1xuICAgIHJldHVybiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlcy5mb290ZXIpO1xuICB9O1xuICB2YXIgZ2V0VGltZXJQcm9ncmVzc0JhciA9IGZ1bmN0aW9uIGdldFRpbWVyUHJvZ3Jlc3NCYXIoKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRCeUNsYXNzKHN3YWxDbGFzc2VzWyd0aW1lci1wcm9ncmVzcy1iYXInXSk7XG4gIH07XG4gIHZhciBnZXRDbG9zZUJ1dHRvbiA9IGZ1bmN0aW9uIGdldENsb3NlQnV0dG9uKCkge1xuICAgIHJldHVybiBlbGVtZW50QnlDbGFzcyhzd2FsQ2xhc3Nlcy5jbG9zZSk7XG4gIH07IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qa3VwL2ZvY3VzYWJsZS9ibG9iL21hc3Rlci9pbmRleC5qc1xuXG4gIHZhciBmb2N1c2FibGUgPSBcIlxcbiAgYVtocmVmXSxcXG4gIGFyZWFbaHJlZl0sXFxuICBpbnB1dDpub3QoW2Rpc2FibGVkXSksXFxuICBzZWxlY3Q6bm90KFtkaXNhYmxlZF0pLFxcbiAgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLFxcbiAgYnV0dG9uOm5vdChbZGlzYWJsZWRdKSxcXG4gIGlmcmFtZSxcXG4gIG9iamVjdCxcXG4gIGVtYmVkLFxcbiAgW3RhYmluZGV4PVxcXCIwXFxcIl0sXFxuICBbY29udGVudGVkaXRhYmxlXSxcXG4gIGF1ZGlvW2NvbnRyb2xzXSxcXG4gIHZpZGVvW2NvbnRyb2xzXSxcXG4gIHN1bW1hcnlcXG5cIjtcbiAgdmFyIGdldEZvY3VzYWJsZUVsZW1lbnRzID0gZnVuY3Rpb24gZ2V0Rm9jdXNhYmxlRWxlbWVudHMoKSB7XG4gICAgdmFyIGZvY3VzYWJsZUVsZW1lbnRzV2l0aFRhYmluZGV4ID0gdG9BcnJheShnZXRQb3B1cCgpLnF1ZXJ5U2VsZWN0b3JBbGwoJ1t0YWJpbmRleF06bm90KFt0YWJpbmRleD1cIi0xXCJdKTpub3QoW3RhYmluZGV4PVwiMFwiXSknKSkgLy8gc29ydCBhY2NvcmRpbmcgdG8gdGFiaW5kZXhcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgYSA9IHBhcnNlSW50KGEuZ2V0QXR0cmlidXRlKCd0YWJpbmRleCcpKTtcbiAgICAgIGIgPSBwYXJzZUludChiLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSk7XG5cbiAgICAgIGlmIChhID4gYikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gMDtcbiAgICB9KTtcbiAgICB2YXIgb3RoZXJGb2N1c2FibGVFbGVtZW50cyA9IHRvQXJyYXkoZ2V0UG9wdXAoKS5xdWVyeVNlbGVjdG9yQWxsKGZvY3VzYWJsZSkpLmZpbHRlcihmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JykgIT09ICctMSc7XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuaXF1ZUFycmF5KGZvY3VzYWJsZUVsZW1lbnRzV2l0aFRhYmluZGV4LmNvbmNhdChvdGhlckZvY3VzYWJsZUVsZW1lbnRzKSkuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGlzVmlzaWJsZShlbCk7XG4gICAgfSk7XG4gIH07XG4gIHZhciBpc01vZGFsID0gZnVuY3Rpb24gaXNNb2RhbCgpIHtcbiAgICByZXR1cm4gIWlzVG9hc3QoKSAmJiAhZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuY29udGFpbnMoc3dhbENsYXNzZXNbJ25vLWJhY2tkcm9wJ10pO1xuICB9O1xuICB2YXIgaXNUb2FzdCA9IGZ1bmN0aW9uIGlzVG9hc3QoKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKHN3YWxDbGFzc2VzWyd0b2FzdC1zaG93biddKTtcbiAgfTtcbiAgdmFyIGlzTG9hZGluZyA9IGZ1bmN0aW9uIGlzTG9hZGluZygpIHtcbiAgICByZXR1cm4gZ2V0UG9wdXAoKS5oYXNBdHRyaWJ1dGUoJ2RhdGEtbG9hZGluZycpO1xuICB9O1xuXG4gIHZhciBzdGF0ZXMgPSB7XG4gICAgcHJldmlvdXNCb2R5UGFkZGluZzogbnVsbFxuICB9O1xuICB2YXIgc2V0SW5uZXJIdG1sID0gZnVuY3Rpb24gc2V0SW5uZXJIdG1sKGVsZW0sIGh0bWwpIHtcbiAgICAvLyAjMTkyNlxuICAgIGVsZW0udGV4dENvbnRlbnQgPSAnJztcblxuICAgIGlmIChodG1sKSB7XG4gICAgICB2YXIgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcoaHRtbCwgXCJ0ZXh0L2h0bWxcIik7XG4gICAgICB0b0FycmF5KHBhcnNlZC5xdWVyeVNlbGVjdG9yKCdoZWFkJykuY2hpbGROb2RlcykuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgZWxlbS5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICB9KTtcbiAgICAgIHRvQXJyYXkocGFyc2VkLnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5jaGlsZE5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBlbGVtLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGhhc0NsYXNzID0gZnVuY3Rpb24gaGFzQ2xhc3MoZWxlbSwgY2xhc3NOYW1lKSB7XG4gICAgaWYgKCFjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgY2xhc3NMaXN0ID0gY2xhc3NOYW1lLnNwbGl0KC9cXHMrLyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFlbGVtLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc0xpc3RbaV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICB2YXIgcmVtb3ZlQ3VzdG9tQ2xhc3NlcyA9IGZ1bmN0aW9uIHJlbW92ZUN1c3RvbUNsYXNzZXMoZWxlbSwgcGFyYW1zKSB7XG4gICAgdG9BcnJheShlbGVtLmNsYXNzTGlzdCkuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAoIShvYmplY3RWYWx1ZXMoc3dhbENsYXNzZXMpLmluZGV4T2YoY2xhc3NOYW1lKSAhPT0gLTEpICYmICEob2JqZWN0VmFsdWVzKGljb25UeXBlcykuaW5kZXhPZihjbGFzc05hbWUpICE9PSAtMSkgJiYgIShvYmplY3RWYWx1ZXMocGFyYW1zLnNob3dDbGFzcykuaW5kZXhPZihjbGFzc05hbWUpICE9PSAtMSkpIHtcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGFwcGx5Q3VzdG9tQ2xhc3MgPSBmdW5jdGlvbiBhcHBseUN1c3RvbUNsYXNzKGVsZW0sIHBhcmFtcywgY2xhc3NOYW1lKSB7XG4gICAgcmVtb3ZlQ3VzdG9tQ2xhc3NlcyhlbGVtLCBwYXJhbXMpO1xuXG4gICAgaWYgKHBhcmFtcy5jdXN0b21DbGFzcyAmJiBwYXJhbXMuY3VzdG9tQ2xhc3NbY2xhc3NOYW1lXSkge1xuICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuY3VzdG9tQ2xhc3NbY2xhc3NOYW1lXSAhPT0gJ3N0cmluZycgJiYgIXBhcmFtcy5jdXN0b21DbGFzc1tjbGFzc05hbWVdLmZvckVhY2gpIHtcbiAgICAgICAgcmV0dXJuIHdhcm4oXCJJbnZhbGlkIHR5cGUgb2YgY3VzdG9tQ2xhc3MuXCIuY29uY2F0KGNsYXNzTmFtZSwgXCIhIEV4cGVjdGVkIHN0cmluZyBvciBpdGVyYWJsZSBvYmplY3QsIGdvdCBcXFwiXCIpLmNvbmNhdChfdHlwZW9mKHBhcmFtcy5jdXN0b21DbGFzc1tjbGFzc05hbWVdKSwgXCJcXFwiXCIpKTtcbiAgICAgIH1cblxuICAgICAgYWRkQ2xhc3MoZWxlbSwgcGFyYW1zLmN1c3RvbUNsYXNzW2NsYXNzTmFtZV0pO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZ2V0SW5wdXQoY29udGVudCwgaW5wdXRUeXBlKSB7XG4gICAgaWYgKCFpbnB1dFR5cGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN3aXRjaCAoaW5wdXRUeXBlKSB7XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgY2FzZSAnZmlsZSc6XG4gICAgICAgIHJldHVybiBnZXRDaGlsZEJ5Q2xhc3MoY29udGVudCwgc3dhbENsYXNzZXNbaW5wdXRUeXBlXSk7XG5cbiAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoc3dhbENsYXNzZXMuY2hlY2tib3gsIFwiIGlucHV0XCIpKTtcblxuICAgICAgY2FzZSAncmFkaW8nOlxuICAgICAgICByZXR1cm4gY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChzd2FsQ2xhc3Nlcy5yYWRpbywgXCIgaW5wdXQ6Y2hlY2tlZFwiKSkgfHwgY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChzd2FsQ2xhc3Nlcy5yYWRpbywgXCIgaW5wdXQ6Zmlyc3QtY2hpbGRcIikpO1xuXG4gICAgICBjYXNlICdyYW5nZSc6XG4gICAgICAgIHJldHVybiBjb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KHN3YWxDbGFzc2VzLnJhbmdlLCBcIiBpbnB1dFwiKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBnZXRDaGlsZEJ5Q2xhc3MoY29udGVudCwgc3dhbENsYXNzZXMuaW5wdXQpO1xuICAgIH1cbiAgfVxuICB2YXIgZm9jdXNJbnB1dCA9IGZ1bmN0aW9uIGZvY3VzSW5wdXQoaW5wdXQpIHtcbiAgICBpbnB1dC5mb2N1cygpOyAvLyBwbGFjZSBjdXJzb3IgYXQgZW5kIG9mIHRleHQgaW4gdGV4dCBpbnB1dFxuXG4gICAgaWYgKGlucHV0LnR5cGUgIT09ICdmaWxlJykge1xuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjM0NTkxNVxuICAgICAgdmFyIHZhbCA9IGlucHV0LnZhbHVlO1xuICAgICAgaW5wdXQudmFsdWUgPSAnJztcbiAgICAgIGlucHV0LnZhbHVlID0gdmFsO1xuICAgIH1cbiAgfTtcbiAgdmFyIHRvZ2dsZUNsYXNzID0gZnVuY3Rpb24gdG9nZ2xlQ2xhc3ModGFyZ2V0LCBjbGFzc0xpc3QsIGNvbmRpdGlvbikge1xuICAgIGlmICghdGFyZ2V0IHx8ICFjbGFzc0xpc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNsYXNzTGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNsYXNzTGlzdCA9IGNsYXNzTGlzdC5zcGxpdCgvXFxzKy8pLmZpbHRlcihCb29sZWFuKTtcbiAgICB9XG5cbiAgICBjbGFzc0xpc3QuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICBpZiAodGFyZ2V0LmZvckVhY2gpIHtcbiAgICAgICAgdGFyZ2V0LmZvckVhY2goZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICBjb25kaXRpb24gPyBlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKSA6IGVsZW0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmRpdGlvbiA/IHRhcmdldC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSkgOiB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICB2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyh0YXJnZXQsIGNsYXNzTGlzdCkge1xuICAgIHRvZ2dsZUNsYXNzKHRhcmdldCwgY2xhc3NMaXN0LCB0cnVlKTtcbiAgfTtcbiAgdmFyIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3ModGFyZ2V0LCBjbGFzc0xpc3QpIHtcbiAgICB0b2dnbGVDbGFzcyh0YXJnZXQsIGNsYXNzTGlzdCwgZmFsc2UpO1xuICB9O1xuICB2YXIgZ2V0Q2hpbGRCeUNsYXNzID0gZnVuY3Rpb24gZ2V0Q2hpbGRCeUNsYXNzKGVsZW0sIGNsYXNzTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaGFzQ2xhc3MoZWxlbS5jaGlsZE5vZGVzW2ldLCBjbGFzc05hbWUpKSB7XG4gICAgICAgIHJldHVybiBlbGVtLmNoaWxkTm9kZXNbaV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgYXBwbHlOdW1lcmljYWxTdHlsZSA9IGZ1bmN0aW9uIGFwcGx5TnVtZXJpY2FsU3R5bGUoZWxlbSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIHx8IHBhcnNlSW50KHZhbHVlKSA9PT0gMCkge1xuICAgICAgZWxlbS5zdHlsZVtwcm9wZXJ0eV0gPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQodmFsdWUsIFwicHhcIikgOiB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShwcm9wZXJ0eSk7XG4gICAgfVxuICB9O1xuICB2YXIgc2hvdyA9IGZ1bmN0aW9uIHNob3coZWxlbSkge1xuICAgIHZhciBkaXNwbGF5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnZmxleCc7XG4gICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gZGlzcGxheTtcbiAgfTtcbiAgdmFyIGhpZGUgPSBmdW5jdGlvbiBoaWRlKGVsZW0pIHtcbiAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH07XG4gIHZhciBzZXRTdHlsZSA9IGZ1bmN0aW9uIHNldFN0eWxlKHBhcmVudCwgc2VsZWN0b3IsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIHZhciBlbCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcblxuICAgIGlmIChlbCkge1xuICAgICAgZWwuc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuICB9O1xuICB2YXIgdG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKGVsZW0sIGNvbmRpdGlvbiwgZGlzcGxheSkge1xuICAgIGNvbmRpdGlvbiA/IHNob3coZWxlbSwgZGlzcGxheSkgOiBoaWRlKGVsZW0pO1xuICB9OyAvLyBib3Jyb3dlZCBmcm9tIGpxdWVyeSAkKGVsZW0pLmlzKCc6dmlzaWJsZScpIGltcGxlbWVudGF0aW9uXG5cbiAgdmFyIGlzVmlzaWJsZSA9IGZ1bmN0aW9uIGlzVmlzaWJsZShlbGVtKSB7XG4gICAgcmV0dXJuICEhKGVsZW0gJiYgKGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkpO1xuICB9O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG4gIHZhciBpc1Njcm9sbGFibGUgPSBmdW5jdGlvbiBpc1Njcm9sbGFibGUoZWxlbSkge1xuICAgIHJldHVybiAhIShlbGVtLnNjcm9sbEhlaWdodCA+IGVsZW0uY2xpZW50SGVpZ2h0KTtcbiAgfTsgLy8gYm9ycm93ZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDYzNTIxMTlcblxuICB2YXIgaGFzQ3NzQW5pbWF0aW9uID0gZnVuY3Rpb24gaGFzQ3NzQW5pbWF0aW9uKGVsZW0pIHtcbiAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtKTtcbiAgICB2YXIgYW5pbUR1cmF0aW9uID0gcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdhbmltYXRpb24tZHVyYXRpb24nKSB8fCAnMCcpO1xuICAgIHZhciB0cmFuc0R1cmF0aW9uID0gcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2l0aW9uLWR1cmF0aW9uJykgfHwgJzAnKTtcbiAgICByZXR1cm4gYW5pbUR1cmF0aW9uID4gMCB8fCB0cmFuc0R1cmF0aW9uID4gMDtcbiAgfTtcbiAgdmFyIGNvbnRhaW5zID0gZnVuY3Rpb24gY29udGFpbnMoaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgIGlmICh0eXBlb2YgaGF5c3RhY2suY29udGFpbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBoYXlzdGFjay5jb250YWlucyhuZWVkbGUpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGFuaW1hdGVUaW1lclByb2dyZXNzQmFyID0gZnVuY3Rpb24gYW5pbWF0ZVRpbWVyUHJvZ3Jlc3NCYXIodGltZXIpIHtcbiAgICB2YXIgcmVzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuICAgIHZhciB0aW1lclByb2dyZXNzQmFyID0gZ2V0VGltZXJQcm9ncmVzc0JhcigpO1xuXG4gICAgaWYgKGlzVmlzaWJsZSh0aW1lclByb2dyZXNzQmFyKSkge1xuICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgIHRpbWVyUHJvZ3Jlc3NCYXIuc3R5bGUudHJhbnNpdGlvbiA9ICdub25lJztcbiAgICAgICAgdGltZXJQcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgIH1cblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRpbWVyUHJvZ3Jlc3NCYXIuc3R5bGUudHJhbnNpdGlvbiA9IFwid2lkdGggXCIuY29uY2F0KHRpbWVyIC8gMTAwMCwgXCJzIGxpbmVhclwiKTtcbiAgICAgICAgdGltZXJQcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9ICcwJSc7XG4gICAgICB9LCAxMCk7XG4gICAgfVxuICB9O1xuICB2YXIgc3RvcFRpbWVyUHJvZ3Jlc3NCYXIgPSBmdW5jdGlvbiBzdG9wVGltZXJQcm9ncmVzc0JhcigpIHtcbiAgICB2YXIgdGltZXJQcm9ncmVzc0JhciA9IGdldFRpbWVyUHJvZ3Jlc3NCYXIoKTtcbiAgICB2YXIgdGltZXJQcm9ncmVzc0JhcldpZHRoID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUodGltZXJQcm9ncmVzc0Jhcikud2lkdGgpO1xuICAgIHRpbWVyUHJvZ3Jlc3NCYXIuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3RyYW5zaXRpb24nKTtcbiAgICB0aW1lclByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgIHZhciB0aW1lclByb2dyZXNzQmFyRnVsbFdpZHRoID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUodGltZXJQcm9ncmVzc0Jhcikud2lkdGgpO1xuICAgIHZhciB0aW1lclByb2dyZXNzQmFyUGVyY2VudCA9IHBhcnNlSW50KHRpbWVyUHJvZ3Jlc3NCYXJXaWR0aCAvIHRpbWVyUHJvZ3Jlc3NCYXJGdWxsV2lkdGggKiAxMDApO1xuICAgIHRpbWVyUHJvZ3Jlc3NCYXIuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3RyYW5zaXRpb24nKTtcbiAgICB0aW1lclByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gXCJcIi5jb25jYXQodGltZXJQcm9ncmVzc0JhclBlcmNlbnQsIFwiJVwiKTtcbiAgfTtcblxuICAvLyBEZXRlY3QgTm9kZSBlbnZcbiAgdmFyIGlzTm9kZUVudiA9IGZ1bmN0aW9uIGlzTm9kZUVudigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJztcbiAgfTtcblxuICB2YXIgc3dlZXRIVE1MID0gXCJcXG4gPGRpdiBhcmlhLWxhYmVsbGVkYnk9XFxcIlwiLmNvbmNhdChzd2FsQ2xhc3Nlcy50aXRsZSwgXCJcXFwiIGFyaWEtZGVzY3JpYmVkYnk9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXMuY29udGVudCwgXCJcXFwiIGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLnBvcHVwLCBcIlxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj5cXG4gICA8ZGl2IGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLmhlYWRlciwgXCJcXFwiPlxcbiAgICAgPHVsIGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzWydwcm9ncmVzcy1zdGVwcyddLCBcIlxcXCI+PC91bD5cXG4gICAgIDxkaXYgY2xhc3M9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXMuaWNvbiwgXCIgXCIpLmNvbmNhdChpY29uVHlwZXMuZXJyb3IsIFwiXFxcIj48L2Rpdj5cXG4gICAgIDxkaXYgY2xhc3M9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXMuaWNvbiwgXCIgXCIpLmNvbmNhdChpY29uVHlwZXMucXVlc3Rpb24sIFwiXFxcIj48L2Rpdj5cXG4gICAgIDxkaXYgY2xhc3M9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXMuaWNvbiwgXCIgXCIpLmNvbmNhdChpY29uVHlwZXMud2FybmluZywgXCJcXFwiPjwvZGl2PlxcbiAgICAgPGRpdiBjbGFzcz1cXFwiXCIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5pY29uLCBcIiBcIikuY29uY2F0KGljb25UeXBlcy5pbmZvLCBcIlxcXCI+PC9kaXY+XFxuICAgICA8ZGl2IGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLmljb24sIFwiIFwiKS5jb25jYXQoaWNvblR5cGVzLnN1Y2Nlc3MsIFwiXFxcIj48L2Rpdj5cXG4gICAgIDxpbWcgY2xhc3M9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXMuaW1hZ2UsIFwiXFxcIiAvPlxcbiAgICAgPGgyIGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLnRpdGxlLCBcIlxcXCIgaWQ9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXMudGl0bGUsIFwiXFxcIj48L2gyPlxcbiAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLmNsb3NlLCBcIlxcXCI+PC9idXR0b24+XFxuICAgPC9kaXY+XFxuICAgPGRpdiBjbGFzcz1cXFwiXCIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5jb250ZW50LCBcIlxcXCI+XFxuICAgICA8ZGl2IGlkPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLmNvbnRlbnQsIFwiXFxcIiBjbGFzcz1cXFwiXCIpLmNvbmNhdChzd2FsQ2xhc3Nlc1snaHRtbC1jb250YWluZXInXSwgXCJcXFwiPjwvZGl2PlxcbiAgICAgPGlucHV0IGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLmlucHV0LCBcIlxcXCIgLz5cXG4gICAgIDxpbnB1dCB0eXBlPVxcXCJmaWxlXFxcIiBjbGFzcz1cXFwiXCIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5maWxlLCBcIlxcXCIgLz5cXG4gICAgIDxkaXYgY2xhc3M9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXMucmFuZ2UsIFwiXFxcIj5cXG4gICAgICAgPGlucHV0IHR5cGU9XFxcInJhbmdlXFxcIiAvPlxcbiAgICAgICA8b3V0cHV0Pjwvb3V0cHV0PlxcbiAgICAgPC9kaXY+XFxuICAgICA8c2VsZWN0IGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLnNlbGVjdCwgXCJcXFwiPjwvc2VsZWN0PlxcbiAgICAgPGRpdiBjbGFzcz1cXFwiXCIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5yYWRpbywgXCJcXFwiPjwvZGl2PlxcbiAgICAgPGxhYmVsIGZvcj1cXFwiXCIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5jaGVja2JveCwgXCJcXFwiIGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLmNoZWNrYm94LCBcIlxcXCI+XFxuICAgICAgIDxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgLz5cXG4gICAgICAgPHNwYW4gY2xhc3M9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXMubGFiZWwsIFwiXFxcIj48L3NwYW4+XFxuICAgICA8L2xhYmVsPlxcbiAgICAgPHRleHRhcmVhIGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLnRleHRhcmVhLCBcIlxcXCI+PC90ZXh0YXJlYT5cXG4gICAgIDxkaXYgY2xhc3M9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXNbJ3ZhbGlkYXRpb24tbWVzc2FnZSddLCBcIlxcXCIgaWQ9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXNbJ3ZhbGlkYXRpb24tbWVzc2FnZSddLCBcIlxcXCI+PC9kaXY+XFxuICAgPC9kaXY+XFxuICAgPGRpdiBjbGFzcz1cXFwiXCIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5hY3Rpb25zLCBcIlxcXCI+XFxuICAgICA8ZGl2IGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLmxvYWRlciwgXCJcXFwiPjwvZGl2PlxcbiAgICAgPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzLmNvbmZpcm0sIFwiXFxcIj48L2J1dHRvbj5cXG4gICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiXCIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5kZW55LCBcIlxcXCI+PC9idXR0b24+XFxuICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXMuY2FuY2VsLCBcIlxcXCI+PC9idXR0b24+XFxuICAgPC9kaXY+XFxuICAgPGRpdiBjbGFzcz1cXFwiXCIpLmNvbmNhdChzd2FsQ2xhc3Nlcy5mb290ZXIsIFwiXFxcIj48L2Rpdj5cXG4gICA8ZGl2IGNsYXNzPVxcXCJcIikuY29uY2F0KHN3YWxDbGFzc2VzWyd0aW1lci1wcm9ncmVzcy1iYXItY29udGFpbmVyJ10sIFwiXFxcIj5cXG4gICAgIDxkaXYgY2xhc3M9XFxcIlwiKS5jb25jYXQoc3dhbENsYXNzZXNbJ3RpbWVyLXByb2dyZXNzLWJhciddLCBcIlxcXCI+PC9kaXY+XFxuICAgPC9kaXY+XFxuIDwvZGl2PlxcblwiKS5yZXBsYWNlKC8oXnxcXG4pXFxzKi9nLCAnJyk7XG5cbiAgdmFyIHJlc2V0T2xkQ29udGFpbmVyID0gZnVuY3Rpb24gcmVzZXRPbGRDb250YWluZXIoKSB7XG4gICAgdmFyIG9sZENvbnRhaW5lciA9IGdldENvbnRhaW5lcigpO1xuXG4gICAgaWYgKCFvbGRDb250YWluZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBvbGRDb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvbGRDb250YWluZXIpO1xuICAgIHJlbW92ZUNsYXNzKFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGRvY3VtZW50LmJvZHldLCBbc3dhbENsYXNzZXNbJ25vLWJhY2tkcm9wJ10sIHN3YWxDbGFzc2VzWyd0b2FzdC1zaG93biddLCBzd2FsQ2xhc3Nlc1snaGFzLWNvbHVtbiddXSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgdmFyIG9sZElucHV0VmFsOyAvLyBJRTExIHdvcmthcm91bmQsIHNlZSAjMTEwOSBmb3IgZGV0YWlsc1xuXG4gIHZhciByZXNldFZhbGlkYXRpb25NZXNzYWdlID0gZnVuY3Rpb24gcmVzZXRWYWxpZGF0aW9uTWVzc2FnZShlKSB7XG4gICAgaWYgKFN3YWwuaXNWaXNpYmxlKCkgJiYgb2xkSW5wdXRWYWwgIT09IGUudGFyZ2V0LnZhbHVlKSB7XG4gICAgICBTd2FsLnJlc2V0VmFsaWRhdGlvbk1lc3NhZ2UoKTtcbiAgICB9XG5cbiAgICBvbGRJbnB1dFZhbCA9IGUudGFyZ2V0LnZhbHVlO1xuICB9O1xuXG4gIHZhciBhZGRJbnB1dENoYW5nZUxpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZElucHV0Q2hhbmdlTGlzdGVuZXJzKCkge1xuICAgIHZhciBjb250ZW50ID0gZ2V0Q29udGVudCgpO1xuICAgIHZhciBpbnB1dCA9IGdldENoaWxkQnlDbGFzcyhjb250ZW50LCBzd2FsQ2xhc3Nlcy5pbnB1dCk7XG4gICAgdmFyIGZpbGUgPSBnZXRDaGlsZEJ5Q2xhc3MoY29udGVudCwgc3dhbENsYXNzZXMuZmlsZSk7XG4gICAgdmFyIHJhbmdlID0gY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChzd2FsQ2xhc3Nlcy5yYW5nZSwgXCIgaW5wdXRcIikpO1xuICAgIHZhciByYW5nZU91dHB1dCA9IGNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoc3dhbENsYXNzZXMucmFuZ2UsIFwiIG91dHB1dFwiKSk7XG4gICAgdmFyIHNlbGVjdCA9IGdldENoaWxkQnlDbGFzcyhjb250ZW50LCBzd2FsQ2xhc3Nlcy5zZWxlY3QpO1xuICAgIHZhciBjaGVja2JveCA9IGNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoc3dhbENsYXNzZXMuY2hlY2tib3gsIFwiIGlucHV0XCIpKTtcbiAgICB2YXIgdGV4dGFyZWEgPSBnZXRDaGlsZEJ5Q2xhc3MoY29udGVudCwgc3dhbENsYXNzZXMudGV4dGFyZWEpO1xuICAgIGlucHV0Lm9uaW5wdXQgPSByZXNldFZhbGlkYXRpb25NZXNzYWdlO1xuICAgIGZpbGUub25jaGFuZ2UgPSByZXNldFZhbGlkYXRpb25NZXNzYWdlO1xuICAgIHNlbGVjdC5vbmNoYW5nZSA9IHJlc2V0VmFsaWRhdGlvbk1lc3NhZ2U7XG4gICAgY2hlY2tib3gub25jaGFuZ2UgPSByZXNldFZhbGlkYXRpb25NZXNzYWdlO1xuICAgIHRleHRhcmVhLm9uaW5wdXQgPSByZXNldFZhbGlkYXRpb25NZXNzYWdlO1xuXG4gICAgcmFuZ2Uub25pbnB1dCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXNldFZhbGlkYXRpb25NZXNzYWdlKGUpO1xuICAgICAgcmFuZ2VPdXRwdXQudmFsdWUgPSByYW5nZS52YWx1ZTtcbiAgICB9O1xuXG4gICAgcmFuZ2Uub25jaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgcmVzZXRWYWxpZGF0aW9uTWVzc2FnZShlKTtcbiAgICAgIHJhbmdlLm5leHRTaWJsaW5nLnZhbHVlID0gcmFuZ2UudmFsdWU7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICAgIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KSA6IHRhcmdldDtcbiAgfTtcblxuICB2YXIgc2V0dXBBY2Nlc3NpYmlsaXR5ID0gZnVuY3Rpb24gc2V0dXBBY2Nlc3NpYmlsaXR5KHBhcmFtcykge1xuICAgIHZhciBwb3B1cCA9IGdldFBvcHVwKCk7XG4gICAgcG9wdXAuc2V0QXR0cmlidXRlKCdyb2xlJywgcGFyYW1zLnRvYXN0ID8gJ2FsZXJ0JyA6ICdkaWFsb2cnKTtcbiAgICBwb3B1cC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsIHBhcmFtcy50b2FzdCA/ICdwb2xpdGUnIDogJ2Fzc2VydGl2ZScpO1xuXG4gICAgaWYgKCFwYXJhbXMudG9hc3QpIHtcbiAgICAgIHBvcHVwLnNldEF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcsICd0cnVlJyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBzZXR1cFJUTCA9IGZ1bmN0aW9uIHNldHVwUlRMKHRhcmdldEVsZW1lbnQpIHtcbiAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUodGFyZ2V0RWxlbWVudCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgYWRkQ2xhc3MoZ2V0Q29udGFpbmVyKCksIHN3YWxDbGFzc2VzLnJ0bCk7XG4gICAgfVxuICB9O1xuICAvKlxuICAgKiBBZGQgbW9kYWwgKyBiYWNrZHJvcCB0byBET01cbiAgICovXG5cblxuICB2YXIgaW5pdCA9IGZ1bmN0aW9uIGluaXQocGFyYW1zKSB7XG4gICAgLy8gQ2xlYW4gdXAgdGhlIG9sZCBwb3B1cCBjb250YWluZXIgaWYgaXQgZXhpc3RzXG4gICAgdmFyIG9sZENvbnRhaW5lckV4aXN0ZWQgPSByZXNldE9sZENvbnRhaW5lcigpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG4gICAgaWYgKGlzTm9kZUVudigpKSB7XG4gICAgICBlcnJvcignU3dlZXRBbGVydDIgcmVxdWlyZXMgZG9jdW1lbnQgdG8gaW5pdGlhbGl6ZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuY2xhc3NOYW1lID0gc3dhbENsYXNzZXMuY29udGFpbmVyO1xuXG4gICAgaWYgKG9sZENvbnRhaW5lckV4aXN0ZWQpIHtcbiAgICAgIGFkZENsYXNzKGNvbnRhaW5lciwgc3dhbENsYXNzZXNbJ25vLXRyYW5zaXRpb24nXSk7XG4gICAgfVxuXG4gICAgc2V0SW5uZXJIdG1sKGNvbnRhaW5lciwgc3dlZXRIVE1MKTtcbiAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IGdldFRhcmdldChwYXJhbXMudGFyZ2V0KTtcbiAgICB0YXJnZXRFbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgc2V0dXBBY2Nlc3NpYmlsaXR5KHBhcmFtcyk7XG4gICAgc2V0dXBSVEwodGFyZ2V0RWxlbWVudCk7XG4gICAgYWRkSW5wdXRDaGFuZ2VMaXN0ZW5lcnMoKTtcbiAgfTtcblxuICB2YXIgcGFyc2VIdG1sVG9Db250YWluZXIgPSBmdW5jdGlvbiBwYXJzZUh0bWxUb0NvbnRhaW5lcihwYXJhbSwgdGFyZ2V0KSB7XG4gICAgLy8gRE9NIGVsZW1lbnRcbiAgICBpZiAocGFyYW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKHBhcmFtKTsgLy8gT2JqZWN0XG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKHBhcmFtKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGhhbmRsZU9iamVjdChwYXJhbSwgdGFyZ2V0KTsgLy8gUGxhaW4gc3RyaW5nXG4gICAgfSBlbHNlIGlmIChwYXJhbSkge1xuICAgICAgc2V0SW5uZXJIdG1sKHRhcmdldCwgcGFyYW0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlT2JqZWN0ID0gZnVuY3Rpb24gaGFuZGxlT2JqZWN0KHBhcmFtLCB0YXJnZXQpIHtcbiAgICAvLyBKUXVlcnkgZWxlbWVudChzKVxuICAgIGlmIChwYXJhbS5qcXVlcnkpIHtcbiAgICAgIGhhbmRsZUpxdWVyeUVsZW0odGFyZ2V0LCBwYXJhbSk7IC8vIEZvciBvdGhlciBvYmplY3RzIHVzZSB0aGVpciBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAgICB9IGVsc2Uge1xuICAgICAgc2V0SW5uZXJIdG1sKHRhcmdldCwgcGFyYW0udG9TdHJpbmcoKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVKcXVlcnlFbGVtID0gZnVuY3Rpb24gaGFuZGxlSnF1ZXJ5RWxlbSh0YXJnZXQsIGVsZW0pIHtcbiAgICB0YXJnZXQudGV4dENvbnRlbnQgPSAnJztcblxuICAgIGlmICgwIGluIGVsZW0pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyAoaSBpbiBlbGVtKTsgaSsrKSB7XG4gICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChlbGVtW2ldLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChlbGVtLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBhbmltYXRpb25FbmRFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBQcmV2ZW50IHJ1biBpbiBOb2RlIGVudlxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzTm9kZUVudigpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHRlc3RFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHZhciB0cmFuc0VuZEV2ZW50TmFtZXMgPSB7XG4gICAgICBXZWJraXRBbmltYXRpb246ICd3ZWJraXRBbmltYXRpb25FbmQnLFxuICAgICAgT0FuaW1hdGlvbjogJ29BbmltYXRpb25FbmQgb2FuaW1hdGlvbmVuZCcsXG4gICAgICBhbmltYXRpb246ICdhbmltYXRpb25lbmQnXG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgaW4gdHJhbnNFbmRFdmVudE5hbWVzKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRyYW5zRW5kRXZlbnROYW1lcywgaSkgJiYgdHlwZW9mIHRlc3RFbC5zdHlsZVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRyYW5zRW5kRXZlbnROYW1lc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0oKTtcblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvanMvc3JjL21vZGFsLmpzXG5cbiAgdmFyIG1lYXN1cmVTY3JvbGxiYXIgPSBmdW5jdGlvbiBtZWFzdXJlU2Nyb2xsYmFyKCkge1xuICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gc3dhbENsYXNzZXNbJ3Njcm9sbGJhci1tZWFzdXJlJ107XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG4gICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoO1xuICB9O1xuXG4gIHZhciByZW5kZXJBY3Rpb25zID0gZnVuY3Rpb24gcmVuZGVyQWN0aW9ucyhpbnN0YW5jZSwgcGFyYW1zKSB7XG4gICAgdmFyIGFjdGlvbnMgPSBnZXRBY3Rpb25zKCk7XG4gICAgdmFyIGxvYWRlciA9IGdldExvYWRlcigpO1xuICAgIHZhciBjb25maXJtQnV0dG9uID0gZ2V0Q29uZmlybUJ1dHRvbigpO1xuICAgIHZhciBkZW55QnV0dG9uID0gZ2V0RGVueUJ1dHRvbigpO1xuICAgIHZhciBjYW5jZWxCdXR0b24gPSBnZXRDYW5jZWxCdXR0b24oKTsgLy8gQWN0aW9ucyAoYnV0dG9ucykgd3JhcHBlclxuXG4gICAgaWYgKCFwYXJhbXMuc2hvd0NvbmZpcm1CdXR0b24gJiYgIXBhcmFtcy5zaG93RGVueUJ1dHRvbiAmJiAhcGFyYW1zLnNob3dDYW5jZWxCdXR0b24pIHtcbiAgICAgIGhpZGUoYWN0aW9ucyk7XG4gICAgfSAvLyBDdXN0b20gY2xhc3NcblxuXG4gICAgYXBwbHlDdXN0b21DbGFzcyhhY3Rpb25zLCBwYXJhbXMsICdhY3Rpb25zJyk7IC8vIFJlbmRlciBidXR0b25zXG5cbiAgICByZW5kZXJCdXR0b24oY29uZmlybUJ1dHRvbiwgJ2NvbmZpcm0nLCBwYXJhbXMpO1xuICAgIHJlbmRlckJ1dHRvbihkZW55QnV0dG9uLCAnZGVueScsIHBhcmFtcyk7XG4gICAgcmVuZGVyQnV0dG9uKGNhbmNlbEJ1dHRvbiwgJ2NhbmNlbCcsIHBhcmFtcyk7IC8vIExvYWRlclxuXG4gICAgbG9hZGVyLmlubmVySFRNTCA9IHBhcmFtcy5sb2FkZXJIdG1sO1xuXG4gICAgaWYgKHBhcmFtcy5idXR0b25zU3R5bGluZykge1xuICAgICAgaGFuZGxlQnV0dG9uc1N0eWxpbmcoY29uZmlybUJ1dHRvbiwgZGVueUJ1dHRvbiwgY2FuY2VsQnV0dG9uLCBwYXJhbXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVDbGFzcyhbY29uZmlybUJ1dHRvbiwgZGVueUJ1dHRvbiwgY2FuY2VsQnV0dG9uXSwgc3dhbENsYXNzZXMuc3R5bGVkKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnJldmVyc2VCdXR0b25zKSB7XG4gICAgICBhY3Rpb25zLmluc2VydEJlZm9yZShjYW5jZWxCdXR0b24sIGxvYWRlcik7XG4gICAgICBhY3Rpb25zLmluc2VydEJlZm9yZShkZW55QnV0dG9uLCBsb2FkZXIpO1xuICAgICAgYWN0aW9ucy5pbnNlcnRCZWZvcmUoY29uZmlybUJ1dHRvbiwgbG9hZGVyKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gaGFuZGxlQnV0dG9uc1N0eWxpbmcoY29uZmlybUJ1dHRvbiwgZGVueUJ1dHRvbiwgY2FuY2VsQnV0dG9uLCBwYXJhbXMpIHtcbiAgICBhZGRDbGFzcyhbY29uZmlybUJ1dHRvbiwgZGVueUJ1dHRvbiwgY2FuY2VsQnV0dG9uXSwgc3dhbENsYXNzZXMuc3R5bGVkKTsgLy8gQnV0dG9ucyBiYWNrZ3JvdW5kIGNvbG9yc1xuXG4gICAgaWYgKHBhcmFtcy5jb25maXJtQnV0dG9uQ29sb3IpIHtcbiAgICAgIGNvbmZpcm1CdXR0b24uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcGFyYW1zLmNvbmZpcm1CdXR0b25Db2xvcjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmRlbnlCdXR0b25Db2xvcikge1xuICAgICAgZGVueUJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBwYXJhbXMuZGVueUJ1dHRvbkNvbG9yO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY2FuY2VsQnV0dG9uQ29sb3IpIHtcbiAgICAgIGNhbmNlbEJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBwYXJhbXMuY2FuY2VsQnV0dG9uQ29sb3I7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyQnV0dG9uKGJ1dHRvbiwgYnV0dG9uVHlwZSwgcGFyYW1zKSB7XG4gICAgdG9nZ2xlKGJ1dHRvbiwgcGFyYW1zW1wic2hvd1wiLmNvbmNhdChjYXBpdGFsaXplRmlyc3RMZXR0ZXIoYnV0dG9uVHlwZSksIFwiQnV0dG9uXCIpXSwgJ2lubGluZS1ibG9jaycpO1xuICAgIHNldElubmVySHRtbChidXR0b24sIHBhcmFtc1tcIlwiLmNvbmNhdChidXR0b25UeXBlLCBcIkJ1dHRvblRleHRcIildKTsgLy8gU2V0IGNhcHRpb24gdGV4dFxuXG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHBhcmFtc1tcIlwiLmNvbmNhdChidXR0b25UeXBlLCBcIkJ1dHRvbkFyaWFMYWJlbFwiKV0pOyAvLyBBUklBIGxhYmVsXG4gICAgLy8gQWRkIGJ1dHRvbnMgY3VzdG9tIGNsYXNzZXNcblxuICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBzd2FsQ2xhc3Nlc1tidXR0b25UeXBlXTtcbiAgICBhcHBseUN1c3RvbUNsYXNzKGJ1dHRvbiwgcGFyYW1zLCBcIlwiLmNvbmNhdChidXR0b25UeXBlLCBcIkJ1dHRvblwiKSk7XG4gICAgYWRkQ2xhc3MoYnV0dG9uLCBwYXJhbXNbXCJcIi5jb25jYXQoYnV0dG9uVHlwZSwgXCJCdXR0b25DbGFzc1wiKV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQmFja2Ryb3BQYXJhbShjb250YWluZXIsIGJhY2tkcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBiYWNrZHJvcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnRhaW5lci5zdHlsZS5iYWNrZ3JvdW5kID0gYmFja2Ryb3A7XG4gICAgfSBlbHNlIGlmICghYmFja2Ryb3ApIHtcbiAgICAgIGFkZENsYXNzKFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGRvY3VtZW50LmJvZHldLCBzd2FsQ2xhc3Nlc1snbm8tYmFja2Ryb3AnXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9zaXRpb25QYXJhbShjb250YWluZXIsIHBvc2l0aW9uKSB7XG4gICAgaWYgKHBvc2l0aW9uIGluIHN3YWxDbGFzc2VzKSB7XG4gICAgICBhZGRDbGFzcyhjb250YWluZXIsIHN3YWxDbGFzc2VzW3Bvc2l0aW9uXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oJ1RoZSBcInBvc2l0aW9uXCIgcGFyYW1ldGVyIGlzIG5vdCB2YWxpZCwgZGVmYXVsdGluZyB0byBcImNlbnRlclwiJyk7XG4gICAgICBhZGRDbGFzcyhjb250YWluZXIsIHN3YWxDbGFzc2VzLmNlbnRlcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlR3Jvd1BhcmFtKGNvbnRhaW5lciwgZ3Jvdykge1xuICAgIGlmIChncm93ICYmIHR5cGVvZiBncm93ID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIGdyb3dDbGFzcyA9IFwiZ3Jvdy1cIi5jb25jYXQoZ3Jvdyk7XG5cbiAgICAgIGlmIChncm93Q2xhc3MgaW4gc3dhbENsYXNzZXMpIHtcbiAgICAgICAgYWRkQ2xhc3MoY29udGFpbmVyLCBzd2FsQ2xhc3Nlc1tncm93Q2xhc3NdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGFpbmVyID0gZnVuY3Rpb24gcmVuZGVyQ29udGFpbmVyKGluc3RhbmNlLCBwYXJhbXMpIHtcbiAgICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG5cbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGhhbmRsZUJhY2tkcm9wUGFyYW0oY29udGFpbmVyLCBwYXJhbXMuYmFja2Ryb3ApO1xuXG4gICAgaWYgKCFwYXJhbXMuYmFja2Ryb3AgJiYgcGFyYW1zLmFsbG93T3V0c2lkZUNsaWNrKSB7XG4gICAgICB3YXJuKCdcImFsbG93T3V0c2lkZUNsaWNrXCIgcGFyYW1ldGVyIHJlcXVpcmVzIGBiYWNrZHJvcGAgcGFyYW1ldGVyIHRvIGJlIHNldCB0byBgdHJ1ZWAnKTtcbiAgICB9XG5cbiAgICBoYW5kbGVQb3NpdGlvblBhcmFtKGNvbnRhaW5lciwgcGFyYW1zLnBvc2l0aW9uKTtcbiAgICBoYW5kbGVHcm93UGFyYW0oY29udGFpbmVyLCBwYXJhbXMuZ3Jvdyk7IC8vIEN1c3RvbSBjbGFzc1xuXG4gICAgYXBwbHlDdXN0b21DbGFzcyhjb250YWluZXIsIHBhcmFtcywgJ2NvbnRhaW5lcicpOyAvLyBTZXQgcXVldWUgc3RlcCBhdHRyaWJ1dGUgZm9yIGdldFF1ZXVlU3RlcCgpIG1ldGhvZFxuXG4gICAgdmFyIHF1ZXVlU3RlcCA9IGRvY3VtZW50LmJvZHkuZ2V0QXR0cmlidXRlKCdkYXRhLXN3YWwyLXF1ZXVlLXN0ZXAnKTtcblxuICAgIGlmIChxdWV1ZVN0ZXApIHtcbiAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtcXVldWUtc3RlcCcsIHF1ZXVlU3RlcCk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zd2FsMi1xdWV1ZS1zdGVwJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBUaGlzIG1vZHVsZSBjb250YWludHMgYFdlYWtNYXBgcyBmb3IgZWFjaCBlZmZlY3RpdmVseS1cInByaXZhdGUgIHByb3BlcnR5XCIgdGhhdCBhIGBTd2FsYCBoYXMuXG4gICAqIEZvciBleGFtcGxlLCB0byBzZXQgdGhlIHByaXZhdGUgcHJvcGVydHkgXCJmb29cIiBvZiBgdGhpc2AgdG8gXCJiYXJcIiwgeW91IGNhbiBgcHJpdmF0ZVByb3BzLmZvby5zZXQodGhpcywgJ2JhcicpYFxuICAgKiBUaGlzIGlzIHRoZSBhcHByb2FjaCB0aGF0IEJhYmVsIHdpbGwgcHJvYmFibHkgdGFrZSB0byBpbXBsZW1lbnQgcHJpdmF0ZSBtZXRob2RzL2ZpZWxkc1xuICAgKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByaXZhdGUtbWV0aG9kc1xuICAgKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9iYWJlbC9iYWJlbC9wdWxsLzc1NTVcbiAgICogT25jZSB3ZSBoYXZlIHRoZSBjaGFuZ2VzIGZyb20gdGhhdCBQUiBpbiBCYWJlbCwgYW5kIG91ciBjb3JlIGNsYXNzIGZpdHMgcmVhc29uYWJsZSBpbiAqb25lIG1vZHVsZSpcbiAgICogICB0aGVuIHdlIGNhbiB1c2UgdGhhdCBsYW5ndWFnZSBmZWF0dXJlLlxuICAgKi9cbiAgdmFyIHByaXZhdGVQcm9wcyA9IHtcbiAgICBwcm9taXNlOiBuZXcgV2Vha01hcCgpLFxuICAgIGlubmVyUGFyYW1zOiBuZXcgV2Vha01hcCgpLFxuICAgIGRvbUNhY2hlOiBuZXcgV2Vha01hcCgpXG4gIH07XG5cbiAgdmFyIGlucHV0VHlwZXMgPSBbJ2lucHV0JywgJ2ZpbGUnLCAncmFuZ2UnLCAnc2VsZWN0JywgJ3JhZGlvJywgJ2NoZWNrYm94JywgJ3RleHRhcmVhJ107XG4gIHZhciByZW5kZXJJbnB1dCA9IGZ1bmN0aW9uIHJlbmRlcklucHV0KGluc3RhbmNlLCBwYXJhbXMpIHtcbiAgICB2YXIgY29udGVudCA9IGdldENvbnRlbnQoKTtcbiAgICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KGluc3RhbmNlKTtcbiAgICB2YXIgcmVyZW5kZXIgPSAhaW5uZXJQYXJhbXMgfHwgcGFyYW1zLmlucHV0ICE9PSBpbm5lclBhcmFtcy5pbnB1dDtcbiAgICBpbnB1dFR5cGVzLmZvckVhY2goZnVuY3Rpb24gKGlucHV0VHlwZSkge1xuICAgICAgdmFyIGlucHV0Q2xhc3MgPSBzd2FsQ2xhc3Nlc1tpbnB1dFR5cGVdO1xuICAgICAgdmFyIGlucHV0Q29udGFpbmVyID0gZ2V0Q2hpbGRCeUNsYXNzKGNvbnRlbnQsIGlucHV0Q2xhc3MpOyAvLyBzZXQgYXR0cmlidXRlc1xuXG4gICAgICBzZXRBdHRyaWJ1dGVzKGlucHV0VHlwZSwgcGFyYW1zLmlucHV0QXR0cmlidXRlcyk7IC8vIHNldCBjbGFzc1xuXG4gICAgICBpbnB1dENvbnRhaW5lci5jbGFzc05hbWUgPSBpbnB1dENsYXNzO1xuXG4gICAgICBpZiAocmVyZW5kZXIpIHtcbiAgICAgICAgaGlkZShpbnB1dENvbnRhaW5lcik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAocGFyYW1zLmlucHV0KSB7XG4gICAgICBpZiAocmVyZW5kZXIpIHtcbiAgICAgICAgc2hvd0lucHV0KHBhcmFtcyk7XG4gICAgICB9IC8vIHNldCBjdXN0b20gY2xhc3NcblxuXG4gICAgICBzZXRDdXN0b21DbGFzcyhwYXJhbXMpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc2hvd0lucHV0ID0gZnVuY3Rpb24gc2hvd0lucHV0KHBhcmFtcykge1xuICAgIGlmICghcmVuZGVySW5wdXRUeXBlW3BhcmFtcy5pbnB1dF0pIHtcbiAgICAgIHJldHVybiBlcnJvcihcIlVuZXhwZWN0ZWQgdHlwZSBvZiBpbnB1dCEgRXhwZWN0ZWQgXFxcInRleHRcXFwiLCBcXFwiZW1haWxcXFwiLCBcXFwicGFzc3dvcmRcXFwiLCBcXFwibnVtYmVyXFxcIiwgXFxcInRlbFxcXCIsIFxcXCJzZWxlY3RcXFwiLCBcXFwicmFkaW9cXFwiLCBcXFwiY2hlY2tib3hcXFwiLCBcXFwidGV4dGFyZWFcXFwiLCBcXFwiZmlsZVxcXCIgb3IgXFxcInVybFxcXCIsIGdvdCBcXFwiXCIuY29uY2F0KHBhcmFtcy5pbnB1dCwgXCJcXFwiXCIpKTtcbiAgICB9XG5cbiAgICB2YXIgaW5wdXRDb250YWluZXIgPSBnZXRJbnB1dENvbnRhaW5lcihwYXJhbXMuaW5wdXQpO1xuICAgIHZhciBpbnB1dCA9IHJlbmRlcklucHV0VHlwZVtwYXJhbXMuaW5wdXRdKGlucHV0Q29udGFpbmVyLCBwYXJhbXMpO1xuICAgIHNob3coaW5wdXQpOyAvLyBpbnB1dCBhdXRvZm9jdXNcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZm9jdXNJbnB1dChpbnB1dCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlbW92ZUF0dHJpYnV0ZXMgPSBmdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGVzKGlucHV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYXR0ck5hbWUgPSBpbnB1dC5hdHRyaWJ1dGVzW2ldLm5hbWU7XG5cbiAgICAgIGlmICghKFsndHlwZScsICd2YWx1ZScsICdzdHlsZSddLmluZGV4T2YoYXR0ck5hbWUpICE9PSAtMSkpIHtcbiAgICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHNldEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGlucHV0VHlwZSwgaW5wdXRBdHRyaWJ1dGVzKSB7XG4gICAgdmFyIGlucHV0ID0gZ2V0SW5wdXQoZ2V0Q29udGVudCgpLCBpbnB1dFR5cGUpO1xuXG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlbW92ZUF0dHJpYnV0ZXMoaW5wdXQpO1xuXG4gICAgZm9yICh2YXIgYXR0ciBpbiBpbnB1dEF0dHJpYnV0ZXMpIHtcbiAgICAgIC8vIERvIG5vdCBzZXQgYSBwbGFjZWhvbGRlciBmb3IgPGlucHV0IHR5cGU9XCJyYW5nZVwiPlxuICAgICAgLy8gaXQnbGwgY3Jhc2ggRWRnZSwgIzEyOThcbiAgICAgIGlmIChpbnB1dFR5cGUgPT09ICdyYW5nZScgJiYgYXR0ciA9PT0gJ3BsYWNlaG9sZGVyJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKGF0dHIsIGlucHV0QXR0cmlidXRlc1thdHRyXSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBzZXRDdXN0b21DbGFzcyA9IGZ1bmN0aW9uIHNldEN1c3RvbUNsYXNzKHBhcmFtcykge1xuICAgIHZhciBpbnB1dENvbnRhaW5lciA9IGdldElucHV0Q29udGFpbmVyKHBhcmFtcy5pbnB1dCk7XG5cbiAgICBpZiAocGFyYW1zLmN1c3RvbUNsYXNzKSB7XG4gICAgICBhZGRDbGFzcyhpbnB1dENvbnRhaW5lciwgcGFyYW1zLmN1c3RvbUNsYXNzLmlucHV0KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNldElucHV0UGxhY2Vob2xkZXIgPSBmdW5jdGlvbiBzZXRJbnB1dFBsYWNlaG9sZGVyKGlucHV0LCBwYXJhbXMpIHtcbiAgICBpZiAoIWlucHV0LnBsYWNlaG9sZGVyIHx8IHBhcmFtcy5pbnB1dFBsYWNlaG9sZGVyKSB7XG4gICAgICBpbnB1dC5wbGFjZWhvbGRlciA9IHBhcmFtcy5pbnB1dFBsYWNlaG9sZGVyO1xuICAgIH1cbiAgfTtcblxuICB2YXIgc2V0SW5wdXRMYWJlbCA9IGZ1bmN0aW9uIHNldElucHV0TGFiZWwoaW5wdXQsIHByZXBlbmRUbywgcGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcy5pbnB1dExhYmVsKSB7XG4gICAgICBpbnB1dC5pZCA9IHN3YWxDbGFzc2VzLmlucHV0O1xuICAgICAgdmFyIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICAgIHZhciBsYWJlbENsYXNzID0gc3dhbENsYXNzZXNbJ2lucHV0LWxhYmVsJ107XG4gICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlucHV0LmlkKTtcbiAgICAgIGxhYmVsLmNsYXNzTmFtZSA9IGxhYmVsQ2xhc3M7XG4gICAgICBsYWJlbC5pbm5lclRleHQgPSBwYXJhbXMuaW5wdXRMYWJlbDtcbiAgICAgIHByZXBlbmRUby5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWJlZ2luJywgbGFiZWwpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SW5wdXRDb250YWluZXIgPSBmdW5jdGlvbiBnZXRJbnB1dENvbnRhaW5lcihpbnB1dFR5cGUpIHtcbiAgICB2YXIgaW5wdXRDbGFzcyA9IHN3YWxDbGFzc2VzW2lucHV0VHlwZV0gPyBzd2FsQ2xhc3Nlc1tpbnB1dFR5cGVdIDogc3dhbENsYXNzZXMuaW5wdXQ7XG4gICAgcmV0dXJuIGdldENoaWxkQnlDbGFzcyhnZXRDb250ZW50KCksIGlucHV0Q2xhc3MpO1xuICB9O1xuXG4gIHZhciByZW5kZXJJbnB1dFR5cGUgPSB7fTtcblxuICByZW5kZXJJbnB1dFR5cGUudGV4dCA9IHJlbmRlcklucHV0VHlwZS5lbWFpbCA9IHJlbmRlcklucHV0VHlwZS5wYXNzd29yZCA9IHJlbmRlcklucHV0VHlwZS5udW1iZXIgPSByZW5kZXJJbnB1dFR5cGUudGVsID0gcmVuZGVySW5wdXRUeXBlLnVybCA9IGZ1bmN0aW9uIChpbnB1dCwgcGFyYW1zKSB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuaW5wdXRWYWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHBhcmFtcy5pbnB1dFZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgaW5wdXQudmFsdWUgPSBwYXJhbXMuaW5wdXRWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKCFpc1Byb21pc2UocGFyYW1zLmlucHV0VmFsdWUpKSB7XG4gICAgICB3YXJuKFwiVW5leHBlY3RlZCB0eXBlIG9mIGlucHV0VmFsdWUhIEV4cGVjdGVkIFxcXCJzdHJpbmdcXFwiLCBcXFwibnVtYmVyXFxcIiBvciBcXFwiUHJvbWlzZVxcXCIsIGdvdCBcXFwiXCIuY29uY2F0KF90eXBlb2YocGFyYW1zLmlucHV0VmFsdWUpLCBcIlxcXCJcIikpO1xuICAgIH1cblxuICAgIHNldElucHV0TGFiZWwoaW5wdXQsIGlucHV0LCBwYXJhbXMpO1xuICAgIHNldElucHV0UGxhY2Vob2xkZXIoaW5wdXQsIHBhcmFtcyk7XG4gICAgaW5wdXQudHlwZSA9IHBhcmFtcy5pbnB1dDtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH07XG5cbiAgcmVuZGVySW5wdXRUeXBlLmZpbGUgPSBmdW5jdGlvbiAoaW5wdXQsIHBhcmFtcykge1xuICAgIHNldElucHV0TGFiZWwoaW5wdXQsIGlucHV0LCBwYXJhbXMpO1xuICAgIHNldElucHV0UGxhY2Vob2xkZXIoaW5wdXQsIHBhcmFtcyk7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9O1xuXG4gIHJlbmRlcklucHV0VHlwZS5yYW5nZSA9IGZ1bmN0aW9uIChyYW5nZSwgcGFyYW1zKSB7XG4gICAgdmFyIHJhbmdlSW5wdXQgPSByYW5nZS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIHZhciByYW5nZU91dHB1dCA9IHJhbmdlLnF1ZXJ5U2VsZWN0b3IoJ291dHB1dCcpO1xuICAgIHJhbmdlSW5wdXQudmFsdWUgPSBwYXJhbXMuaW5wdXRWYWx1ZTtcbiAgICByYW5nZUlucHV0LnR5cGUgPSBwYXJhbXMuaW5wdXQ7XG4gICAgcmFuZ2VPdXRwdXQudmFsdWUgPSBwYXJhbXMuaW5wdXRWYWx1ZTtcbiAgICBzZXRJbnB1dExhYmVsKHJhbmdlSW5wdXQsIHJhbmdlLCBwYXJhbXMpO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICByZW5kZXJJbnB1dFR5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdCwgcGFyYW1zKSB7XG4gICAgc2VsZWN0LnRleHRDb250ZW50ID0gJyc7XG5cbiAgICBpZiAocGFyYW1zLmlucHV0UGxhY2Vob2xkZXIpIHtcbiAgICAgIHZhciBwbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgc2V0SW5uZXJIdG1sKHBsYWNlaG9sZGVyLCBwYXJhbXMuaW5wdXRQbGFjZWhvbGRlcik7XG4gICAgICBwbGFjZWhvbGRlci52YWx1ZSA9ICcnO1xuICAgICAgcGxhY2Vob2xkZXIuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgcGxhY2Vob2xkZXIuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgc2VsZWN0LmFwcGVuZENoaWxkKHBsYWNlaG9sZGVyKTtcbiAgICB9XG5cbiAgICBzZXRJbnB1dExhYmVsKHNlbGVjdCwgc2VsZWN0LCBwYXJhbXMpO1xuICAgIHJldHVybiBzZWxlY3Q7XG4gIH07XG5cbiAgcmVuZGVySW5wdXRUeXBlLnJhZGlvID0gZnVuY3Rpb24gKHJhZGlvKSB7XG4gICAgcmFkaW8udGV4dENvbnRlbnQgPSAnJztcbiAgICByZXR1cm4gcmFkaW87XG4gIH07XG5cbiAgcmVuZGVySW5wdXRUeXBlLmNoZWNrYm94ID0gZnVuY3Rpb24gKGNoZWNrYm94Q29udGFpbmVyLCBwYXJhbXMpIHtcbiAgICB2YXIgY2hlY2tib3ggPSBnZXRJbnB1dChnZXRDb250ZW50KCksICdjaGVja2JveCcpO1xuICAgIGNoZWNrYm94LnZhbHVlID0gMTtcbiAgICBjaGVja2JveC5pZCA9IHN3YWxDbGFzc2VzLmNoZWNrYm94O1xuICAgIGNoZWNrYm94LmNoZWNrZWQgPSBCb29sZWFuKHBhcmFtcy5pbnB1dFZhbHVlKTtcbiAgICB2YXIgbGFiZWwgPSBjaGVja2JveENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdzcGFuJyk7XG4gICAgc2V0SW5uZXJIdG1sKGxhYmVsLCBwYXJhbXMuaW5wdXRQbGFjZWhvbGRlcik7XG4gICAgcmV0dXJuIGNoZWNrYm94Q29udGFpbmVyO1xuICB9O1xuXG4gIHJlbmRlcklucHV0VHlwZS50ZXh0YXJlYSA9IGZ1bmN0aW9uICh0ZXh0YXJlYSwgcGFyYW1zKSB7XG4gICAgdGV4dGFyZWEudmFsdWUgPSBwYXJhbXMuaW5wdXRWYWx1ZTtcbiAgICBzZXRJbnB1dFBsYWNlaG9sZGVyKHRleHRhcmVhLCBwYXJhbXMpO1xuICAgIHNldElucHV0TGFiZWwodGV4dGFyZWEsIHRleHRhcmVhLCBwYXJhbXMpO1xuXG4gICAgaWYgKCdNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW5kb3cpIHtcbiAgICAgIC8vICMxNjk5XG4gICAgICB2YXIgaW5pdGlhbFBvcHVwV2lkdGggPSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShnZXRQb3B1cCgpKS53aWR0aCk7XG4gICAgICB2YXIgcG9wdXBQYWRkaW5nID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZ2V0UG9wdXAoKSkucGFkZGluZ0xlZnQpICsgcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZ2V0UG9wdXAoKSkucGFkZGluZ1JpZ2h0KTtcblxuICAgICAgdmFyIG91dHB1dHNpemUgPSBmdW5jdGlvbiBvdXRwdXRzaXplKCkge1xuICAgICAgICB2YXIgY29udGVudFdpZHRoID0gdGV4dGFyZWEub2Zmc2V0V2lkdGggKyBwb3B1cFBhZGRpbmc7XG5cbiAgICAgICAgaWYgKGNvbnRlbnRXaWR0aCA+IGluaXRpYWxQb3B1cFdpZHRoKSB7XG4gICAgICAgICAgZ2V0UG9wdXAoKS5zdHlsZS53aWR0aCA9IFwiXCIuY29uY2F0KGNvbnRlbnRXaWR0aCwgXCJweFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZXRQb3B1cCgpLnN0eWxlLndpZHRoID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIob3V0cHV0c2l6ZSkub2JzZXJ2ZSh0ZXh0YXJlYSwge1xuICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICBhdHRyaWJ1dGVGaWx0ZXI6IFsnc3R5bGUnXVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRleHRhcmVhO1xuICB9O1xuXG4gIHZhciByZW5kZXJDb250ZW50ID0gZnVuY3Rpb24gcmVuZGVyQ29udGVudChpbnN0YW5jZSwgcGFyYW1zKSB7XG4gICAgdmFyIGNvbnRlbnQgPSBnZXRDb250ZW50KCkucXVlcnlTZWxlY3RvcihcIiNcIi5jb25jYXQoc3dhbENsYXNzZXMuY29udGVudCkpOyAvLyBDb250ZW50IGFzIEhUTUxcblxuICAgIGlmIChwYXJhbXMuaHRtbCkge1xuICAgICAgcGFyc2VIdG1sVG9Db250YWluZXIocGFyYW1zLmh0bWwsIGNvbnRlbnQpO1xuICAgICAgc2hvdyhjb250ZW50LCAnYmxvY2snKTsgLy8gQ29udGVudCBhcyBwbGFpbiB0ZXh0XG4gICAgfSBlbHNlIGlmIChwYXJhbXMudGV4dCkge1xuICAgICAgY29udGVudC50ZXh0Q29udGVudCA9IHBhcmFtcy50ZXh0O1xuICAgICAgc2hvdyhjb250ZW50LCAnYmxvY2snKTsgLy8gTm8gY29udGVudFxuICAgIH0gZWxzZSB7XG4gICAgICBoaWRlKGNvbnRlbnQpO1xuICAgIH1cblxuICAgIHJlbmRlcklucHV0KGluc3RhbmNlLCBwYXJhbXMpOyAvLyBDdXN0b20gY2xhc3NcblxuICAgIGFwcGx5Q3VzdG9tQ2xhc3MoZ2V0Q29udGVudCgpLCBwYXJhbXMsICdjb250ZW50Jyk7XG4gIH07XG5cbiAgdmFyIHJlbmRlckZvb3RlciA9IGZ1bmN0aW9uIHJlbmRlckZvb3RlcihpbnN0YW5jZSwgcGFyYW1zKSB7XG4gICAgdmFyIGZvb3RlciA9IGdldEZvb3RlcigpO1xuICAgIHRvZ2dsZShmb290ZXIsIHBhcmFtcy5mb290ZXIpO1xuXG4gICAgaWYgKHBhcmFtcy5mb290ZXIpIHtcbiAgICAgIHBhcnNlSHRtbFRvQ29udGFpbmVyKHBhcmFtcy5mb290ZXIsIGZvb3Rlcik7XG4gICAgfSAvLyBDdXN0b20gY2xhc3NcblxuXG4gICAgYXBwbHlDdXN0b21DbGFzcyhmb290ZXIsIHBhcmFtcywgJ2Zvb3RlcicpO1xuICB9O1xuXG4gIHZhciByZW5kZXJDbG9zZUJ1dHRvbiA9IGZ1bmN0aW9uIHJlbmRlckNsb3NlQnV0dG9uKGluc3RhbmNlLCBwYXJhbXMpIHtcbiAgICB2YXIgY2xvc2VCdXR0b24gPSBnZXRDbG9zZUJ1dHRvbigpO1xuICAgIHNldElubmVySHRtbChjbG9zZUJ1dHRvbiwgcGFyYW1zLmNsb3NlQnV0dG9uSHRtbCk7IC8vIEN1c3RvbSBjbGFzc1xuXG4gICAgYXBwbHlDdXN0b21DbGFzcyhjbG9zZUJ1dHRvbiwgcGFyYW1zLCAnY2xvc2VCdXR0b24nKTtcbiAgICB0b2dnbGUoY2xvc2VCdXR0b24sIHBhcmFtcy5zaG93Q2xvc2VCdXR0b24pO1xuICAgIGNsb3NlQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHBhcmFtcy5jbG9zZUJ1dHRvbkFyaWFMYWJlbCk7XG4gIH07XG5cbiAgdmFyIHJlbmRlckljb24gPSBmdW5jdGlvbiByZW5kZXJJY29uKGluc3RhbmNlLCBwYXJhbXMpIHtcbiAgICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KGluc3RhbmNlKTsgLy8gaWYgdGhlIGdpdmVuIGljb24gYWxyZWFkeSByZW5kZXJlZCwgYXBwbHkgdGhlIHN0eWxpbmcgd2l0aG91dCByZS1yZW5kZXJpbmcgdGhlIGljb25cblxuICAgIGlmIChpbm5lclBhcmFtcyAmJiBwYXJhbXMuaWNvbiA9PT0gaW5uZXJQYXJhbXMuaWNvbiAmJiBnZXRJY29uKCkpIHtcbiAgICAgIGFwcGx5U3R5bGVzKGdldEljb24oKSwgcGFyYW1zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBoaWRlQWxsSWNvbnMoKTtcblxuICAgIGlmICghcGFyYW1zLmljb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoaWNvblR5cGVzKS5pbmRleE9mKHBhcmFtcy5pY29uKSAhPT0gLTEpIHtcbiAgICAgIHZhciBpY29uID0gZWxlbWVudEJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KHN3YWxDbGFzc2VzLmljb24sIFwiLlwiKS5jb25jYXQoaWNvblR5cGVzW3BhcmFtcy5pY29uXSkpO1xuICAgICAgc2hvdyhpY29uKTsgLy8gQ3VzdG9tIG9yIGRlZmF1bHQgY29udGVudFxuXG4gICAgICBzZXRDb250ZW50KGljb24sIHBhcmFtcyk7XG4gICAgICBhcHBseVN0eWxlcyhpY29uLCBwYXJhbXMpOyAvLyBBbmltYXRlIGljb25cblxuICAgICAgYWRkQ2xhc3MoaWNvbiwgcGFyYW1zLnNob3dDbGFzcy5pY29uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3IoXCJVbmtub3duIGljb24hIEV4cGVjdGVkIFxcXCJzdWNjZXNzXFxcIiwgXFxcImVycm9yXFxcIiwgXFxcIndhcm5pbmdcXFwiLCBcXFwiaW5mb1xcXCIgb3IgXFxcInF1ZXN0aW9uXFxcIiwgZ290IFxcXCJcIi5jb25jYXQocGFyYW1zLmljb24sIFwiXFxcIlwiKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoaWRlQWxsSWNvbnMgPSBmdW5jdGlvbiBoaWRlQWxsSWNvbnMoKSB7XG4gICAgdmFyIGljb25zID0gZ2V0SWNvbnMoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWNvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGhpZGUoaWNvbnNbaV0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgYXBwbHlTdHlsZXMgPSBmdW5jdGlvbiBhcHBseVN0eWxlcyhpY29uLCBwYXJhbXMpIHtcbiAgICAvLyBJY29uIGNvbG9yXG4gICAgc2V0Q29sb3IoaWNvbiwgcGFyYW1zKTsgLy8gU3VjY2VzcyBpY29uIGJhY2tncm91bmQgY29sb3JcblxuICAgIGFkanVzdFN1Y2Nlc3NJY29uQmFja2dvdW5kQ29sb3IoKTsgLy8gQ3VzdG9tIGNsYXNzXG5cbiAgICBhcHBseUN1c3RvbUNsYXNzKGljb24sIHBhcmFtcywgJ2ljb24nKTtcbiAgfTsgLy8gQWRqdXN0IHN1Y2Nlc3MgaWNvbiBiYWNrZ3JvdW5kIGNvbG9yIHRvIG1hdGNoIHRoZSBwb3B1cCBiYWNrZ3JvdW5kIGNvbG9yXG5cblxuICB2YXIgYWRqdXN0U3VjY2Vzc0ljb25CYWNrZ291bmRDb2xvciA9IGZ1bmN0aW9uIGFkanVzdFN1Y2Nlc3NJY29uQmFja2dvdW5kQ29sb3IoKSB7XG4gICAgdmFyIHBvcHVwID0gZ2V0UG9wdXAoKTtcbiAgICB2YXIgcG9wdXBCYWNrZ3JvdW5kQ29sb3IgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwb3B1cCkuZ2V0UHJvcGVydHlWYWx1ZSgnYmFja2dyb3VuZC1jb2xvcicpO1xuICAgIHZhciBzdWNjZXNzSWNvblBhcnRzID0gcG9wdXAucXVlcnlTZWxlY3RvckFsbCgnW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmVdLCAuc3dhbDItc3VjY2Vzcy1maXgnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3VjY2Vzc0ljb25QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgc3VjY2Vzc0ljb25QYXJ0c1tpXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBwb3B1cEJhY2tncm91bmRDb2xvcjtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNldENvbnRlbnQgPSBmdW5jdGlvbiBzZXRDb250ZW50KGljb24sIHBhcmFtcykge1xuICAgIGljb24udGV4dENvbnRlbnQgPSAnJztcblxuICAgIGlmIChwYXJhbXMuaWNvbkh0bWwpIHtcbiAgICAgIHNldElubmVySHRtbChpY29uLCBpY29uQ29udGVudChwYXJhbXMuaWNvbkh0bWwpKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5pY29uID09PSAnc3VjY2VzcycpIHtcbiAgICAgIHNldElubmVySHRtbChpY29uLCBcIlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZS1sZWZ0XFxcIj48L2Rpdj5cXG4gICAgICA8c3BhbiBjbGFzcz1cXFwic3dhbDItc3VjY2Vzcy1saW5lLXRpcFxcXCI+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwic3dhbDItc3VjY2Vzcy1saW5lLWxvbmdcXFwiPjwvc3Bhbj5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJzd2FsMi1zdWNjZXNzLXJpbmdcXFwiPjwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzd2FsMi1zdWNjZXNzLWZpeFxcXCI+PC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwic3dhbDItc3VjY2Vzcy1jaXJjdWxhci1saW5lLXJpZ2h0XFxcIj48L2Rpdj5cXG4gICAgXCIpO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLmljb24gPT09ICdlcnJvcicpIHtcbiAgICAgIHNldElubmVySHRtbChpY29uLCBcIlxcbiAgICAgIDxzcGFuIGNsYXNzPVxcXCJzd2FsMi14LW1hcmtcXFwiPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcInN3YWwyLXgtbWFyay1saW5lLWxlZnRcXFwiPjwvc3Bhbj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzd2FsMi14LW1hcmstbGluZS1yaWdodFxcXCI+PC9zcGFuPlxcbiAgICAgIDwvc3Bhbj5cXG4gICAgXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZGVmYXVsdEljb25IdG1sID0ge1xuICAgICAgICBxdWVzdGlvbjogJz8nLFxuICAgICAgICB3YXJuaW5nOiAnIScsXG4gICAgICAgIGluZm86ICdpJ1xuICAgICAgfTtcbiAgICAgIHNldElubmVySHRtbChpY29uLCBpY29uQ29udGVudChkZWZhdWx0SWNvbkh0bWxbcGFyYW1zLmljb25dKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBzZXRDb2xvciA9IGZ1bmN0aW9uIHNldENvbG9yKGljb24sIHBhcmFtcykge1xuICAgIGlmICghcGFyYW1zLmljb25Db2xvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGljb24uc3R5bGUuY29sb3IgPSBwYXJhbXMuaWNvbkNvbG9yO1xuICAgIGljb24uc3R5bGUuYm9yZGVyQ29sb3IgPSBwYXJhbXMuaWNvbkNvbG9yO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYXJyID0gWycuc3dhbDItc3VjY2Vzcy1saW5lLXRpcCcsICcuc3dhbDItc3VjY2Vzcy1saW5lLWxvbmcnLCAnLnN3YWwyLXgtbWFyay1saW5lLWxlZnQnLCAnLnN3YWwyLXgtbWFyay1saW5lLXJpZ2h0J107IF9pIDwgX2Fyci5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBzZWwgPSBfYXJyW19pXTtcbiAgICAgIHNldFN0eWxlKGljb24sIHNlbCwgJ2JhY2tncm91bmRDb2xvcicsIHBhcmFtcy5pY29uQ29sb3IpO1xuICAgIH1cblxuICAgIHNldFN0eWxlKGljb24sICcuc3dhbDItc3VjY2Vzcy1yaW5nJywgJ2JvcmRlckNvbG9yJywgcGFyYW1zLmljb25Db2xvcik7XG4gIH07XG5cbiAgdmFyIGljb25Db250ZW50ID0gZnVuY3Rpb24gaWNvbkNvbnRlbnQoY29udGVudCkge1xuICAgIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcIlwiLmNvbmNhdChzd2FsQ2xhc3Nlc1snaWNvbi1jb250ZW50J10sIFwiXFxcIj5cIikuY29uY2F0KGNvbnRlbnQsIFwiPC9kaXY+XCIpO1xuICB9O1xuXG4gIHZhciByZW5kZXJJbWFnZSA9IGZ1bmN0aW9uIHJlbmRlckltYWdlKGluc3RhbmNlLCBwYXJhbXMpIHtcbiAgICB2YXIgaW1hZ2UgPSBnZXRJbWFnZSgpO1xuXG4gICAgaWYgKCFwYXJhbXMuaW1hZ2VVcmwpIHtcbiAgICAgIHJldHVybiBoaWRlKGltYWdlKTtcbiAgICB9XG5cbiAgICBzaG93KGltYWdlLCAnJyk7IC8vIFNyYywgYWx0XG5cbiAgICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHBhcmFtcy5pbWFnZVVybCk7XG4gICAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdhbHQnLCBwYXJhbXMuaW1hZ2VBbHQpOyAvLyBXaWR0aCwgaGVpZ2h0XG5cbiAgICBhcHBseU51bWVyaWNhbFN0eWxlKGltYWdlLCAnd2lkdGgnLCBwYXJhbXMuaW1hZ2VXaWR0aCk7XG4gICAgYXBwbHlOdW1lcmljYWxTdHlsZShpbWFnZSwgJ2hlaWdodCcsIHBhcmFtcy5pbWFnZUhlaWdodCk7IC8vIENsYXNzXG5cbiAgICBpbWFnZS5jbGFzc05hbWUgPSBzd2FsQ2xhc3Nlcy5pbWFnZTtcbiAgICBhcHBseUN1c3RvbUNsYXNzKGltYWdlLCBwYXJhbXMsICdpbWFnZScpO1xuICB9O1xuXG4gIHZhciBjdXJyZW50U3RlcHMgPSBbXTtcbiAgLypcbiAgICogR2xvYmFsIGZ1bmN0aW9uIGZvciBjaGFpbmluZyBzd2VldEFsZXJ0IHBvcHVwc1xuICAgKi9cblxuICB2YXIgcXVldWUgPSBmdW5jdGlvbiBxdWV1ZShzdGVwcykge1xuICAgIHZhciBTd2FsID0gdGhpcztcbiAgICBjdXJyZW50U3RlcHMgPSBzdGVwcztcblxuICAgIHZhciByZXNldEFuZFJlc29sdmUgPSBmdW5jdGlvbiByZXNldEFuZFJlc29sdmUocmVzb2x2ZSwgdmFsdWUpIHtcbiAgICAgIGN1cnJlbnRTdGVwcyA9IFtdO1xuICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgfTtcblxuICAgIHZhciBxdWV1ZVJlc3VsdCA9IFtdO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgKGZ1bmN0aW9uIHN0ZXAoaSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGkgPCBjdXJyZW50U3RlcHMubGVuZ3RoKSB7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dhbDItcXVldWUtc3RlcCcsIGkpO1xuICAgICAgICAgIFN3YWwuZmlyZShjdXJyZW50U3RlcHNbaV0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQudmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHF1ZXVlUmVzdWx0LnB1c2gocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgc3RlcChpICsgMSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzZXRBbmRSZXNvbHZlKHJlc29sdmUsIHtcbiAgICAgICAgICAgICAgICBkaXNtaXNzOiByZXN1bHQuZGlzbWlzc1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNldEFuZFJlc29sdmUocmVzb2x2ZSwge1xuICAgICAgICAgICAgdmFsdWU6IHF1ZXVlUmVzdWx0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pKDApO1xuICAgIH0pO1xuICB9O1xuICAvKlxuICAgKiBHbG9iYWwgZnVuY3Rpb24gZm9yIGdldHRpbmcgdGhlIGluZGV4IG9mIGN1cnJlbnQgcG9wdXAgaW4gcXVldWVcbiAgICovXG5cbiAgdmFyIGdldFF1ZXVlU3RlcCA9IGZ1bmN0aW9uIGdldFF1ZXVlU3RlcCgpIHtcbiAgICByZXR1cm4gZ2V0Q29udGFpbmVyKCkgJiYgZ2V0Q29udGFpbmVyKCkuZ2V0QXR0cmlidXRlKCdkYXRhLXF1ZXVlLXN0ZXAnKTtcbiAgfTtcbiAgLypcbiAgICogR2xvYmFsIGZ1bmN0aW9uIGZvciBpbnNlcnRpbmcgYSBwb3B1cCB0byB0aGUgcXVldWVcbiAgICovXG5cbiAgdmFyIGluc2VydFF1ZXVlU3RlcCA9IGZ1bmN0aW9uIGluc2VydFF1ZXVlU3RlcChzdGVwLCBpbmRleCkge1xuICAgIGlmIChpbmRleCAmJiBpbmRleCA8IGN1cnJlbnRTdGVwcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBjdXJyZW50U3RlcHMuc3BsaWNlKGluZGV4LCAwLCBzdGVwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0ZXBzLnB1c2goc3RlcCk7XG4gIH07XG4gIC8qXG4gICAqIEdsb2JhbCBmdW5jdGlvbiBmb3IgZGVsZXRpbmcgYSBwb3B1cCBmcm9tIHRoZSBxdWV1ZVxuICAgKi9cblxuICB2YXIgZGVsZXRlUXVldWVTdGVwID0gZnVuY3Rpb24gZGVsZXRlUXVldWVTdGVwKGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBjdXJyZW50U3RlcHNbaW5kZXhdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3VycmVudFN0ZXBzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjcmVhdGVTdGVwRWxlbWVudCA9IGZ1bmN0aW9uIGNyZWF0ZVN0ZXBFbGVtZW50KHN0ZXApIHtcbiAgICB2YXIgc3RlcEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICBhZGRDbGFzcyhzdGVwRWwsIHN3YWxDbGFzc2VzWydwcm9ncmVzcy1zdGVwJ10pO1xuICAgIHNldElubmVySHRtbChzdGVwRWwsIHN0ZXApO1xuICAgIHJldHVybiBzdGVwRWw7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUxpbmVFbGVtZW50ID0gZnVuY3Rpb24gY3JlYXRlTGluZUVsZW1lbnQocGFyYW1zKSB7XG4gICAgdmFyIGxpbmVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgYWRkQ2xhc3MobGluZUVsLCBzd2FsQ2xhc3Nlc1sncHJvZ3Jlc3Mtc3RlcC1saW5lJ10pO1xuXG4gICAgaWYgKHBhcmFtcy5wcm9ncmVzc1N0ZXBzRGlzdGFuY2UpIHtcbiAgICAgIGxpbmVFbC5zdHlsZS53aWR0aCA9IHBhcmFtcy5wcm9ncmVzc1N0ZXBzRGlzdGFuY2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmVFbDtcbiAgfTtcblxuICB2YXIgcmVuZGVyUHJvZ3Jlc3NTdGVwcyA9IGZ1bmN0aW9uIHJlbmRlclByb2dyZXNzU3RlcHMoaW5zdGFuY2UsIHBhcmFtcykge1xuICAgIHZhciBwcm9ncmVzc1N0ZXBzQ29udGFpbmVyID0gZ2V0UHJvZ3Jlc3NTdGVwcygpO1xuXG4gICAgaWYgKCFwYXJhbXMucHJvZ3Jlc3NTdGVwcyB8fCBwYXJhbXMucHJvZ3Jlc3NTdGVwcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBoaWRlKHByb2dyZXNzU3RlcHNDb250YWluZXIpO1xuICAgIH1cblxuICAgIHNob3cocHJvZ3Jlc3NTdGVwc0NvbnRhaW5lcik7XG4gICAgcHJvZ3Jlc3NTdGVwc0NvbnRhaW5lci50ZXh0Q29udGVudCA9ICcnO1xuICAgIHZhciBjdXJyZW50UHJvZ3Jlc3NTdGVwID0gcGFyc2VJbnQocGFyYW1zLmN1cnJlbnRQcm9ncmVzc1N0ZXAgPT09IHVuZGVmaW5lZCA/IGdldFF1ZXVlU3RlcCgpIDogcGFyYW1zLmN1cnJlbnRQcm9ncmVzc1N0ZXApO1xuXG4gICAgaWYgKGN1cnJlbnRQcm9ncmVzc1N0ZXAgPj0gcGFyYW1zLnByb2dyZXNzU3RlcHMubGVuZ3RoKSB7XG4gICAgICB3YXJuKCdJbnZhbGlkIGN1cnJlbnRQcm9ncmVzc1N0ZXAgcGFyYW1ldGVyLCBpdCBzaG91bGQgYmUgbGVzcyB0aGFuIHByb2dyZXNzU3RlcHMubGVuZ3RoICcgKyAnKGN1cnJlbnRQcm9ncmVzc1N0ZXAgbGlrZSBKUyBhcnJheXMgc3RhcnRzIGZyb20gMCknKTtcbiAgICB9XG5cbiAgICBwYXJhbXMucHJvZ3Jlc3NTdGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGVwLCBpbmRleCkge1xuICAgICAgdmFyIHN0ZXBFbCA9IGNyZWF0ZVN0ZXBFbGVtZW50KHN0ZXApO1xuICAgICAgcHJvZ3Jlc3NTdGVwc0NvbnRhaW5lci5hcHBlbmRDaGlsZChzdGVwRWwpO1xuXG4gICAgICBpZiAoaW5kZXggPT09IGN1cnJlbnRQcm9ncmVzc1N0ZXApIHtcbiAgICAgICAgYWRkQ2xhc3Moc3RlcEVsLCBzd2FsQ2xhc3Nlc1snYWN0aXZlLXByb2dyZXNzLXN0ZXAnXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmRleCAhPT0gcGFyYW1zLnByb2dyZXNzU3RlcHMubGVuZ3RoIC0gMSkge1xuICAgICAgICB2YXIgbGluZUVsID0gY3JlYXRlTGluZUVsZW1lbnQocGFyYW1zKTtcbiAgICAgICAgcHJvZ3Jlc3NTdGVwc0NvbnRhaW5lci5hcHBlbmRDaGlsZChsaW5lRWwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZW5kZXJUaXRsZSA9IGZ1bmN0aW9uIHJlbmRlclRpdGxlKGluc3RhbmNlLCBwYXJhbXMpIHtcbiAgICB2YXIgdGl0bGUgPSBnZXRUaXRsZSgpO1xuICAgIHRvZ2dsZSh0aXRsZSwgcGFyYW1zLnRpdGxlIHx8IHBhcmFtcy50aXRsZVRleHQpO1xuXG4gICAgaWYgKHBhcmFtcy50aXRsZSkge1xuICAgICAgcGFyc2VIdG1sVG9Db250YWluZXIocGFyYW1zLnRpdGxlLCB0aXRsZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50aXRsZVRleHQpIHtcbiAgICAgIHRpdGxlLmlubmVyVGV4dCA9IHBhcmFtcy50aXRsZVRleHQ7XG4gICAgfSAvLyBDdXN0b20gY2xhc3NcblxuXG4gICAgYXBwbHlDdXN0b21DbGFzcyh0aXRsZSwgcGFyYW1zLCAndGl0bGUnKTtcbiAgfTtcblxuICB2YXIgcmVuZGVySGVhZGVyID0gZnVuY3Rpb24gcmVuZGVySGVhZGVyKGluc3RhbmNlLCBwYXJhbXMpIHtcbiAgICB2YXIgaGVhZGVyID0gZ2V0SGVhZGVyKCk7IC8vIEN1c3RvbSBjbGFzc1xuXG4gICAgYXBwbHlDdXN0b21DbGFzcyhoZWFkZXIsIHBhcmFtcywgJ2hlYWRlcicpOyAvLyBQcm9ncmVzcyBzdGVwc1xuXG4gICAgcmVuZGVyUHJvZ3Jlc3NTdGVwcyhpbnN0YW5jZSwgcGFyYW1zKTsgLy8gSWNvblxuXG4gICAgcmVuZGVySWNvbihpbnN0YW5jZSwgcGFyYW1zKTsgLy8gSW1hZ2VcblxuICAgIHJlbmRlckltYWdlKGluc3RhbmNlLCBwYXJhbXMpOyAvLyBUaXRsZVxuXG4gICAgcmVuZGVyVGl0bGUoaW5zdGFuY2UsIHBhcmFtcyk7IC8vIENsb3NlIGJ1dHRvblxuXG4gICAgcmVuZGVyQ2xvc2VCdXR0b24oaW5zdGFuY2UsIHBhcmFtcyk7XG4gIH07XG5cbiAgdmFyIHJlbmRlclBvcHVwID0gZnVuY3Rpb24gcmVuZGVyUG9wdXAoaW5zdGFuY2UsIHBhcmFtcykge1xuICAgIHZhciBwb3B1cCA9IGdldFBvcHVwKCk7IC8vIFdpZHRoXG5cbiAgICBhcHBseU51bWVyaWNhbFN0eWxlKHBvcHVwLCAnd2lkdGgnLCBwYXJhbXMud2lkdGgpOyAvLyBQYWRkaW5nXG5cbiAgICBhcHBseU51bWVyaWNhbFN0eWxlKHBvcHVwLCAncGFkZGluZycsIHBhcmFtcy5wYWRkaW5nKTsgLy8gQmFja2dyb3VuZFxuXG4gICAgaWYgKHBhcmFtcy5iYWNrZ3JvdW5kKSB7XG4gICAgICBwb3B1cC5zdHlsZS5iYWNrZ3JvdW5kID0gcGFyYW1zLmJhY2tncm91bmQ7XG4gICAgfSAvLyBDbGFzc2VzXG5cblxuICAgIGFkZENsYXNzZXMocG9wdXAsIHBhcmFtcyk7XG4gIH07XG5cbiAgdmFyIGFkZENsYXNzZXMgPSBmdW5jdGlvbiBhZGRDbGFzc2VzKHBvcHVwLCBwYXJhbXMpIHtcbiAgICAvLyBEZWZhdWx0IENsYXNzICsgc2hvd0NsYXNzIHdoZW4gdXBkYXRpbmcgU3dhbC51cGRhdGUoe30pXG4gICAgcG9wdXAuY2xhc3NOYW1lID0gXCJcIi5jb25jYXQoc3dhbENsYXNzZXMucG9wdXAsIFwiIFwiKS5jb25jYXQoaXNWaXNpYmxlKHBvcHVwKSA/IHBhcmFtcy5zaG93Q2xhc3MucG9wdXAgOiAnJyk7XG5cbiAgICBpZiAocGFyYW1zLnRvYXN0KSB7XG4gICAgICBhZGRDbGFzcyhbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBkb2N1bWVudC5ib2R5XSwgc3dhbENsYXNzZXNbJ3RvYXN0LXNob3duJ10pO1xuICAgICAgYWRkQ2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLnRvYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWRkQ2xhc3MocG9wdXAsIHN3YWxDbGFzc2VzLm1vZGFsKTtcbiAgICB9IC8vIEN1c3RvbSBjbGFzc1xuXG5cbiAgICBhcHBseUN1c3RvbUNsYXNzKHBvcHVwLCBwYXJhbXMsICdwb3B1cCcpO1xuXG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuY3VzdG9tQ2xhc3MgPT09ICdzdHJpbmcnKSB7XG4gICAgICBhZGRDbGFzcyhwb3B1cCwgcGFyYW1zLmN1c3RvbUNsYXNzKTtcbiAgICB9IC8vIEljb24gY2xhc3MgKCMxODQyKVxuXG5cbiAgICBpZiAocGFyYW1zLmljb24pIHtcbiAgICAgIGFkZENsYXNzKHBvcHVwLCBzd2FsQ2xhc3Nlc1tcImljb24tXCIuY29uY2F0KHBhcmFtcy5pY29uKV0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGluc3RhbmNlLCBwYXJhbXMpIHtcbiAgICByZW5kZXJQb3B1cChpbnN0YW5jZSwgcGFyYW1zKTtcbiAgICByZW5kZXJDb250YWluZXIoaW5zdGFuY2UsIHBhcmFtcyk7XG4gICAgcmVuZGVySGVhZGVyKGluc3RhbmNlLCBwYXJhbXMpO1xuICAgIHJlbmRlckNvbnRlbnQoaW5zdGFuY2UsIHBhcmFtcyk7XG4gICAgcmVuZGVyQWN0aW9ucyhpbnN0YW5jZSwgcGFyYW1zKTtcbiAgICByZW5kZXJGb290ZXIoaW5zdGFuY2UsIHBhcmFtcyk7XG5cbiAgICBpZiAodHlwZW9mIHBhcmFtcy5kaWRSZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBhcmFtcy5kaWRSZW5kZXIoZ2V0UG9wdXAoKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGFyYW1zLm9uUmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwYXJhbXMub25SZW5kZXIoZ2V0UG9wdXAoKSk7IC8vIEBkZXByZWNhdGVkXG4gICAgfVxuICB9O1xuXG4gIC8qXG4gICAqIEdsb2JhbCBmdW5jdGlvbiB0byBkZXRlcm1pbmUgaWYgU3dlZXRBbGVydDIgcG9wdXAgaXMgc2hvd25cbiAgICovXG5cbiAgdmFyIGlzVmlzaWJsZSQxID0gZnVuY3Rpb24gaXNWaXNpYmxlJCQxKCkge1xuICAgIHJldHVybiBpc1Zpc2libGUoZ2V0UG9wdXAoKSk7XG4gIH07XG4gIC8qXG4gICAqIEdsb2JhbCBmdW5jdGlvbiB0byBjbGljayAnQ29uZmlybScgYnV0dG9uXG4gICAqL1xuXG4gIHZhciBjbGlja0NvbmZpcm0gPSBmdW5jdGlvbiBjbGlja0NvbmZpcm0oKSB7XG4gICAgcmV0dXJuIGdldENvbmZpcm1CdXR0b24oKSAmJiBnZXRDb25maXJtQnV0dG9uKCkuY2xpY2soKTtcbiAgfTtcbiAgLypcbiAgICogR2xvYmFsIGZ1bmN0aW9uIHRvIGNsaWNrICdEZW55JyBidXR0b25cbiAgICovXG5cbiAgdmFyIGNsaWNrRGVueSA9IGZ1bmN0aW9uIGNsaWNrRGVueSgpIHtcbiAgICByZXR1cm4gZ2V0RGVueUJ1dHRvbigpICYmIGdldERlbnlCdXR0b24oKS5jbGljaygpO1xuICB9O1xuICAvKlxuICAgKiBHbG9iYWwgZnVuY3Rpb24gdG8gY2xpY2sgJ0NhbmNlbCcgYnV0dG9uXG4gICAqL1xuXG4gIHZhciBjbGlja0NhbmNlbCA9IGZ1bmN0aW9uIGNsaWNrQ2FuY2VsKCkge1xuICAgIHJldHVybiBnZXRDYW5jZWxCdXR0b24oKSAmJiBnZXRDYW5jZWxCdXR0b24oKS5jbGljaygpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGZpcmUoKSB7XG4gICAgdmFyIFN3YWwgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfY29uc3RydWN0KFN3YWwsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXh0ZW5kZWQgdmVyc2lvbiBvZiBgU3dhbGAgY29udGFpbmluZyBgcGFyYW1zYCBhcyBkZWZhdWx0cy5cbiAgICogVXNlZnVsIGZvciByZXVzaW5nIFN3YWwgY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqIEJlZm9yZTpcbiAgICogY29uc3QgdGV4dFByb21wdE9wdGlvbnMgPSB7IGlucHV0OiAndGV4dCcsIHNob3dDYW5jZWxCdXR0b246IHRydWUgfVxuICAgKiBjb25zdCB7dmFsdWU6IGZpcnN0TmFtZX0gPSBhd2FpdCBTd2FsLmZpcmUoeyAuLi50ZXh0UHJvbXB0T3B0aW9ucywgdGl0bGU6ICdXaGF0IGlzIHlvdXIgZmlyc3QgbmFtZT8nIH0pXG4gICAqIGNvbnN0IHt2YWx1ZTogbGFzdE5hbWV9ID0gYXdhaXQgU3dhbC5maXJlKHsgLi4udGV4dFByb21wdE9wdGlvbnMsIHRpdGxlOiAnV2hhdCBpcyB5b3VyIGxhc3QgbmFtZT8nIH0pXG4gICAqXG4gICAqIEFmdGVyOlxuICAgKiBjb25zdCBUZXh0UHJvbXB0ID0gU3dhbC5taXhpbih7IGlucHV0OiAndGV4dCcsIHNob3dDYW5jZWxCdXR0b246IHRydWUgfSlcbiAgICogY29uc3Qge3ZhbHVlOiBmaXJzdE5hbWV9ID0gYXdhaXQgVGV4dFByb21wdCgnV2hhdCBpcyB5b3VyIGZpcnN0IG5hbWU/JylcbiAgICogY29uc3Qge3ZhbHVlOiBsYXN0TmFtZX0gPSBhd2FpdCBUZXh0UHJvbXB0KCdXaGF0IGlzIHlvdXIgbGFzdCBuYW1lPycpXG4gICAqXG4gICAqIEBwYXJhbSBtaXhpblBhcmFtc1xuICAgKi9cbiAgZnVuY3Rpb24gbWl4aW4obWl4aW5QYXJhbXMpIHtcbiAgICB2YXIgTWl4aW5Td2FsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfdGhpcykge1xuICAgICAgX2luaGVyaXRzKE1peGluU3dhbCwgX3RoaXMpO1xuXG4gICAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKE1peGluU3dhbCk7XG5cbiAgICAgIGZ1bmN0aW9uIE1peGluU3dhbCgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1peGluU3dhbCk7XG5cbiAgICAgICAgcmV0dXJuIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICBfY3JlYXRlQ2xhc3MoTWl4aW5Td2FsLCBbe1xuICAgICAgICBrZXk6IFwiX21haW5cIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tYWluKHBhcmFtcykge1xuICAgICAgICAgIHJldHVybiBfZ2V0KF9nZXRQcm90b3R5cGVPZihNaXhpblN3YWwucHJvdG90eXBlKSwgXCJfbWFpblwiLCB0aGlzKS5jYWxsKHRoaXMsIF9leHRlbmRzKHt9LCBtaXhpblBhcmFtcywgcGFyYW1zKSk7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIE1peGluU3dhbDtcbiAgICB9KHRoaXMpO1xuXG4gICAgcmV0dXJuIE1peGluU3dhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IHNwaW5uZXIgaW5zdGVhZCBvZiBDb25maXJtIGJ1dHRvblxuICAgKi9cblxuICB2YXIgc2hvd0xvYWRpbmcgPSBmdW5jdGlvbiBzaG93TG9hZGluZygpIHtcbiAgICB2YXIgcG9wdXAgPSBnZXRQb3B1cCgpO1xuXG4gICAgaWYgKCFwb3B1cCkge1xuICAgICAgU3dhbC5maXJlKCk7XG4gICAgfVxuXG4gICAgcG9wdXAgPSBnZXRQb3B1cCgpO1xuICAgIHZhciBhY3Rpb25zID0gZ2V0QWN0aW9ucygpO1xuICAgIHZhciBjb25maXJtQnV0dG9uID0gZ2V0Q29uZmlybUJ1dHRvbigpO1xuICAgIHZhciBsb2FkZXIgPSBnZXRMb2FkZXIoKTtcbiAgICBzaG93KGFjdGlvbnMpO1xuICAgIGhpZGUoY29uZmlybUJ1dHRvbik7XG4gICAgYWRkQ2xhc3MoW3BvcHVwLCBhY3Rpb25zXSwgc3dhbENsYXNzZXMubG9hZGluZyk7XG4gICAgc2hvdyhsb2FkZXIpO1xuICAgIHBvcHVwLnNldEF0dHJpYnV0ZSgnZGF0YS1sb2FkaW5nJywgdHJ1ZSk7XG4gICAgcG9wdXAuc2V0QXR0cmlidXRlKCdhcmlhLWJ1c3knLCB0cnVlKTtcbiAgICBwb3B1cC5mb2N1cygpO1xuICB9O1xuXG4gIHZhciBSRVNUT1JFX0ZPQ1VTX1RJTUVPVVQgPSAxMDA7XG5cbiAgdmFyIGdsb2JhbFN0YXRlID0ge307XG5cbiAgdmFyIGZvY3VzUHJldmlvdXNBY3RpdmVFbGVtZW50ID0gZnVuY3Rpb24gZm9jdXNQcmV2aW91c0FjdGl2ZUVsZW1lbnQoKSB7XG4gICAgaWYgKGdsb2JhbFN0YXRlLnByZXZpb3VzQWN0aXZlRWxlbWVudCAmJiBnbG9iYWxTdGF0ZS5wcmV2aW91c0FjdGl2ZUVsZW1lbnQuZm9jdXMpIHtcbiAgICAgIGdsb2JhbFN0YXRlLnByZXZpb3VzQWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgZ2xvYmFsU3RhdGUucHJldmlvdXNBY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LmJvZHkpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuZm9jdXMoKTtcbiAgICB9XG4gIH07IC8vIFJlc3RvcmUgcHJldmlvdXMgYWN0aXZlIChmb2N1c2VkKSBlbGVtZW50XG5cblxuICB2YXIgcmVzdG9yZUFjdGl2ZUVsZW1lbnQgPSBmdW5jdGlvbiByZXN0b3JlQWN0aXZlRWxlbWVudCgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIHZhciB4ID0gd2luZG93LnNjcm9sbFg7XG4gICAgICB2YXIgeSA9IHdpbmRvdy5zY3JvbGxZO1xuICAgICAgZ2xvYmFsU3RhdGUucmVzdG9yZUZvY3VzVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBmb2N1c1ByZXZpb3VzQWN0aXZlRWxlbWVudCgpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9LCBSRVNUT1JFX0ZPQ1VTX1RJTUVPVVQpOyAvLyBpc3N1ZXMvOTAwXG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG4gICAgICBpZiAodHlwZW9mIHggIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBJRSBkb2Vzbid0IGhhdmUgc2Nyb2xsWC9zY3JvbGxZIHN1cHBvcnRcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKHgsIHkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJZiBgdGltZXJgIHBhcmFtZXRlciBpcyBzZXQsIHJldHVybnMgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBvZiB0aW1lciByZW1haW5lZC5cbiAgICogT3RoZXJ3aXNlLCByZXR1cm5zIHVuZGVmaW5lZC5cbiAgICovXG5cbiAgdmFyIGdldFRpbWVyTGVmdCA9IGZ1bmN0aW9uIGdldFRpbWVyTGVmdCgpIHtcbiAgICByZXR1cm4gZ2xvYmFsU3RhdGUudGltZW91dCAmJiBnbG9iYWxTdGF0ZS50aW1lb3V0LmdldFRpbWVyTGVmdCgpO1xuICB9O1xuICAvKipcbiAgICogU3RvcCB0aW1lci4gUmV0dXJucyBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIG9mIHRpbWVyIHJlbWFpbmVkLlxuICAgKiBJZiBgdGltZXJgIHBhcmFtZXRlciBpc24ndCBzZXQsIHJldHVybnMgdW5kZWZpbmVkLlxuICAgKi9cblxuICB2YXIgc3RvcFRpbWVyID0gZnVuY3Rpb24gc3RvcFRpbWVyKCkge1xuICAgIGlmIChnbG9iYWxTdGF0ZS50aW1lb3V0KSB7XG4gICAgICBzdG9wVGltZXJQcm9ncmVzc0JhcigpO1xuICAgICAgcmV0dXJuIGdsb2JhbFN0YXRlLnRpbWVvdXQuc3RvcCgpO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIFJlc3VtZSB0aW1lci4gUmV0dXJucyBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIG9mIHRpbWVyIHJlbWFpbmVkLlxuICAgKiBJZiBgdGltZXJgIHBhcmFtZXRlciBpc24ndCBzZXQsIHJldHVybnMgdW5kZWZpbmVkLlxuICAgKi9cblxuICB2YXIgcmVzdW1lVGltZXIgPSBmdW5jdGlvbiByZXN1bWVUaW1lcigpIHtcbiAgICBpZiAoZ2xvYmFsU3RhdGUudGltZW91dCkge1xuICAgICAgdmFyIHJlbWFpbmluZyA9IGdsb2JhbFN0YXRlLnRpbWVvdXQuc3RhcnQoKTtcbiAgICAgIGFuaW1hdGVUaW1lclByb2dyZXNzQmFyKHJlbWFpbmluZyk7XG4gICAgICByZXR1cm4gcmVtYWluaW5nO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIFJlc3VtZSB0aW1lci4gUmV0dXJucyBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIG9mIHRpbWVyIHJlbWFpbmVkLlxuICAgKiBJZiBgdGltZXJgIHBhcmFtZXRlciBpc24ndCBzZXQsIHJldHVybnMgdW5kZWZpbmVkLlxuICAgKi9cblxuICB2YXIgdG9nZ2xlVGltZXIgPSBmdW5jdGlvbiB0b2dnbGVUaW1lcigpIHtcbiAgICB2YXIgdGltZXIgPSBnbG9iYWxTdGF0ZS50aW1lb3V0O1xuICAgIHJldHVybiB0aW1lciAmJiAodGltZXIucnVubmluZyA/IHN0b3BUaW1lcigpIDogcmVzdW1lVGltZXIoKSk7XG4gIH07XG4gIC8qKlxuICAgKiBJbmNyZWFzZSB0aW1lci4gUmV0dXJucyBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIG9mIGFuIHVwZGF0ZWQgdGltZXIuXG4gICAqIElmIGB0aW1lcmAgcGFyYW1ldGVyIGlzbid0IHNldCwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAqL1xuXG4gIHZhciBpbmNyZWFzZVRpbWVyID0gZnVuY3Rpb24gaW5jcmVhc2VUaW1lcihuKSB7XG4gICAgaWYgKGdsb2JhbFN0YXRlLnRpbWVvdXQpIHtcbiAgICAgIHZhciByZW1haW5pbmcgPSBnbG9iYWxTdGF0ZS50aW1lb3V0LmluY3JlYXNlKG4pO1xuICAgICAgYW5pbWF0ZVRpbWVyUHJvZ3Jlc3NCYXIocmVtYWluaW5nLCB0cnVlKTtcbiAgICAgIHJldHVybiByZW1haW5pbmc7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogQ2hlY2sgaWYgdGltZXIgaXMgcnVubmluZy4gUmV0dXJucyB0cnVlIGlmIHRpbWVyIGlzIHJ1bm5pbmdcbiAgICogb3IgZmFsc2UgaWYgdGltZXIgaXMgcGF1c2VkIG9yIHN0b3BwZWQuXG4gICAqIElmIGB0aW1lcmAgcGFyYW1ldGVyIGlzbid0IHNldCwgcmV0dXJucyB1bmRlZmluZWRcbiAgICovXG5cbiAgdmFyIGlzVGltZXJSdW5uaW5nID0gZnVuY3Rpb24gaXNUaW1lclJ1bm5pbmcoKSB7XG4gICAgcmV0dXJuIGdsb2JhbFN0YXRlLnRpbWVvdXQgJiYgZ2xvYmFsU3RhdGUudGltZW91dC5pc1J1bm5pbmcoKTtcbiAgfTtcblxuICB2YXIgZGVmYXVsdFBhcmFtcyA9IHtcbiAgICB0aXRsZTogJycsXG4gICAgdGl0bGVUZXh0OiAnJyxcbiAgICB0ZXh0OiAnJyxcbiAgICBodG1sOiAnJyxcbiAgICBmb290ZXI6ICcnLFxuICAgIGljb246IHVuZGVmaW5lZCxcbiAgICBpY29uQ29sb3I6IHVuZGVmaW5lZCxcbiAgICBpY29uSHRtbDogdW5kZWZpbmVkLFxuICAgIHRvYXN0OiBmYWxzZSxcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgc2hvd0NsYXNzOiB7XG4gICAgICBwb3B1cDogJ3N3YWwyLXNob3cnLFxuICAgICAgYmFja2Ryb3A6ICdzd2FsMi1iYWNrZHJvcC1zaG93JyxcbiAgICAgIGljb246ICdzd2FsMi1pY29uLXNob3cnXG4gICAgfSxcbiAgICBoaWRlQ2xhc3M6IHtcbiAgICAgIHBvcHVwOiAnc3dhbDItaGlkZScsXG4gICAgICBiYWNrZHJvcDogJ3N3YWwyLWJhY2tkcm9wLWhpZGUnLFxuICAgICAgaWNvbjogJ3N3YWwyLWljb24taGlkZSdcbiAgICB9LFxuICAgIGN1c3RvbUNsYXNzOiB1bmRlZmluZWQsXG4gICAgdGFyZ2V0OiAnYm9keScsXG4gICAgYmFja2Ryb3A6IHRydWUsXG4gICAgaGVpZ2h0QXV0bzogdHJ1ZSxcbiAgICBhbGxvd091dHNpZGVDbGljazogdHJ1ZSxcbiAgICBhbGxvd0VzY2FwZUtleTogdHJ1ZSxcbiAgICBhbGxvd0VudGVyS2V5OiB0cnVlLFxuICAgIHN0b3BLZXlkb3duUHJvcGFnYXRpb246IHRydWUsXG4gICAga2V5ZG93bkxpc3RlbmVyQ2FwdHVyZTogZmFsc2UsXG4gICAgc2hvd0NvbmZpcm1CdXR0b246IHRydWUsXG4gICAgc2hvd0RlbnlCdXR0b246IGZhbHNlLFxuICAgIHNob3dDYW5jZWxCdXR0b246IGZhbHNlLFxuICAgIHByZUNvbmZpcm06IHVuZGVmaW5lZCxcbiAgICBjb25maXJtQnV0dG9uVGV4dDogJ09LJyxcbiAgICBjb25maXJtQnV0dG9uQXJpYUxhYmVsOiAnJyxcbiAgICBjb25maXJtQnV0dG9uQ29sb3I6IHVuZGVmaW5lZCxcbiAgICBkZW55QnV0dG9uVGV4dDogJ05vJyxcbiAgICBkZW55QnV0dG9uQXJpYUxhYmVsOiAnJyxcbiAgICBkZW55QnV0dG9uQ29sb3I6IHVuZGVmaW5lZCxcbiAgICBjYW5jZWxCdXR0b25UZXh0OiAnQ2FuY2VsJyxcbiAgICBjYW5jZWxCdXR0b25BcmlhTGFiZWw6ICcnLFxuICAgIGNhbmNlbEJ1dHRvbkNvbG9yOiB1bmRlZmluZWQsXG4gICAgYnV0dG9uc1N0eWxpbmc6IHRydWUsXG4gICAgcmV2ZXJzZUJ1dHRvbnM6IGZhbHNlLFxuICAgIGZvY3VzQ29uZmlybTogdHJ1ZSxcbiAgICBmb2N1c0Rlbnk6IGZhbHNlLFxuICAgIGZvY3VzQ2FuY2VsOiBmYWxzZSxcbiAgICBzaG93Q2xvc2VCdXR0b246IGZhbHNlLFxuICAgIGNsb3NlQnV0dG9uSHRtbDogJyZ0aW1lczsnLFxuICAgIGNsb3NlQnV0dG9uQXJpYUxhYmVsOiAnQ2xvc2UgdGhpcyBkaWFsb2cnLFxuICAgIGxvYWRlckh0bWw6ICcnLFxuICAgIHNob3dMb2FkZXJPbkNvbmZpcm06IGZhbHNlLFxuICAgIGltYWdlVXJsOiB1bmRlZmluZWQsXG4gICAgaW1hZ2VXaWR0aDogdW5kZWZpbmVkLFxuICAgIGltYWdlSGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgaW1hZ2VBbHQ6ICcnLFxuICAgIHRpbWVyOiB1bmRlZmluZWQsXG4gICAgdGltZXJQcm9ncmVzc0JhcjogZmFsc2UsXG4gICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICBwYWRkaW5nOiB1bmRlZmluZWQsXG4gICAgYmFja2dyb3VuZDogdW5kZWZpbmVkLFxuICAgIGlucHV0OiB1bmRlZmluZWQsXG4gICAgaW5wdXRQbGFjZWhvbGRlcjogJycsXG4gICAgaW5wdXRMYWJlbDogJycsXG4gICAgaW5wdXRWYWx1ZTogJycsXG4gICAgaW5wdXRPcHRpb25zOiB7fSxcbiAgICBpbnB1dEF1dG9UcmltOiB0cnVlLFxuICAgIGlucHV0QXR0cmlidXRlczoge30sXG4gICAgaW5wdXRWYWxpZGF0b3I6IHVuZGVmaW5lZCxcbiAgICByZXR1cm5JbnB1dFZhbHVlT25EZW55OiBmYWxzZSxcbiAgICB2YWxpZGF0aW9uTWVzc2FnZTogdW5kZWZpbmVkLFxuICAgIGdyb3c6IGZhbHNlLFxuICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICBwcm9ncmVzc1N0ZXBzOiBbXSxcbiAgICBjdXJyZW50UHJvZ3Jlc3NTdGVwOiB1bmRlZmluZWQsXG4gICAgcHJvZ3Jlc3NTdGVwc0Rpc3RhbmNlOiB1bmRlZmluZWQsXG4gICAgb25CZWZvcmVPcGVuOiB1bmRlZmluZWQsXG4gICAgb25PcGVuOiB1bmRlZmluZWQsXG4gICAgd2lsbE9wZW46IHVuZGVmaW5lZCxcbiAgICBkaWRPcGVuOiB1bmRlZmluZWQsXG4gICAgb25SZW5kZXI6IHVuZGVmaW5lZCxcbiAgICBkaWRSZW5kZXI6IHVuZGVmaW5lZCxcbiAgICBvbkNsb3NlOiB1bmRlZmluZWQsXG4gICAgb25BZnRlckNsb3NlOiB1bmRlZmluZWQsXG4gICAgd2lsbENsb3NlOiB1bmRlZmluZWQsXG4gICAgZGlkQ2xvc2U6IHVuZGVmaW5lZCxcbiAgICBvbkRlc3Ryb3k6IHVuZGVmaW5lZCxcbiAgICBkaWREZXN0cm95OiB1bmRlZmluZWQsXG4gICAgc2Nyb2xsYmFyUGFkZGluZzogdHJ1ZVxuICB9O1xuICB2YXIgdXBkYXRhYmxlUGFyYW1zID0gWydhbGxvd0VzY2FwZUtleScsICdhbGxvd091dHNpZGVDbGljaycsICdiYWNrZ3JvdW5kJywgJ2J1dHRvbnNTdHlsaW5nJywgJ2NhbmNlbEJ1dHRvbkFyaWFMYWJlbCcsICdjYW5jZWxCdXR0b25Db2xvcicsICdjYW5jZWxCdXR0b25UZXh0JywgJ2Nsb3NlQnV0dG9uQXJpYUxhYmVsJywgJ2Nsb3NlQnV0dG9uSHRtbCcsICdjb25maXJtQnV0dG9uQXJpYUxhYmVsJywgJ2NvbmZpcm1CdXR0b25Db2xvcicsICdjb25maXJtQnV0dG9uVGV4dCcsICdjdXJyZW50UHJvZ3Jlc3NTdGVwJywgJ2N1c3RvbUNsYXNzJywgJ2RlbnlCdXR0b25BcmlhTGFiZWwnLCAnZGVueUJ1dHRvbkNvbG9yJywgJ2RlbnlCdXR0b25UZXh0JywgJ2RpZENsb3NlJywgJ2RpZERlc3Ryb3knLCAnZm9vdGVyJywgJ2hpZGVDbGFzcycsICdodG1sJywgJ2ljb24nLCAnaWNvbkNvbG9yJywgJ2ltYWdlQWx0JywgJ2ltYWdlSGVpZ2h0JywgJ2ltYWdlVXJsJywgJ2ltYWdlV2lkdGgnLCAnb25BZnRlckNsb3NlJywgJ29uQ2xvc2UnLCAnb25EZXN0cm95JywgJ3Byb2dyZXNzU3RlcHMnLCAncmV2ZXJzZUJ1dHRvbnMnLCAnc2hvd0NhbmNlbEJ1dHRvbicsICdzaG93Q2xvc2VCdXR0b24nLCAnc2hvd0NvbmZpcm1CdXR0b24nLCAnc2hvd0RlbnlCdXR0b24nLCAndGV4dCcsICd0aXRsZScsICd0aXRsZVRleHQnLCAnd2lsbENsb3NlJ107XG4gIHZhciBkZXByZWNhdGVkUGFyYW1zID0ge1xuICAgIGFuaW1hdGlvbjogJ3Nob3dDbGFzc1wiIGFuZCBcImhpZGVDbGFzcycsXG4gICAgb25CZWZvcmVPcGVuOiAnd2lsbE9wZW4nLFxuICAgIG9uT3BlbjogJ2RpZE9wZW4nLFxuICAgIG9uUmVuZGVyOiAnZGlkUmVuZGVyJyxcbiAgICBvbkNsb3NlOiAnd2lsbENsb3NlJyxcbiAgICBvbkFmdGVyQ2xvc2U6ICdkaWRDbG9zZScsXG4gICAgb25EZXN0cm95OiAnZGlkRGVzdHJveSdcbiAgfTtcbiAgdmFyIHRvYXN0SW5jb21wYXRpYmxlUGFyYW1zID0gWydhbGxvd091dHNpZGVDbGljaycsICdhbGxvd0VudGVyS2V5JywgJ2JhY2tkcm9wJywgJ2ZvY3VzQ29uZmlybScsICdmb2N1c0RlbnknLCAnZm9jdXNDYW5jZWwnLCAnaGVpZ2h0QXV0bycsICdrZXlkb3duTGlzdGVuZXJDYXB0dXJlJ107XG4gIC8qKlxuICAgKiBJcyB2YWxpZCBwYXJhbWV0ZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhcmFtTmFtZVxuICAgKi9cblxuICB2YXIgaXNWYWxpZFBhcmFtZXRlciA9IGZ1bmN0aW9uIGlzVmFsaWRQYXJhbWV0ZXIocGFyYW1OYW1lKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkZWZhdWx0UGFyYW1zLCBwYXJhbU5hbWUpO1xuICB9O1xuICAvKipcbiAgICogSXMgdmFsaWQgcGFyYW1ldGVyIGZvciBTd2FsLnVwZGF0ZSgpIG1ldGhvZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGFyYW1OYW1lXG4gICAqL1xuXG4gIHZhciBpc1VwZGF0YWJsZVBhcmFtZXRlciA9IGZ1bmN0aW9uIGlzVXBkYXRhYmxlUGFyYW1ldGVyKHBhcmFtTmFtZSkge1xuICAgIHJldHVybiB1cGRhdGFibGVQYXJhbXMuaW5kZXhPZihwYXJhbU5hbWUpICE9PSAtMTtcbiAgfTtcbiAgLyoqXG4gICAqIElzIGRlcHJlY2F0ZWQgcGFyYW1ldGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbU5hbWVcbiAgICovXG5cbiAgdmFyIGlzRGVwcmVjYXRlZFBhcmFtZXRlciA9IGZ1bmN0aW9uIGlzRGVwcmVjYXRlZFBhcmFtZXRlcihwYXJhbU5hbWUpIHtcbiAgICByZXR1cm4gZGVwcmVjYXRlZFBhcmFtc1twYXJhbU5hbWVdO1xuICB9O1xuXG4gIHZhciBjaGVja0lmUGFyYW1Jc1ZhbGlkID0gZnVuY3Rpb24gY2hlY2tJZlBhcmFtSXNWYWxpZChwYXJhbSkge1xuICAgIGlmICghaXNWYWxpZFBhcmFtZXRlcihwYXJhbSkpIHtcbiAgICAgIHdhcm4oXCJVbmtub3duIHBhcmFtZXRlciBcXFwiXCIuY29uY2F0KHBhcmFtLCBcIlxcXCJcIikpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY2hlY2tJZlRvYXN0UGFyYW1Jc1ZhbGlkID0gZnVuY3Rpb24gY2hlY2tJZlRvYXN0UGFyYW1Jc1ZhbGlkKHBhcmFtKSB7XG4gICAgaWYgKHRvYXN0SW5jb21wYXRpYmxlUGFyYW1zLmluZGV4T2YocGFyYW0pICE9PSAtMSkge1xuICAgICAgd2FybihcIlRoZSBwYXJhbWV0ZXIgXFxcIlwiLmNvbmNhdChwYXJhbSwgXCJcXFwiIGlzIGluY29tcGF0aWJsZSB3aXRoIHRvYXN0c1wiKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjaGVja0lmUGFyYW1Jc0RlcHJlY2F0ZWQgPSBmdW5jdGlvbiBjaGVja0lmUGFyYW1Jc0RlcHJlY2F0ZWQocGFyYW0pIHtcbiAgICBpZiAoaXNEZXByZWNhdGVkUGFyYW1ldGVyKHBhcmFtKSkge1xuICAgICAgd2FybkFib3V0RGVwcmVjYXRpb24ocGFyYW0sIGlzRGVwcmVjYXRlZFBhcmFtZXRlcihwYXJhbSkpO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIFNob3cgcmVsZXZhbnQgd2FybmluZ3MgZm9yIGdpdmVuIHBhcmFtc1xuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zXG4gICAqL1xuXG5cbiAgdmFyIHNob3dXYXJuaW5nc0ZvclBhcmFtcyA9IGZ1bmN0aW9uIHNob3dXYXJuaW5nc0ZvclBhcmFtcyhwYXJhbXMpIHtcbiAgICBmb3IgKHZhciBwYXJhbSBpbiBwYXJhbXMpIHtcbiAgICAgIGNoZWNrSWZQYXJhbUlzVmFsaWQocGFyYW0pO1xuXG4gICAgICBpZiAocGFyYW1zLnRvYXN0KSB7XG4gICAgICAgIGNoZWNrSWZUb2FzdFBhcmFtSXNWYWxpZChwYXJhbSk7XG4gICAgICB9XG5cbiAgICAgIGNoZWNrSWZQYXJhbUlzRGVwcmVjYXRlZChwYXJhbSk7XG4gICAgfVxuICB9O1xuXG5cblxuICB2YXIgc3RhdGljTWV0aG9kcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICBpc1ZhbGlkUGFyYW1ldGVyOiBpc1ZhbGlkUGFyYW1ldGVyLFxuICAgIGlzVXBkYXRhYmxlUGFyYW1ldGVyOiBpc1VwZGF0YWJsZVBhcmFtZXRlcixcbiAgICBpc0RlcHJlY2F0ZWRQYXJhbWV0ZXI6IGlzRGVwcmVjYXRlZFBhcmFtZXRlcixcbiAgICBhcmdzVG9QYXJhbXM6IGFyZ3NUb1BhcmFtcyxcbiAgICBpc1Zpc2libGU6IGlzVmlzaWJsZSQxLFxuICAgIGNsaWNrQ29uZmlybTogY2xpY2tDb25maXJtLFxuICAgIGNsaWNrRGVueTogY2xpY2tEZW55LFxuICAgIGNsaWNrQ2FuY2VsOiBjbGlja0NhbmNlbCxcbiAgICBnZXRDb250YWluZXI6IGdldENvbnRhaW5lcixcbiAgICBnZXRQb3B1cDogZ2V0UG9wdXAsXG4gICAgZ2V0VGl0bGU6IGdldFRpdGxlLFxuICAgIGdldENvbnRlbnQ6IGdldENvbnRlbnQsXG4gICAgZ2V0SHRtbENvbnRhaW5lcjogZ2V0SHRtbENvbnRhaW5lcixcbiAgICBnZXRJbWFnZTogZ2V0SW1hZ2UsXG4gICAgZ2V0SWNvbjogZ2V0SWNvbixcbiAgICBnZXRJY29uczogZ2V0SWNvbnMsXG4gICAgZ2V0SW5wdXRMYWJlbDogZ2V0SW5wdXRMYWJlbCxcbiAgICBnZXRDbG9zZUJ1dHRvbjogZ2V0Q2xvc2VCdXR0b24sXG4gICAgZ2V0QWN0aW9uczogZ2V0QWN0aW9ucyxcbiAgICBnZXRDb25maXJtQnV0dG9uOiBnZXRDb25maXJtQnV0dG9uLFxuICAgIGdldERlbnlCdXR0b246IGdldERlbnlCdXR0b24sXG4gICAgZ2V0Q2FuY2VsQnV0dG9uOiBnZXRDYW5jZWxCdXR0b24sXG4gICAgZ2V0SGVhZGVyOiBnZXRIZWFkZXIsXG4gICAgZ2V0Rm9vdGVyOiBnZXRGb290ZXIsXG4gICAgZ2V0VGltZXJQcm9ncmVzc0JhcjogZ2V0VGltZXJQcm9ncmVzc0JhcixcbiAgICBnZXRGb2N1c2FibGVFbGVtZW50czogZ2V0Rm9jdXNhYmxlRWxlbWVudHMsXG4gICAgZ2V0VmFsaWRhdGlvbk1lc3NhZ2U6IGdldFZhbGlkYXRpb25NZXNzYWdlLFxuICAgIGlzTG9hZGluZzogaXNMb2FkaW5nLFxuICAgIGZpcmU6IGZpcmUsXG4gICAgbWl4aW46IG1peGluLFxuICAgIHF1ZXVlOiBxdWV1ZSxcbiAgICBnZXRRdWV1ZVN0ZXA6IGdldFF1ZXVlU3RlcCxcbiAgICBpbnNlcnRRdWV1ZVN0ZXA6IGluc2VydFF1ZXVlU3RlcCxcbiAgICBkZWxldGVRdWV1ZVN0ZXA6IGRlbGV0ZVF1ZXVlU3RlcCxcbiAgICBzaG93TG9hZGluZzogc2hvd0xvYWRpbmcsXG4gICAgZW5hYmxlTG9hZGluZzogc2hvd0xvYWRpbmcsXG4gICAgZ2V0VGltZXJMZWZ0OiBnZXRUaW1lckxlZnQsXG4gICAgc3RvcFRpbWVyOiBzdG9wVGltZXIsXG4gICAgcmVzdW1lVGltZXI6IHJlc3VtZVRpbWVyLFxuICAgIHRvZ2dsZVRpbWVyOiB0b2dnbGVUaW1lcixcbiAgICBpbmNyZWFzZVRpbWVyOiBpbmNyZWFzZVRpbWVyLFxuICAgIGlzVGltZXJSdW5uaW5nOiBpc1RpbWVyUnVubmluZ1xuICB9KTtcblxuICAvKipcbiAgICogRW5hYmxlcyBidXR0b25zIGFuZCBoaWRlIGxvYWRlci5cbiAgICovXG5cbiAgZnVuY3Rpb24gaGlkZUxvYWRpbmcoKSB7XG4gICAgLy8gZG8gbm90aGluZyBpZiBwb3B1cCBpcyBjbG9zZWRcbiAgICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpO1xuXG4gICAgaWYgKCFpbm5lclBhcmFtcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkb21DYWNoZSA9IHByaXZhdGVQcm9wcy5kb21DYWNoZS5nZXQodGhpcyk7XG4gICAgaGlkZShkb21DYWNoZS5sb2FkZXIpO1xuXG4gICAgaWYgKGlubmVyUGFyYW1zLnNob3dDb25maXJtQnV0dG9uKSB7XG4gICAgICBzaG93KGRvbUNhY2hlLmNvbmZpcm1CdXR0b24sICdpbmxpbmUtYmxvY2snKTtcbiAgICB9IGVsc2UgaWYgKCFpbm5lclBhcmFtcy5zaG93Q29uZmlybUJ1dHRvbiAmJiAhaW5uZXJQYXJhbXMuc2hvd0NhbmNlbEJ1dHRvbikge1xuICAgICAgaGlkZShkb21DYWNoZS5hY3Rpb25zKTtcbiAgICB9XG5cbiAgICByZW1vdmVDbGFzcyhbZG9tQ2FjaGUucG9wdXAsIGRvbUNhY2hlLmFjdGlvbnNdLCBzd2FsQ2xhc3Nlcy5sb2FkaW5nKTtcbiAgICBkb21DYWNoZS5wb3B1cC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtYnVzeScpO1xuICAgIGRvbUNhY2hlLnBvcHVwLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1sb2FkaW5nJyk7XG4gICAgZG9tQ2FjaGUuY29uZmlybUJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIGRvbUNhY2hlLmRlbnlCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICBkb21DYWNoZS5jYW5jZWxCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldElucHV0JDEoaW5zdGFuY2UpIHtcbiAgICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KGluc3RhbmNlIHx8IHRoaXMpO1xuICAgIHZhciBkb21DYWNoZSA9IHByaXZhdGVQcm9wcy5kb21DYWNoZS5nZXQoaW5zdGFuY2UgfHwgdGhpcyk7XG5cbiAgICBpZiAoIWRvbUNhY2hlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0SW5wdXQoZG9tQ2FjaGUuY29udGVudCwgaW5uZXJQYXJhbXMuaW5wdXQpO1xuICB9XG5cbiAgdmFyIGZpeFNjcm9sbGJhciA9IGZ1bmN0aW9uIGZpeFNjcm9sbGJhcigpIHtcbiAgICAvLyBmb3IgcXVldWVzLCBkbyBub3QgZG8gdGhpcyBtb3JlIHRoYW4gb25jZVxuICAgIGlmIChzdGF0ZXMucHJldmlvdXNCb2R5UGFkZGluZyAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gaWYgdGhlIGJvZHkgaGFzIG92ZXJmbG93XG5cblxuICAgIGlmIChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCA+IHdpbmRvdy5pbm5lckhlaWdodCkge1xuICAgICAgLy8gYWRkIHBhZGRpbmcgc28gdGhlIGNvbnRlbnQgZG9lc24ndCBzaGlmdCBhZnRlciByZW1vdmFsIG9mIHNjcm9sbGJhclxuICAgICAgc3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmcgPSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXJpZ2h0JykpO1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiLmNvbmNhdChzdGF0ZXMucHJldmlvdXNCb2R5UGFkZGluZyArIG1lYXN1cmVTY3JvbGxiYXIoKSwgXCJweFwiKTtcbiAgICB9XG4gIH07XG4gIHZhciB1bmRvU2Nyb2xsYmFyID0gZnVuY3Rpb24gdW5kb1Njcm9sbGJhcigpIHtcbiAgICBpZiAoc3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmcgIT09IG51bGwpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoc3RhdGVzLnByZXZpb3VzQm9keVBhZGRpbmcsIFwicHhcIik7XG4gICAgICBzdGF0ZXMucHJldmlvdXNCb2R5UGFkZGluZyA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG5cbiAgdmFyIGlPU2ZpeCA9IGZ1bmN0aW9uIGlPU2ZpeCgpIHtcbiAgICB2YXIgaU9TID0gL2lQYWR8aVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIXdpbmRvdy5NU1N0cmVhbSB8fCBuYXZpZ2F0b3IucGxhdGZvcm0gPT09ICdNYWNJbnRlbCcgJiYgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMTtcblxuICAgIGlmIChpT1MgJiYgIWhhc0NsYXNzKGRvY3VtZW50LmJvZHksIHN3YWxDbGFzc2VzLmlvc2ZpeCkpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudG9wID0gXCJcIi5jb25jYXQob2Zmc2V0ICogLTEsIFwicHhcIik7XG4gICAgICBhZGRDbGFzcyhkb2N1bWVudC5ib2R5LCBzd2FsQ2xhc3Nlcy5pb3NmaXgpO1xuICAgICAgbG9ja0JvZHlTY3JvbGwoKTtcbiAgICAgIGFkZEJvdHRvbVBhZGRpbmdGb3JUYWxsUG9wdXBzKCk7IC8vICMxOTQ4XG4gICAgfVxuICB9O1xuXG4gIHZhciBhZGRCb3R0b21QYWRkaW5nRm9yVGFsbFBvcHVwcyA9IGZ1bmN0aW9uIGFkZEJvdHRvbVBhZGRpbmdGb3JUYWxsUG9wdXBzKCkge1xuICAgIHZhciBzYWZhcmkgPSAhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvKENyaU9TfEZ4aU9TfEVkZ2lPU3xZYUJyb3dzZXJ8VUNCcm93c2VyKS9pKTtcblxuICAgIGlmIChzYWZhcmkpIHtcbiAgICAgIHZhciBib3R0b21QYW5lbEhlaWdodCA9IDQ0O1xuXG4gICAgICBpZiAoZ2V0UG9wdXAoKS5zY3JvbGxIZWlnaHQgPiB3aW5kb3cuaW5uZXJIZWlnaHQgLSBib3R0b21QYW5lbEhlaWdodCkge1xuICAgICAgICBnZXRDb250YWluZXIoKS5zdHlsZS5wYWRkaW5nQm90dG9tID0gXCJcIi5jb25jYXQoYm90dG9tUGFuZWxIZWlnaHQsIFwicHhcIik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBsb2NrQm9keVNjcm9sbCA9IGZ1bmN0aW9uIGxvY2tCb2R5U2Nyb2xsKCkge1xuICAgIC8vICMxMjQ2XG4gICAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcigpO1xuICAgIHZhciBwcmV2ZW50VG91Y2hNb3ZlO1xuXG4gICAgY29udGFpbmVyLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBwcmV2ZW50VG91Y2hNb3ZlID0gc2hvdWxkUHJldmVudFRvdWNoTW92ZShlKTtcbiAgICB9O1xuXG4gICAgY29udGFpbmVyLm9udG91Y2htb3ZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChwcmV2ZW50VG91Y2hNb3ZlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBzaG91bGRQcmV2ZW50VG91Y2hNb3ZlID0gZnVuY3Rpb24gc2hvdWxkUHJldmVudFRvdWNoTW92ZShldmVudCkge1xuICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgdmFyIGNvbnRhaW5lciA9IGdldENvbnRhaW5lcigpO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggJiYgZXZlbnQudG91Y2hlc1swXS50b3VjaFR5cGUgPT09ICdzdHlsdXMnKSB7XG4gICAgICAvLyAjMTc4NlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0YXJnZXQgPT09IGNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFpc1Njcm9sbGFibGUoY29udGFpbmVyKSAmJiB0YXJnZXQudGFnTmFtZSAhPT0gJ0lOUFVUJyAmJiAvLyAjMTYwM1xuICAgICEoaXNTY3JvbGxhYmxlKGdldENvbnRlbnQoKSkgJiYgLy8gIzE5NDRcbiAgICBnZXRDb250ZW50KCkuY29udGFpbnModGFyZ2V0KSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICB2YXIgdW5kb0lPU2ZpeCA9IGZ1bmN0aW9uIHVuZG9JT1NmaXgoKSB7XG4gICAgaWYgKGhhc0NsYXNzKGRvY3VtZW50LmJvZHksIHN3YWxDbGFzc2VzLmlvc2ZpeCkpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBwYXJzZUludChkb2N1bWVudC5ib2R5LnN0eWxlLnRvcCwgMTApO1xuICAgICAgcmVtb3ZlQ2xhc3MoZG9jdW1lbnQuYm9keSwgc3dhbENsYXNzZXMuaW9zZml4KTtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUudG9wID0gJyc7XG4gICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IG9mZnNldCAqIC0xO1xuICAgIH1cbiAgfTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuXG4gIHZhciBpc0lFMTEgPSBmdW5jdGlvbiBpc0lFMTEoKSB7XG4gICAgcmV0dXJuICEhd2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmICEhZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuICB9OyAvLyBGaXggSUUxMSBjZW50ZXJpbmcgc3dlZXRhbGVydDIvaXNzdWVzLzkzM1xuXG5cbiAgdmFyIGZpeFZlcnRpY2FsUG9zaXRpb25JRSA9IGZ1bmN0aW9uIGZpeFZlcnRpY2FsUG9zaXRpb25JRSgpIHtcbiAgICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgdmFyIHBvcHVwID0gZ2V0UG9wdXAoKTtcbiAgICBjb250YWluZXIuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2FsaWduLWl0ZW1zJyk7XG5cbiAgICBpZiAocG9wdXAub2Zmc2V0VG9wIDwgMCkge1xuICAgICAgY29udGFpbmVyLnN0eWxlLmFsaWduSXRlbXMgPSAnZmxleC1zdGFydCc7XG4gICAgfVxuICB9O1xuXG4gIHZhciBJRWZpeCA9IGZ1bmN0aW9uIElFZml4KCkge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiBpc0lFMTEoKSkge1xuICAgICAgZml4VmVydGljYWxQb3NpdGlvbklFKCk7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZml4VmVydGljYWxQb3NpdGlvbklFKTtcbiAgICB9XG4gIH07XG4gIHZhciB1bmRvSUVmaXggPSBmdW5jdGlvbiB1bmRvSUVmaXgoKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIGlzSUUxMSgpKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZml4VmVydGljYWxQb3NpdGlvbklFKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQWRkaW5nIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIHRvIGVsZW1lbnRzIG91dHNpZGUgb2YgdGhlIGFjdGl2ZSBtb2RhbCBkaWFsb2cgZW5zdXJlcyB0aGF0XG4gIC8vIGVsZW1lbnRzIG5vdCB3aXRoaW4gdGhlIGFjdGl2ZSBtb2RhbCBkaWFsb2cgd2lsbCBub3QgYmUgc3VyZmFjZWQgaWYgYSB1c2VyIG9wZW5zIGEgc2NyZWVuXG4gIC8vIHJlYWRlcuKAmXMgbGlzdCBvZiBlbGVtZW50cyAoaGVhZGluZ3MsIGZvcm0gY29udHJvbHMsIGxhbmRtYXJrcywgZXRjLikgaW4gdGhlIGRvY3VtZW50LlxuXG4gIHZhciBzZXRBcmlhSGlkZGVuID0gZnVuY3Rpb24gc2V0QXJpYUhpZGRlbigpIHtcbiAgICB2YXIgYm9keUNoaWxkcmVuID0gdG9BcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICBib2R5Q2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGlmIChlbCA9PT0gZ2V0Q29udGFpbmVyKCkgfHwgY29udGFpbnMoZWwsIGdldENvbnRhaW5lcigpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChlbC5oYXNBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJykpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuJywgZWwuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpKTtcbiAgICAgIH1cblxuICAgICAgZWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgfSk7XG4gIH07XG4gIHZhciB1bnNldEFyaWFIaWRkZW4gPSBmdW5jdGlvbiB1bnNldEFyaWFIaWRkZW4oKSB7XG4gICAgdmFyIGJvZHlDaGlsZHJlbiA9IHRvQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgYm9keUNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKCdkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuJykpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1wcmV2aW91cy1hcmlhLWhpZGRlbicpKTtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXByZXZpb3VzLWFyaWEtaGlkZGVuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kdWxlIGNvbnRhaW50cyBgV2Vha01hcGBzIGZvciBlYWNoIGVmZmVjdGl2ZWx5LVwicHJpdmF0ZSAgcHJvcGVydHlcIiB0aGF0IGEgYFN3YWxgIGhhcy5cbiAgICogRm9yIGV4YW1wbGUsIHRvIHNldCB0aGUgcHJpdmF0ZSBwcm9wZXJ0eSBcImZvb1wiIG9mIGB0aGlzYCB0byBcImJhclwiLCB5b3UgY2FuIGBwcml2YXRlUHJvcHMuZm9vLnNldCh0aGlzLCAnYmFyJylgXG4gICAqIFRoaXMgaXMgdGhlIGFwcHJvYWNoIHRoYXQgQmFiZWwgd2lsbCBwcm9iYWJseSB0YWtlIHRvIGltcGxlbWVudCBwcml2YXRlIG1ldGhvZHMvZmllbGRzXG4gICAqICAgaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJpdmF0ZS1tZXRob2RzXG4gICAqICAgaHR0cHM6Ly9naXRodWIuY29tL2JhYmVsL2JhYmVsL3B1bGwvNzU1NVxuICAgKiBPbmNlIHdlIGhhdmUgdGhlIGNoYW5nZXMgZnJvbSB0aGF0IFBSIGluIEJhYmVsLCBhbmQgb3VyIGNvcmUgY2xhc3MgZml0cyByZWFzb25hYmxlIGluICpvbmUgbW9kdWxlKlxuICAgKiAgIHRoZW4gd2UgY2FuIHVzZSB0aGF0IGxhbmd1YWdlIGZlYXR1cmUuXG4gICAqL1xuICB2YXIgcHJpdmF0ZU1ldGhvZHMgPSB7XG4gICAgc3dhbFByb21pc2VSZXNvbHZlOiBuZXcgV2Vha01hcCgpXG4gIH07XG5cbiAgLypcbiAgICogSW5zdGFuY2UgbWV0aG9kIHRvIGNsb3NlIHN3ZWV0QWxlcnRcbiAgICovXG5cbiAgZnVuY3Rpb24gcmVtb3ZlUG9wdXBBbmRSZXNldFN0YXRlKGluc3RhbmNlLCBjb250YWluZXIsIGlzVG9hc3QkJDEsIGRpZENsb3NlKSB7XG4gICAgaWYgKGlzVG9hc3QkJDEpIHtcbiAgICAgIHRyaWdnZXJEaWRDbG9zZUFuZERpc3Bvc2UoaW5zdGFuY2UsIGRpZENsb3NlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdG9yZUFjdGl2ZUVsZW1lbnQoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRyaWdnZXJEaWRDbG9zZUFuZERpc3Bvc2UoaW5zdGFuY2UsIGRpZENsb3NlKTtcbiAgICAgIH0pO1xuICAgICAgZ2xvYmFsU3RhdGUua2V5ZG93blRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZ2xvYmFsU3RhdGUua2V5ZG93bkhhbmRsZXIsIHtcbiAgICAgICAgY2FwdHVyZTogZ2xvYmFsU3RhdGUua2V5ZG93bkxpc3RlbmVyQ2FwdHVyZVxuICAgICAgfSk7XG4gICAgICBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlckFkZGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5lci5wYXJlbnROb2RlICYmICFkb2N1bWVudC5ib2R5LmdldEF0dHJpYnV0ZSgnZGF0YS1zd2FsMi1xdWV1ZS1zdGVwJykpIHtcbiAgICAgIGNvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgaWYgKGlzTW9kYWwoKSkge1xuICAgICAgdW5kb1Njcm9sbGJhcigpO1xuICAgICAgdW5kb0lPU2ZpeCgpO1xuICAgICAgdW5kb0lFZml4KCk7XG4gICAgICB1bnNldEFyaWFIaWRkZW4oKTtcbiAgICB9XG5cbiAgICByZW1vdmVCb2R5Q2xhc3NlcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQm9keUNsYXNzZXMoKSB7XG4gICAgcmVtb3ZlQ2xhc3MoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keV0sIFtzd2FsQ2xhc3Nlcy5zaG93biwgc3dhbENsYXNzZXNbJ2hlaWdodC1hdXRvJ10sIHN3YWxDbGFzc2VzWyduby1iYWNrZHJvcCddLCBzd2FsQ2xhc3Nlc1sndG9hc3Qtc2hvd24nXSwgc3dhbENsYXNzZXNbJ3RvYXN0LWNvbHVtbiddXSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZShyZXNvbHZlVmFsdWUpIHtcbiAgICB2YXIgcG9wdXAgPSBnZXRQb3B1cCgpO1xuXG4gICAgaWYgKCFwb3B1cCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlc29sdmVWYWx1ZSA9IHByZXBhcmVSZXNvbHZlVmFsdWUocmVzb2x2ZVZhbHVlKTtcbiAgICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpO1xuXG4gICAgaWYgKCFpbm5lclBhcmFtcyB8fCBoYXNDbGFzcyhwb3B1cCwgaW5uZXJQYXJhbXMuaGlkZUNsYXNzLnBvcHVwKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzd2FsUHJvbWlzZVJlc29sdmUgPSBwcml2YXRlTWV0aG9kcy5zd2FsUHJvbWlzZVJlc29sdmUuZ2V0KHRoaXMpO1xuICAgIHJlbW92ZUNsYXNzKHBvcHVwLCBpbm5lclBhcmFtcy5zaG93Q2xhc3MucG9wdXApO1xuICAgIGFkZENsYXNzKHBvcHVwLCBpbm5lclBhcmFtcy5oaWRlQ2xhc3MucG9wdXApO1xuICAgIHZhciBiYWNrZHJvcCA9IGdldENvbnRhaW5lcigpO1xuICAgIHJlbW92ZUNsYXNzKGJhY2tkcm9wLCBpbm5lclBhcmFtcy5zaG93Q2xhc3MuYmFja2Ryb3ApO1xuICAgIGFkZENsYXNzKGJhY2tkcm9wLCBpbm5lclBhcmFtcy5oaWRlQ2xhc3MuYmFja2Ryb3ApO1xuICAgIGhhbmRsZVBvcHVwQW5pbWF0aW9uKHRoaXMsIHBvcHVwLCBpbm5lclBhcmFtcyk7IC8vIFJlc29sdmUgU3dhbCBwcm9taXNlXG5cbiAgICBzd2FsUHJvbWlzZVJlc29sdmUocmVzb2x2ZVZhbHVlKTtcbiAgfVxuXG4gIHZhciBwcmVwYXJlUmVzb2x2ZVZhbHVlID0gZnVuY3Rpb24gcHJlcGFyZVJlc29sdmVWYWx1ZShyZXNvbHZlVmFsdWUpIHtcbiAgICAvLyBXaGVuIHVzZXIgY2FsbHMgU3dhbC5jbG9zZSgpXG4gICAgaWYgKHR5cGVvZiByZXNvbHZlVmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0NvbmZpcm1lZDogZmFsc2UsXG4gICAgICAgIGlzRGVuaWVkOiBmYWxzZSxcbiAgICAgICAgaXNEaXNtaXNzZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGlzQ29uZmlybWVkOiBmYWxzZSxcbiAgICAgIGlzRGVuaWVkOiBmYWxzZSxcbiAgICAgIGlzRGlzbWlzc2VkOiBmYWxzZVxuICAgIH0sIHJlc29sdmVWYWx1ZSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcHVwQW5pbWF0aW9uID0gZnVuY3Rpb24gaGFuZGxlUG9wdXBBbmltYXRpb24oaW5zdGFuY2UsIHBvcHVwLCBpbm5lclBhcmFtcykge1xuICAgIHZhciBjb250YWluZXIgPSBnZXRDb250YWluZXIoKTsgLy8gSWYgYW5pbWF0aW9uIGlzIHN1cHBvcnRlZCwgYW5pbWF0ZVxuXG4gICAgdmFyIGFuaW1hdGlvbklzU3VwcG9ydGVkID0gYW5pbWF0aW9uRW5kRXZlbnQgJiYgaGFzQ3NzQW5pbWF0aW9uKHBvcHVwKTtcbiAgICB2YXIgb25DbG9zZSA9IGlubmVyUGFyYW1zLm9uQ2xvc2UsXG4gICAgICAgIG9uQWZ0ZXJDbG9zZSA9IGlubmVyUGFyYW1zLm9uQWZ0ZXJDbG9zZSxcbiAgICAgICAgd2lsbENsb3NlID0gaW5uZXJQYXJhbXMud2lsbENsb3NlLFxuICAgICAgICBkaWRDbG9zZSA9IGlubmVyUGFyYW1zLmRpZENsb3NlO1xuICAgIHJ1bkRpZENsb3NlKHBvcHVwLCB3aWxsQ2xvc2UsIG9uQ2xvc2UpO1xuXG4gICAgaWYgKGFuaW1hdGlvbklzU3VwcG9ydGVkKSB7XG4gICAgICBhbmltYXRlUG9wdXAoaW5zdGFuY2UsIHBvcHVwLCBjb250YWluZXIsIGRpZENsb3NlIHx8IG9uQWZ0ZXJDbG9zZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgcmVtb3ZlIGltbWVkaWF0ZWx5XG4gICAgICByZW1vdmVQb3B1cEFuZFJlc2V0U3RhdGUoaW5zdGFuY2UsIGNvbnRhaW5lciwgaXNUb2FzdCgpLCBkaWRDbG9zZSB8fCBvbkFmdGVyQ2xvc2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcnVuRGlkQ2xvc2UgPSBmdW5jdGlvbiBydW5EaWRDbG9zZShwb3B1cCwgd2lsbENsb3NlLCBvbkNsb3NlKSB7XG4gICAgaWYgKHdpbGxDbG9zZSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2lsbENsb3NlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB3aWxsQ2xvc2UocG9wdXApO1xuICAgIH0gZWxzZSBpZiAob25DbG9zZSAhPT0gbnVsbCAmJiB0eXBlb2Ygb25DbG9zZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb25DbG9zZShwb3B1cCk7IC8vIEBkZXByZWNhdGVkXG4gICAgfVxuICB9O1xuXG4gIHZhciBhbmltYXRlUG9wdXAgPSBmdW5jdGlvbiBhbmltYXRlUG9wdXAoaW5zdGFuY2UsIHBvcHVwLCBjb250YWluZXIsIGRpZENsb3NlKSB7XG4gICAgZ2xvYmFsU3RhdGUuc3dhbENsb3NlRXZlbnRGaW5pc2hlZENhbGxiYWNrID0gcmVtb3ZlUG9wdXBBbmRSZXNldFN0YXRlLmJpbmQobnVsbCwgaW5zdGFuY2UsIGNvbnRhaW5lciwgaXNUb2FzdCgpLCBkaWRDbG9zZSk7XG4gICAgcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmRFdmVudCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldCA9PT0gcG9wdXApIHtcbiAgICAgICAgZ2xvYmFsU3RhdGUuc3dhbENsb3NlRXZlbnRGaW5pc2hlZENhbGxiYWNrKCk7XG4gICAgICAgIGRlbGV0ZSBnbG9iYWxTdGF0ZS5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2s7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHRyaWdnZXJEaWRDbG9zZUFuZERpc3Bvc2UgPSBmdW5jdGlvbiB0cmlnZ2VyRGlkQ2xvc2VBbmREaXNwb3NlKGluc3RhbmNlLCBkaWRDbG9zZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHR5cGVvZiBkaWRDbG9zZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaWRDbG9zZSgpO1xuICAgICAgfVxuXG4gICAgICBpbnN0YW5jZS5fZGVzdHJveSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNldEJ1dHRvbnNEaXNhYmxlZChpbnN0YW5jZSwgYnV0dG9ucywgZGlzYWJsZWQpIHtcbiAgICB2YXIgZG9tQ2FjaGUgPSBwcml2YXRlUHJvcHMuZG9tQ2FjaGUuZ2V0KGluc3RhbmNlKTtcbiAgICBidXR0b25zLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgZG9tQ2FjaGVbYnV0dG9uXS5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW5wdXREaXNhYmxlZChpbnB1dCwgZGlzYWJsZWQpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0LnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgIHZhciByYWRpb3NDb250YWluZXIgPSBpbnB1dC5wYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcmFkaW9zID0gcmFkaW9zQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0Jyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFkaW9zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJhZGlvc1tpXS5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVuYWJsZUJ1dHRvbnMoKSB7XG4gICAgc2V0QnV0dG9uc0Rpc2FibGVkKHRoaXMsIFsnY29uZmlybUJ1dHRvbicsICdkZW55QnV0dG9uJywgJ2NhbmNlbEJ1dHRvbiddLCBmYWxzZSk7XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZUJ1dHRvbnMoKSB7XG4gICAgc2V0QnV0dG9uc0Rpc2FibGVkKHRoaXMsIFsnY29uZmlybUJ1dHRvbicsICdkZW55QnV0dG9uJywgJ2NhbmNlbEJ1dHRvbiddLCB0cnVlKTtcbiAgfVxuICBmdW5jdGlvbiBlbmFibGVJbnB1dCgpIHtcbiAgICByZXR1cm4gc2V0SW5wdXREaXNhYmxlZCh0aGlzLmdldElucHV0KCksIGZhbHNlKTtcbiAgfVxuICBmdW5jdGlvbiBkaXNhYmxlSW5wdXQoKSB7XG4gICAgcmV0dXJuIHNldElucHV0RGlzYWJsZWQodGhpcy5nZXRJbnB1dCgpLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3dWYWxpZGF0aW9uTWVzc2FnZShlcnJvcikge1xuICAgIHZhciBkb21DYWNoZSA9IHByaXZhdGVQcm9wcy5kb21DYWNoZS5nZXQodGhpcyk7XG4gICAgdmFyIHBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQodGhpcyk7XG4gICAgc2V0SW5uZXJIdG1sKGRvbUNhY2hlLnZhbGlkYXRpb25NZXNzYWdlLCBlcnJvcik7XG4gICAgZG9tQ2FjaGUudmFsaWRhdGlvbk1lc3NhZ2UuY2xhc3NOYW1lID0gc3dhbENsYXNzZXNbJ3ZhbGlkYXRpb24tbWVzc2FnZSddO1xuXG4gICAgaWYgKHBhcmFtcy5jdXN0b21DbGFzcyAmJiBwYXJhbXMuY3VzdG9tQ2xhc3MudmFsaWRhdGlvbk1lc3NhZ2UpIHtcbiAgICAgIGFkZENsYXNzKGRvbUNhY2hlLnZhbGlkYXRpb25NZXNzYWdlLCBwYXJhbXMuY3VzdG9tQ2xhc3MudmFsaWRhdGlvbk1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHNob3coZG9tQ2FjaGUudmFsaWRhdGlvbk1lc3NhZ2UpO1xuICAgIHZhciBpbnB1dCA9IHRoaXMuZ2V0SW5wdXQoKTtcblxuICAgIGlmIChpbnB1dCkge1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCdhcmlhLWludmFsaWQnLCB0cnVlKTtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRCeScsIHN3YWxDbGFzc2VzWyd2YWxpZGF0aW9uLW1lc3NhZ2UnXSk7XG4gICAgICBmb2N1c0lucHV0KGlucHV0KTtcbiAgICAgIGFkZENsYXNzKGlucHV0LCBzd2FsQ2xhc3Nlcy5pbnB1dGVycm9yKTtcbiAgICB9XG4gIH0gLy8gSGlkZSBibG9jayB3aXRoIHZhbGlkYXRpb24gbWVzc2FnZVxuXG4gIGZ1bmN0aW9uIHJlc2V0VmFsaWRhdGlvbk1lc3NhZ2UkMSgpIHtcbiAgICB2YXIgZG9tQ2FjaGUgPSBwcml2YXRlUHJvcHMuZG9tQ2FjaGUuZ2V0KHRoaXMpO1xuXG4gICAgaWYgKGRvbUNhY2hlLnZhbGlkYXRpb25NZXNzYWdlKSB7XG4gICAgICBoaWRlKGRvbUNhY2hlLnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICB9XG5cbiAgICB2YXIgaW5wdXQgPSB0aGlzLmdldElucHV0KCk7XG5cbiAgICBpZiAoaW5wdXQpIHtcbiAgICAgIGlucHV0LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJyk7XG4gICAgICBpbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkQnknKTtcbiAgICAgIHJlbW92ZUNsYXNzKGlucHV0LCBzd2FsQ2xhc3Nlcy5pbnB1dGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQcm9ncmVzc1N0ZXBzJDEoKSB7XG4gICAgdmFyIGRvbUNhY2hlID0gcHJpdmF0ZVByb3BzLmRvbUNhY2hlLmdldCh0aGlzKTtcbiAgICByZXR1cm4gZG9tQ2FjaGUucHJvZ3Jlc3NTdGVwcztcbiAgfVxuXG4gIHZhciBUaW1lciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGltZXIoY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGltZXIpO1xuXG4gICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICB0aGlzLnJlbWFpbmluZyA9IGRlbGF5O1xuICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFRpbWVyLCBbe1xuICAgICAga2V5OiBcInN0YXJ0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5ydW5uaW5nKSB7XG4gICAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIHRoaXMuaWQgPSBzZXRUaW1lb3V0KHRoaXMuY2FsbGJhY2ssIHRoaXMucmVtYWluaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnJlbWFpbmluZztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RvcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIGlmICh0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5pZCk7XG4gICAgICAgICAgdGhpcy5yZW1haW5pbmcgLT0gbmV3IERhdGUoKSAtIHRoaXMuc3RhcnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnJlbWFpbmluZztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaW5jcmVhc2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbmNyZWFzZShuKSB7XG4gICAgICAgIHZhciBydW5uaW5nID0gdGhpcy5ydW5uaW5nO1xuXG4gICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbWFpbmluZyArPSBuO1xuXG4gICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVtYWluaW5nO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRUaW1lckxlZnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUaW1lckxlZnQoKSB7XG4gICAgICAgIGlmICh0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5yZW1haW5pbmc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzUnVubmluZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzUnVubmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnVubmluZztcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGltZXI7XG4gIH0oKTtcblxuICB2YXIgZGVmYXVsdElucHV0VmFsaWRhdG9ycyA9IHtcbiAgICBlbWFpbDogZnVuY3Rpb24gZW1haWwoc3RyaW5nLCB2YWxpZGF0aW9uTWVzc2FnZSkge1xuICAgICAgcmV0dXJuIC9eW2EtekEtWjAtOS4rXy1dK0BbYS16QS1aMC05Li1dK1xcLlthLXpBLVowLTktXXsyLDI0fSQvLnRlc3Qoc3RyaW5nKSA/IFByb21pc2UucmVzb2x2ZSgpIDogUHJvbWlzZS5yZXNvbHZlKHZhbGlkYXRpb25NZXNzYWdlIHx8ICdJbnZhbGlkIGVtYWlsIGFkZHJlc3MnKTtcbiAgICB9LFxuICAgIHVybDogZnVuY3Rpb24gdXJsKHN0cmluZywgdmFsaWRhdGlvbk1lc3NhZ2UpIHtcbiAgICAgIC8vIHRha2VuIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM4MDk0MzUgd2l0aCBhIHNtYWxsIGNoYW5nZSBmcm9tICMxMzA2IGFuZCAjMjAxM1xuICAgICAgcmV0dXJuIC9eaHR0cHM/OlxcL1xcLyh3d3dcXC4pP1stYS16QS1aMC05QDolLl8rfiM9XXsxLDI1Nn1cXC5bYS16XXsyLDYzfVxcYihbLWEtekEtWjAtOUA6JV8rLn4jPyYvPV0qKSQvLnRlc3Qoc3RyaW5nKSA/IFByb21pc2UucmVzb2x2ZSgpIDogUHJvbWlzZS5yZXNvbHZlKHZhbGlkYXRpb25NZXNzYWdlIHx8ICdJbnZhbGlkIFVSTCcpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBzZXREZWZhdWx0SW5wdXRWYWxpZGF0b3JzKHBhcmFtcykge1xuICAgIC8vIFVzZSBkZWZhdWx0IGBpbnB1dFZhbGlkYXRvcmAgZm9yIHN1cHBvcnRlZCBpbnB1dCB0eXBlcyBpZiBub3QgcHJvdmlkZWRcbiAgICBpZiAoIXBhcmFtcy5pbnB1dFZhbGlkYXRvcikge1xuICAgICAgT2JqZWN0LmtleXMoZGVmYXVsdElucHV0VmFsaWRhdG9ycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChwYXJhbXMuaW5wdXQgPT09IGtleSkge1xuICAgICAgICAgIHBhcmFtcy5pbnB1dFZhbGlkYXRvciA9IGRlZmF1bHRJbnB1dFZhbGlkYXRvcnNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVDdXN0b21UYXJnZXRFbGVtZW50KHBhcmFtcykge1xuICAgIC8vIERldGVybWluZSBpZiB0aGUgY3VzdG9tIHRhcmdldCBlbGVtZW50IGlzIHZhbGlkXG4gICAgaWYgKCFwYXJhbXMudGFyZ2V0IHx8IHR5cGVvZiBwYXJhbXMudGFyZ2V0ID09PSAnc3RyaW5nJyAmJiAhZG9jdW1lbnQucXVlcnlTZWxlY3RvcihwYXJhbXMudGFyZ2V0KSB8fCB0eXBlb2YgcGFyYW1zLnRhcmdldCAhPT0gJ3N0cmluZycgJiYgIXBhcmFtcy50YXJnZXQuYXBwZW5kQ2hpbGQpIHtcbiAgICAgIHdhcm4oJ1RhcmdldCBwYXJhbWV0ZXIgaXMgbm90IHZhbGlkLCBkZWZhdWx0aW5nIHRvIFwiYm9keVwiJyk7XG4gICAgICBwYXJhbXMudGFyZ2V0ID0gJ2JvZHknO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0IHR5cGUsIHRleHQgYW5kIGFjdGlvbnMgb24gcG9wdXBcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBmdW5jdGlvbiBzZXRQYXJhbWV0ZXJzKHBhcmFtcykge1xuICAgIHNldERlZmF1bHRJbnB1dFZhbGlkYXRvcnMocGFyYW1zKTsgLy8gc2hvd0xvYWRlck9uQ29uZmlybSAmJiBwcmVDb25maXJtXG5cbiAgICBpZiAocGFyYW1zLnNob3dMb2FkZXJPbkNvbmZpcm0gJiYgIXBhcmFtcy5wcmVDb25maXJtKSB7XG4gICAgICB3YXJuKCdzaG93TG9hZGVyT25Db25maXJtIGlzIHNldCB0byB0cnVlLCBidXQgcHJlQ29uZmlybSBpcyBub3QgZGVmaW5lZC5cXG4nICsgJ3Nob3dMb2FkZXJPbkNvbmZpcm0gc2hvdWxkIGJlIHVzZWQgdG9nZXRoZXIgd2l0aCBwcmVDb25maXJtLCBzZWUgdXNhZ2UgZXhhbXBsZTpcXG4nICsgJ2h0dHBzOi8vc3dlZXRhbGVydDIuZ2l0aHViLmlvLyNhamF4LXJlcXVlc3QnKTtcbiAgICB9IC8vIHBhcmFtcy5hbmltYXRpb24gd2lsbCBiZSBhY3R1YWxseSB1c2VkIGluIHJlbmRlclBvcHVwLmpzXG4gICAgLy8gYnV0IGluIGNhc2Ugd2hlbiBwYXJhbXMuYW5pbWF0aW9uIGlzIGEgZnVuY3Rpb24sIHdlIG5lZWQgdG8gY2FsbCB0aGF0IGZ1bmN0aW9uXG4gICAgLy8gYmVmb3JlIHBvcHVwIChyZSlpbml0aWFsaXphdGlvbiwgc28gaXQnbGwgYmUgcG9zc2libGUgdG8gY2hlY2sgU3dhbC5pc1Zpc2libGUoKVxuICAgIC8vIGluc2lkZSB0aGUgcGFyYW1zLmFuaW1hdGlvbiBmdW5jdGlvblxuXG5cbiAgICBwYXJhbXMuYW5pbWF0aW9uID0gY2FsbElmRnVuY3Rpb24ocGFyYW1zLmFuaW1hdGlvbik7XG4gICAgdmFsaWRhdGVDdXN0b21UYXJnZXRFbGVtZW50KHBhcmFtcyk7IC8vIFJlcGxhY2UgbmV3bGluZXMgd2l0aCA8YnI+IGluIHRpdGxlXG5cbiAgICBpZiAodHlwZW9mIHBhcmFtcy50aXRsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBhcmFtcy50aXRsZSA9IHBhcmFtcy50aXRsZS5zcGxpdCgnXFxuJykuam9pbignPGJyIC8+Jyk7XG4gICAgfVxuXG4gICAgaW5pdChwYXJhbXMpO1xuICB9XG5cbiAgdmFyIFNIT1dfQ0xBU1NfVElNRU9VVCA9IDEwO1xuICAvKipcbiAgICogT3BlbiBwb3B1cCwgYWRkIG5lY2Vzc2FyeSBjbGFzc2VzIGFuZCBzdHlsZXMsIGZpeCBzY3JvbGxiYXJcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtc1xuICAgKi9cblxuICB2YXIgb3BlblBvcHVwID0gZnVuY3Rpb24gb3BlblBvcHVwKHBhcmFtcykge1xuICAgIHZhciBjb250YWluZXIgPSBnZXRDb250YWluZXIoKTtcbiAgICB2YXIgcG9wdXAgPSBnZXRQb3B1cCgpO1xuXG4gICAgaWYgKHR5cGVvZiBwYXJhbXMud2lsbE9wZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBhcmFtcy53aWxsT3Blbihwb3B1cCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGFyYW1zLm9uQmVmb3JlT3BlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGFyYW1zLm9uQmVmb3JlT3Blbihwb3B1cCk7IC8vIEBkZXByZWNhdGVkXG4gICAgfVxuXG4gICAgdmFyIGJvZHlTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KTtcbiAgICB2YXIgaW5pdGlhbEJvZHlPdmVyZmxvdyA9IGJvZHlTdHlsZXMub3ZlcmZsb3dZO1xuICAgIGFkZENsYXNzZXMkMShjb250YWluZXIsIHBvcHVwLCBwYXJhbXMpOyAvLyBzY3JvbGxpbmcgaXMgJ2hpZGRlbicgdW50aWwgYW5pbWF0aW9uIGlzIGRvbmUsIGFmdGVyIHRoYXQgJ2F1dG8nXG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFNjcm9sbGluZ1Zpc2liaWxpdHkoY29udGFpbmVyLCBwb3B1cCk7XG4gICAgfSwgU0hPV19DTEFTU19USU1FT1VUKTtcblxuICAgIGlmIChpc01vZGFsKCkpIHtcbiAgICAgIGZpeFNjcm9sbENvbnRhaW5lcihjb250YWluZXIsIHBhcmFtcy5zY3JvbGxiYXJQYWRkaW5nLCBpbml0aWFsQm9keU92ZXJmbG93KTtcbiAgICAgIHNldEFyaWFIaWRkZW4oKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzVG9hc3QoKSAmJiAhZ2xvYmFsU3RhdGUucHJldmlvdXNBY3RpdmVFbGVtZW50KSB7XG4gICAgICBnbG9iYWxTdGF0ZS5wcmV2aW91c0FjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIHJ1bkRpZE9wZW4ocG9wdXAsIHBhcmFtcyk7XG4gICAgcmVtb3ZlQ2xhc3MoY29udGFpbmVyLCBzd2FsQ2xhc3Nlc1snbm8tdHJhbnNpdGlvbiddKTtcbiAgfTtcblxuICB2YXIgcnVuRGlkT3BlbiA9IGZ1bmN0aW9uIHJ1bkRpZE9wZW4ocG9wdXAsIHBhcmFtcykge1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmRpZE9wZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcGFyYW1zLmRpZE9wZW4ocG9wdXApO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcGFyYW1zLm9uT3BlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBwYXJhbXMub25PcGVuKHBvcHVwKTtcbiAgICAgIH0pOyAvLyBAZGVwcmVjYXRlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgc3dhbE9wZW5BbmltYXRpb25GaW5pc2hlZCA9IGZ1bmN0aW9uIHN3YWxPcGVuQW5pbWF0aW9uRmluaXNoZWQoZXZlbnQpIHtcbiAgICB2YXIgcG9wdXAgPSBnZXRQb3B1cCgpO1xuXG4gICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gcG9wdXApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKCk7XG4gICAgcG9wdXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihhbmltYXRpb25FbmRFdmVudCwgc3dhbE9wZW5BbmltYXRpb25GaW5pc2hlZCk7XG4gICAgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93WSA9ICdhdXRvJztcbiAgfTtcblxuICB2YXIgc2V0U2Nyb2xsaW5nVmlzaWJpbGl0eSA9IGZ1bmN0aW9uIHNldFNjcm9sbGluZ1Zpc2liaWxpdHkoY29udGFpbmVyLCBwb3B1cCkge1xuICAgIGlmIChhbmltYXRpb25FbmRFdmVudCAmJiBoYXNDc3NBbmltYXRpb24ocG9wdXApKSB7XG4gICAgICBjb250YWluZXIuc3R5bGUub3ZlcmZsb3dZID0gJ2hpZGRlbic7XG4gICAgICBwb3B1cC5hZGRFdmVudExpc3RlbmVyKGFuaW1hdGlvbkVuZEV2ZW50LCBzd2FsT3BlbkFuaW1hdGlvbkZpbmlzaGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93WSA9ICdhdXRvJztcbiAgICB9XG4gIH07XG5cbiAgdmFyIGZpeFNjcm9sbENvbnRhaW5lciA9IGZ1bmN0aW9uIGZpeFNjcm9sbENvbnRhaW5lcihjb250YWluZXIsIHNjcm9sbGJhclBhZGRpbmcsIGluaXRpYWxCb2R5T3ZlcmZsb3cpIHtcbiAgICBpT1NmaXgoKTtcbiAgICBJRWZpeCgpO1xuXG4gICAgaWYgKHNjcm9sbGJhclBhZGRpbmcgJiYgaW5pdGlhbEJvZHlPdmVyZmxvdyAhPT0gJ2hpZGRlbicpIHtcbiAgICAgIGZpeFNjcm9sbGJhcigpO1xuICAgIH0gLy8gc3dlZXRhbGVydDIvaXNzdWVzLzEyNDdcblxuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBjb250YWluZXIuc2Nyb2xsVG9wID0gMDtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgYWRkQ2xhc3NlcyQxID0gZnVuY3Rpb24gYWRkQ2xhc3Nlcyhjb250YWluZXIsIHBvcHVwLCBwYXJhbXMpIHtcbiAgICBhZGRDbGFzcyhjb250YWluZXIsIHBhcmFtcy5zaG93Q2xhc3MuYmFja2Ryb3ApOyAvLyB0aGUgd29ya2Fyb3VuZCB3aXRoIHNldHRpbmcvdW5zZXR0aW5nIG9wYWNpdHkgaXMgbmVlZGVkIGZvciAjMjAxOSBhbmQgMjA1OVxuXG4gICAgcG9wdXAuc3R5bGUuc2V0UHJvcGVydHkoJ29wYWNpdHknLCAnMCcsICdpbXBvcnRhbnQnKTtcbiAgICBzaG93KHBvcHVwKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEFuaW1hdGUgcG9wdXAgcmlnaHQgYWZ0ZXIgc2hvd2luZyBpdFxuICAgICAgYWRkQ2xhc3MocG9wdXAsIHBhcmFtcy5zaG93Q2xhc3MucG9wdXApOyAvLyBhbmQgcmVtb3ZlIHRoZSBvcGFjaXR5IHdvcmthcm91bmRcblxuICAgICAgcG9wdXAuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ29wYWNpdHknKTtcbiAgICB9LCBTSE9XX0NMQVNTX1RJTUVPVVQpOyAvLyAxMG1zIGluIG9yZGVyIHRvIGZpeCAjMjA2MlxuXG4gICAgYWRkQ2xhc3MoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keV0sIHN3YWxDbGFzc2VzLnNob3duKTtcblxuICAgIGlmIChwYXJhbXMuaGVpZ2h0QXV0byAmJiBwYXJhbXMuYmFja2Ryb3AgJiYgIXBhcmFtcy50b2FzdCkge1xuICAgICAgYWRkQ2xhc3MoW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keV0sIHN3YWxDbGFzc2VzWydoZWlnaHQtYXV0byddKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUlucHV0T3B0aW9uc0FuZFZhbHVlID0gZnVuY3Rpb24gaGFuZGxlSW5wdXRPcHRpb25zQW5kVmFsdWUoaW5zdGFuY2UsIHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMuaW5wdXQgPT09ICdzZWxlY3QnIHx8IHBhcmFtcy5pbnB1dCA9PT0gJ3JhZGlvJykge1xuICAgICAgaGFuZGxlSW5wdXRPcHRpb25zKGluc3RhbmNlLCBwYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoWyd0ZXh0JywgJ2VtYWlsJywgJ251bWJlcicsICd0ZWwnLCAndGV4dGFyZWEnXS5pbmRleE9mKHBhcmFtcy5pbnB1dCkgIT09IC0xICYmIChoYXNUb1Byb21pc2VGbihwYXJhbXMuaW5wdXRWYWx1ZSkgfHwgaXNQcm9taXNlKHBhcmFtcy5pbnB1dFZhbHVlKSkpIHtcbiAgICAgIGhhbmRsZUlucHV0VmFsdWUoaW5zdGFuY2UsIHBhcmFtcyk7XG4gICAgfVxuICB9O1xuICB2YXIgZ2V0SW5wdXRWYWx1ZSA9IGZ1bmN0aW9uIGdldElucHV0VmFsdWUoaW5zdGFuY2UsIGlubmVyUGFyYW1zKSB7XG4gICAgdmFyIGlucHV0ID0gaW5zdGFuY2UuZ2V0SW5wdXQoKTtcblxuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN3aXRjaCAoaW5uZXJQYXJhbXMuaW5wdXQpIHtcbiAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgcmV0dXJuIGdldENoZWNrYm94VmFsdWUoaW5wdXQpO1xuXG4gICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgIHJldHVybiBnZXRSYWRpb1ZhbHVlKGlucHV0KTtcblxuICAgICAgY2FzZSAnZmlsZSc6XG4gICAgICAgIHJldHVybiBnZXRGaWxlVmFsdWUoaW5wdXQpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gaW5uZXJQYXJhbXMuaW5wdXRBdXRvVHJpbSA/IGlucHV0LnZhbHVlLnRyaW0oKSA6IGlucHV0LnZhbHVlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0Q2hlY2tib3hWYWx1ZSA9IGZ1bmN0aW9uIGdldENoZWNrYm94VmFsdWUoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQuY2hlY2tlZCA/IDEgOiAwO1xuICB9O1xuXG4gIHZhciBnZXRSYWRpb1ZhbHVlID0gZnVuY3Rpb24gZ2V0UmFkaW9WYWx1ZShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dC5jaGVja2VkID8gaW5wdXQudmFsdWUgOiBudWxsO1xuICB9O1xuXG4gIHZhciBnZXRGaWxlVmFsdWUgPSBmdW5jdGlvbiBnZXRGaWxlVmFsdWUoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQuZmlsZXMubGVuZ3RoID8gaW5wdXQuZ2V0QXR0cmlidXRlKCdtdWx0aXBsZScpICE9PSBudWxsID8gaW5wdXQuZmlsZXMgOiBpbnB1dC5maWxlc1swXSA6IG51bGw7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUlucHV0T3B0aW9ucyA9IGZ1bmN0aW9uIGhhbmRsZUlucHV0T3B0aW9ucyhpbnN0YW5jZSwgcGFyYW1zKSB7XG4gICAgdmFyIGNvbnRlbnQgPSBnZXRDb250ZW50KCk7XG5cbiAgICB2YXIgcHJvY2Vzc0lucHV0T3B0aW9ucyA9IGZ1bmN0aW9uIHByb2Nlc3NJbnB1dE9wdGlvbnMoaW5wdXRPcHRpb25zKSB7XG4gICAgICByZXR1cm4gcG9wdWxhdGVJbnB1dE9wdGlvbnNbcGFyYW1zLmlucHV0XShjb250ZW50LCBmb3JtYXRJbnB1dE9wdGlvbnMoaW5wdXRPcHRpb25zKSwgcGFyYW1zKTtcbiAgICB9O1xuXG4gICAgaWYgKGhhc1RvUHJvbWlzZUZuKHBhcmFtcy5pbnB1dE9wdGlvbnMpIHx8IGlzUHJvbWlzZShwYXJhbXMuaW5wdXRPcHRpb25zKSkge1xuICAgICAgc2hvd0xvYWRpbmcoKTtcbiAgICAgIGFzUHJvbWlzZShwYXJhbXMuaW5wdXRPcHRpb25zKS50aGVuKGZ1bmN0aW9uIChpbnB1dE9wdGlvbnMpIHtcbiAgICAgICAgaW5zdGFuY2UuaGlkZUxvYWRpbmcoKTtcbiAgICAgICAgcHJvY2Vzc0lucHV0T3B0aW9ucyhpbnB1dE9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKHBhcmFtcy5pbnB1dE9wdGlvbnMpID09PSAnb2JqZWN0Jykge1xuICAgICAgcHJvY2Vzc0lucHV0T3B0aW9ucyhwYXJhbXMuaW5wdXRPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3IoXCJVbmV4cGVjdGVkIHR5cGUgb2YgaW5wdXRPcHRpb25zISBFeHBlY3RlZCBvYmplY3QsIE1hcCBvciBQcm9taXNlLCBnb3QgXCIuY29uY2F0KF90eXBlb2YocGFyYW1zLmlucHV0T3B0aW9ucykpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUlucHV0VmFsdWUgPSBmdW5jdGlvbiBoYW5kbGVJbnB1dFZhbHVlKGluc3RhbmNlLCBwYXJhbXMpIHtcbiAgICB2YXIgaW5wdXQgPSBpbnN0YW5jZS5nZXRJbnB1dCgpO1xuICAgIGhpZGUoaW5wdXQpO1xuICAgIGFzUHJvbWlzZShwYXJhbXMuaW5wdXRWYWx1ZSkudGhlbihmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xuICAgICAgaW5wdXQudmFsdWUgPSBwYXJhbXMuaW5wdXQgPT09ICdudW1iZXInID8gcGFyc2VGbG9hdChpbnB1dFZhbHVlKSB8fCAwIDogXCJcIi5jb25jYXQoaW5wdXRWYWx1ZSk7XG4gICAgICBzaG93KGlucHV0KTtcbiAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICBpbnN0YW5jZS5oaWRlTG9hZGluZygpO1xuICAgIH0pW1wiY2F0Y2hcIl0oZnVuY3Rpb24gKGVycikge1xuICAgICAgZXJyb3IoXCJFcnJvciBpbiBpbnB1dFZhbHVlIHByb21pc2U6IFwiLmNvbmNhdChlcnIpKTtcbiAgICAgIGlucHV0LnZhbHVlID0gJyc7XG4gICAgICBzaG93KGlucHV0KTtcbiAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICBpbnN0YW5jZS5oaWRlTG9hZGluZygpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBwb3B1bGF0ZUlucHV0T3B0aW9ucyA9IHtcbiAgICBzZWxlY3Q6IGZ1bmN0aW9uIHNlbGVjdChjb250ZW50LCBpbnB1dE9wdGlvbnMsIHBhcmFtcykge1xuICAgICAgdmFyIHNlbGVjdCA9IGdldENoaWxkQnlDbGFzcyhjb250ZW50LCBzd2FsQ2xhc3Nlcy5zZWxlY3QpO1xuXG4gICAgICB2YXIgcmVuZGVyT3B0aW9uID0gZnVuY3Rpb24gcmVuZGVyT3B0aW9uKHBhcmVudCwgb3B0aW9uTGFiZWwsIG9wdGlvblZhbHVlKSB7XG4gICAgICAgIHZhciBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgb3B0aW9uLnZhbHVlID0gb3B0aW9uVmFsdWU7XG4gICAgICAgIHNldElubmVySHRtbChvcHRpb24sIG9wdGlvbkxhYmVsKTtcblxuICAgICAgICBpZiAocGFyYW1zLmlucHV0VmFsdWUudG9TdHJpbmcoKSA9PT0gb3B0aW9uVmFsdWUudG9TdHJpbmcoKSkge1xuICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgIH07XG5cbiAgICAgIGlucHV0T3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChpbnB1dE9wdGlvbikge1xuICAgICAgICB2YXIgb3B0aW9uVmFsdWUgPSBpbnB1dE9wdGlvblswXTtcbiAgICAgICAgdmFyIG9wdGlvbkxhYmVsID0gaW5wdXRPcHRpb25bMV07IC8vIDxvcHRncm91cD4gc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw0MDEvaW50ZXJhY3QvZm9ybXMuaHRtbCNoLTE3LjZcbiAgICAgICAgLy8gXCIuLi5hbGwgT1BUR1JPVVAgZWxlbWVudHMgbXVzdCBiZSBzcGVjaWZpZWQgZGlyZWN0bHkgd2l0aGluIGEgU0VMRUNUIGVsZW1lbnQgKGkuZS4sIGdyb3VwcyBtYXkgbm90IGJlIG5lc3RlZCkuLi5cIlxuICAgICAgICAvLyBjaGVjayB3aGV0aGVyIHRoaXMgaXMgYSA8b3B0Z3JvdXA+XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9uTGFiZWwpKSB7XG4gICAgICAgICAgLy8gaWYgaXQgaXMgYW4gYXJyYXksIHRoZW4gaXQgaXMgYW4gPG9wdGdyb3VwPlxuICAgICAgICAgIHZhciBvcHRncm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGdyb3VwJyk7XG4gICAgICAgICAgb3B0Z3JvdXAubGFiZWwgPSBvcHRpb25WYWx1ZTtcbiAgICAgICAgICBvcHRncm91cC5kaXNhYmxlZCA9IGZhbHNlOyAvLyBub3QgY29uZmlndXJhYmxlIGZvciBub3dcblxuICAgICAgICAgIHNlbGVjdC5hcHBlbmRDaGlsZChvcHRncm91cCk7XG4gICAgICAgICAgb3B0aW9uTGFiZWwuZm9yRWFjaChmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgcmV0dXJuIHJlbmRlck9wdGlvbihvcHRncm91cCwgb1sxXSwgb1swXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY2FzZSBvZiA8b3B0aW9uPlxuICAgICAgICAgIHJlbmRlck9wdGlvbihzZWxlY3QsIG9wdGlvbkxhYmVsLCBvcHRpb25WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc2VsZWN0LmZvY3VzKCk7XG4gICAgfSxcbiAgICByYWRpbzogZnVuY3Rpb24gcmFkaW8oY29udGVudCwgaW5wdXRPcHRpb25zLCBwYXJhbXMpIHtcbiAgICAgIHZhciByYWRpbyA9IGdldENoaWxkQnlDbGFzcyhjb250ZW50LCBzd2FsQ2xhc3Nlcy5yYWRpbyk7XG4gICAgICBpbnB1dE9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoaW5wdXRPcHRpb24pIHtcbiAgICAgICAgdmFyIHJhZGlvVmFsdWUgPSBpbnB1dE9wdGlvblswXTtcbiAgICAgICAgdmFyIHJhZGlvTGFiZWwgPSBpbnB1dE9wdGlvblsxXTtcbiAgICAgICAgdmFyIHJhZGlvSW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICB2YXIgcmFkaW9MYWJlbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgICAgICByYWRpb0lucHV0LnR5cGUgPSAncmFkaW8nO1xuICAgICAgICByYWRpb0lucHV0Lm5hbWUgPSBzd2FsQ2xhc3Nlcy5yYWRpbztcbiAgICAgICAgcmFkaW9JbnB1dC52YWx1ZSA9IHJhZGlvVmFsdWU7XG5cbiAgICAgICAgaWYgKHBhcmFtcy5pbnB1dFZhbHVlLnRvU3RyaW5nKCkgPT09IHJhZGlvVmFsdWUudG9TdHJpbmcoKSkge1xuICAgICAgICAgIHJhZGlvSW5wdXQuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIHNldElubmVySHRtbChsYWJlbCwgcmFkaW9MYWJlbCk7XG4gICAgICAgIGxhYmVsLmNsYXNzTmFtZSA9IHN3YWxDbGFzc2VzLmxhYmVsO1xuICAgICAgICByYWRpb0xhYmVsRWxlbWVudC5hcHBlbmRDaGlsZChyYWRpb0lucHV0KTtcbiAgICAgICAgcmFkaW9MYWJlbEVsZW1lbnQuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgICByYWRpby5hcHBlbmRDaGlsZChyYWRpb0xhYmVsRWxlbWVudCk7XG4gICAgICB9KTtcbiAgICAgIHZhciByYWRpb3MgPSByYWRpby5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpO1xuXG4gICAgICBpZiAocmFkaW9zLmxlbmd0aCkge1xuICAgICAgICByYWRpb3NbMF0uZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaW5wdXRPcHRpb25zYCBpbnRvIGFuIGFycmF5IG9mIGBbdmFsdWUsIGxhYmVsXWBzXG4gICAqIEBwYXJhbSBpbnB1dE9wdGlvbnNcbiAgICovXG5cbiAgdmFyIGZvcm1hdElucHV0T3B0aW9ucyA9IGZ1bmN0aW9uIGZvcm1hdElucHV0T3B0aW9ucyhpbnB1dE9wdGlvbnMpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICBpZiAodHlwZW9mIE1hcCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW5wdXRPcHRpb25zIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICBpbnB1dE9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICB2YXIgdmFsdWVGb3JtYXR0ZWQgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoX3R5cGVvZih2YWx1ZUZvcm1hdHRlZCkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gY2FzZSBvZiA8b3B0Z3JvdXA+XG4gICAgICAgICAgdmFsdWVGb3JtYXR0ZWQgPSBmb3JtYXRJbnB1dE9wdGlvbnModmFsdWVGb3JtYXR0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LnB1c2goW2tleSwgdmFsdWVGb3JtYXR0ZWRdKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3Qua2V5cyhpbnB1dE9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsdWVGb3JtYXR0ZWQgPSBpbnB1dE9wdGlvbnNba2V5XTtcblxuICAgICAgICBpZiAoX3R5cGVvZih2YWx1ZUZvcm1hdHRlZCkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gY2FzZSBvZiA8b3B0Z3JvdXA+XG4gICAgICAgICAgdmFsdWVGb3JtYXR0ZWQgPSBmb3JtYXRJbnB1dE9wdGlvbnModmFsdWVGb3JtYXR0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LnB1c2goW2tleSwgdmFsdWVGb3JtYXR0ZWRdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUNvbmZpcm1CdXR0b25DbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNvbmZpcm1CdXR0b25DbGljayhpbnN0YW5jZSwgaW5uZXJQYXJhbXMpIHtcbiAgICBpbnN0YW5jZS5kaXNhYmxlQnV0dG9ucygpO1xuXG4gICAgaWYgKGlubmVyUGFyYW1zLmlucHV0KSB7XG4gICAgICBoYW5kbGVDb25maXJtT3JEZW55V2l0aElucHV0KGluc3RhbmNlLCBpbm5lclBhcmFtcywgJ2NvbmZpcm0nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlybShpbnN0YW5jZSwgaW5uZXJQYXJhbXMsIHRydWUpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGhhbmRsZURlbnlCdXR0b25DbGljayA9IGZ1bmN0aW9uIGhhbmRsZURlbnlCdXR0b25DbGljayhpbnN0YW5jZSwgaW5uZXJQYXJhbXMpIHtcbiAgICBpbnN0YW5jZS5kaXNhYmxlQnV0dG9ucygpOyAvLyBoZXJlIHdlIGNvdWxkIGFkZCBwcmVEZW55IGluIGZ1dHVyZSwgaWYgbmVlZGVkXG5cbiAgICBpZiAoaW5uZXJQYXJhbXMucmV0dXJuSW5wdXRWYWx1ZU9uRGVueSkge1xuICAgICAgaGFuZGxlQ29uZmlybU9yRGVueVdpdGhJbnB1dChpbnN0YW5jZSwgaW5uZXJQYXJhbXMsICdkZW55Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbnkoaW5zdGFuY2UsIGZhbHNlKTtcbiAgICB9XG4gIH07XG4gIHZhciBoYW5kbGVDYW5jZWxCdXR0b25DbGljayA9IGZ1bmN0aW9uIGhhbmRsZUNhbmNlbEJ1dHRvbkNsaWNrKGluc3RhbmNlLCBkaXNtaXNzV2l0aCkge1xuICAgIGluc3RhbmNlLmRpc2FibGVCdXR0b25zKCk7XG4gICAgZGlzbWlzc1dpdGgoRGlzbWlzc1JlYXNvbi5jYW5jZWwpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVDb25maXJtT3JEZW55V2l0aElucHV0ID0gZnVuY3Rpb24gaGFuZGxlQ29uZmlybU9yRGVueVdpdGhJbnB1dChpbnN0YW5jZSwgaW5uZXJQYXJhbXMsIHR5cGVcbiAgLyogdHlwZSBpcyBlaXRoZXIgJ2NvbmZpcm0nIG9yICdkZW55JyAqL1xuICApIHtcbiAgICB2YXIgaW5wdXRWYWx1ZSA9IGdldElucHV0VmFsdWUoaW5zdGFuY2UsIGlubmVyUGFyYW1zKTtcblxuICAgIGlmIChpbm5lclBhcmFtcy5pbnB1dFZhbGlkYXRvcikge1xuICAgICAgaGFuZGxlSW5wdXRWYWxpZGF0b3IoaW5zdGFuY2UsIGlubmVyUGFyYW1zLCBpbnB1dFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKCFpbnN0YW5jZS5nZXRJbnB1dCgpLmNoZWNrVmFsaWRpdHkoKSkge1xuICAgICAgaW5zdGFuY2UuZW5hYmxlQnV0dG9ucygpO1xuICAgICAgaW5zdGFuY2Uuc2hvd1ZhbGlkYXRpb25NZXNzYWdlKGlubmVyUGFyYW1zLnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdkZW55Jykge1xuICAgICAgZGVueShpbnN0YW5jZSwgaW5wdXRWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpcm0oaW5zdGFuY2UsIGlubmVyUGFyYW1zLCBpbnB1dFZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZUlucHV0VmFsaWRhdG9yID0gZnVuY3Rpb24gaGFuZGxlSW5wdXRWYWxpZGF0b3IoaW5zdGFuY2UsIGlubmVyUGFyYW1zLCBpbnB1dFZhbHVlKSB7XG4gICAgaW5zdGFuY2UuZGlzYWJsZUlucHV0KCk7XG4gICAgdmFyIHZhbGlkYXRpb25Qcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYXNQcm9taXNlKGlubmVyUGFyYW1zLmlucHV0VmFsaWRhdG9yKGlucHV0VmFsdWUsIGlubmVyUGFyYW1zLnZhbGlkYXRpb25NZXNzYWdlKSk7XG4gICAgfSk7XG4gICAgdmFsaWRhdGlvblByb21pc2UudGhlbihmdW5jdGlvbiAodmFsaWRhdGlvbk1lc3NhZ2UpIHtcbiAgICAgIGluc3RhbmNlLmVuYWJsZUJ1dHRvbnMoKTtcbiAgICAgIGluc3RhbmNlLmVuYWJsZUlucHV0KCk7XG5cbiAgICAgIGlmICh2YWxpZGF0aW9uTWVzc2FnZSkge1xuICAgICAgICBpbnN0YW5jZS5zaG93VmFsaWRhdGlvbk1lc3NhZ2UodmFsaWRhdGlvbk1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlybShpbnN0YW5jZSwgaW5uZXJQYXJhbXMsIGlucHV0VmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBkZW55ID0gZnVuY3Rpb24gZGVueShpbnN0YW5jZSwgdmFsdWUpIHtcbiAgICBpbnN0YW5jZS5jbG9zZVBvcHVwKHtcbiAgICAgIGlzRGVuaWVkOiB0cnVlLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHN1Y2NlZWRXaXRoID0gZnVuY3Rpb24gc3VjY2VlZFdpdGgoaW5zdGFuY2UsIHZhbHVlKSB7XG4gICAgaW5zdGFuY2UuY2xvc2VQb3B1cCh7XG4gICAgICBpc0NvbmZpcm1lZDogdHJ1ZSxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjb25maXJtID0gZnVuY3Rpb24gY29uZmlybShpbnN0YW5jZSwgaW5uZXJQYXJhbXMsIHZhbHVlKSB7XG4gICAgaWYgKGlubmVyUGFyYW1zLnNob3dMb2FkZXJPbkNvbmZpcm0pIHtcbiAgICAgIHNob3dMb2FkaW5nKCk7IC8vIFRPRE86IG1ha2Ugc2hvd0xvYWRpbmcgYW4gKmluc3RhbmNlKiBtZXRob2RcbiAgICB9XG5cbiAgICBpZiAoaW5uZXJQYXJhbXMucHJlQ29uZmlybSkge1xuICAgICAgaW5zdGFuY2UucmVzZXRWYWxpZGF0aW9uTWVzc2FnZSgpO1xuICAgICAgdmFyIHByZUNvbmZpcm1Qcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhc1Byb21pc2UoaW5uZXJQYXJhbXMucHJlQ29uZmlybSh2YWx1ZSwgaW5uZXJQYXJhbXMudmFsaWRhdGlvbk1lc3NhZ2UpKTtcbiAgICAgIH0pO1xuICAgICAgcHJlQ29uZmlybVByb21pc2UudGhlbihmdW5jdGlvbiAocHJlQ29uZmlybVZhbHVlKSB7XG4gICAgICAgIGlmIChpc1Zpc2libGUoZ2V0VmFsaWRhdGlvbk1lc3NhZ2UoKSkgfHwgcHJlQ29uZmlybVZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICAgIGluc3RhbmNlLmhpZGVMb2FkaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3VjY2VlZFdpdGgoaW5zdGFuY2UsIHR5cGVvZiBwcmVDb25maXJtVmFsdWUgPT09ICd1bmRlZmluZWQnID8gdmFsdWUgOiBwcmVDb25maXJtVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3VjY2VlZFdpdGgoaW5zdGFuY2UsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGFkZEtleWRvd25IYW5kbGVyID0gZnVuY3Rpb24gYWRkS2V5ZG93bkhhbmRsZXIoaW5zdGFuY2UsIGdsb2JhbFN0YXRlLCBpbm5lclBhcmFtcywgZGlzbWlzc1dpdGgpIHtcbiAgICBpZiAoZ2xvYmFsU3RhdGUua2V5ZG93blRhcmdldCAmJiBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlckFkZGVkKSB7XG4gICAgICBnbG9iYWxTdGF0ZS5rZXlkb3duVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlciwge1xuICAgICAgICBjYXB0dXJlOiBnbG9iYWxTdGF0ZS5rZXlkb3duTGlzdGVuZXJDYXB0dXJlXG4gICAgICB9KTtcbiAgICAgIGdsb2JhbFN0YXRlLmtleWRvd25IYW5kbGVyQWRkZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWlubmVyUGFyYW1zLnRvYXN0KSB7XG4gICAgICBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBrZXlkb3duSGFuZGxlcihpbnN0YW5jZSwgZSwgZGlzbWlzc1dpdGgpO1xuICAgICAgfTtcblxuICAgICAgZ2xvYmFsU3RhdGUua2V5ZG93blRhcmdldCA9IGlubmVyUGFyYW1zLmtleWRvd25MaXN0ZW5lckNhcHR1cmUgPyB3aW5kb3cgOiBnZXRQb3B1cCgpO1xuICAgICAgZ2xvYmFsU3RhdGUua2V5ZG93bkxpc3RlbmVyQ2FwdHVyZSA9IGlubmVyUGFyYW1zLmtleWRvd25MaXN0ZW5lckNhcHR1cmU7XG4gICAgICBnbG9iYWxTdGF0ZS5rZXlkb3duVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlciwge1xuICAgICAgICBjYXB0dXJlOiBnbG9iYWxTdGF0ZS5rZXlkb3duTGlzdGVuZXJDYXB0dXJlXG4gICAgICB9KTtcbiAgICAgIGdsb2JhbFN0YXRlLmtleWRvd25IYW5kbGVyQWRkZWQgPSB0cnVlO1xuICAgIH1cbiAgfTsgLy8gRm9jdXMgaGFuZGxpbmdcblxuICB2YXIgc2V0Rm9jdXMgPSBmdW5jdGlvbiBzZXRGb2N1cyhpbm5lclBhcmFtcywgaW5kZXgsIGluY3JlbWVudCkge1xuICAgIHZhciBmb2N1c2FibGVFbGVtZW50cyA9IGdldEZvY3VzYWJsZUVsZW1lbnRzKCk7IC8vIHNlYXJjaCBmb3IgdmlzaWJsZSBlbGVtZW50cyBhbmQgc2VsZWN0IHRoZSBuZXh0IHBvc3NpYmxlIG1hdGNoXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbmRleCA9IGluZGV4ICsgaW5jcmVtZW50OyAvLyByb2xsb3ZlciB0byBmaXJzdCBpdGVtXG5cbiAgICAgIGlmIChpbmRleCA9PT0gZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIGluZGV4ID0gMDsgLy8gZ28gdG8gbGFzdCBpdGVtXG4gICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBpbmRleCA9IGZvY3VzYWJsZUVsZW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb2N1c2FibGVFbGVtZW50c1tpbmRleF0uZm9jdXMoKTtcbiAgICB9IC8vIG5vIHZpc2libGUgZm9jdXNhYmxlIGVsZW1lbnRzLCBmb2N1cyB0aGUgcG9wdXBcblxuXG4gICAgZ2V0UG9wdXAoKS5mb2N1cygpO1xuICB9O1xuICB2YXIgYXJyb3dLZXlzTmV4dEJ1dHRvbiA9IFsnQXJyb3dSaWdodCcsICdBcnJvd0Rvd24nLCAnUmlnaHQnLCAnRG93bicgLy8gSUUxMVxuICBdO1xuICB2YXIgYXJyb3dLZXlzUHJldmlvdXNCdXR0b24gPSBbJ0Fycm93TGVmdCcsICdBcnJvd1VwJywgJ0xlZnQnLCAnVXAnIC8vIElFMTFcbiAgXTtcbiAgdmFyIGVzY0tleXMgPSBbJ0VzY2FwZScsICdFc2MnIC8vIElFMTFcbiAgXTtcblxuICB2YXIga2V5ZG93bkhhbmRsZXIgPSBmdW5jdGlvbiBrZXlkb3duSGFuZGxlcihpbnN0YW5jZSwgZSwgZGlzbWlzc1dpdGgpIHtcbiAgICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KGluc3RhbmNlKTtcblxuICAgIGlmIChpbm5lclBhcmFtcy5zdG9wS2V5ZG93blByb3BhZ2F0aW9uKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0gLy8gRU5URVJcblxuXG4gICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICBoYW5kbGVFbnRlcihpbnN0YW5jZSwgZSwgaW5uZXJQYXJhbXMpOyAvLyBUQUJcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnVGFiJykge1xuICAgICAgaGFuZGxlVGFiKGUsIGlubmVyUGFyYW1zKTsgLy8gQVJST1dTIC0gc3dpdGNoIGZvY3VzIGJldHdlZW4gYnV0dG9uc1xuICAgIH0gZWxzZSBpZiAoW10uY29uY2F0KGFycm93S2V5c05leHRCdXR0b24sIGFycm93S2V5c1ByZXZpb3VzQnV0dG9uKS5pbmRleE9mKGUua2V5KSAhPT0gLTEpIHtcbiAgICAgIGhhbmRsZUFycm93cyhlLmtleSk7IC8vIEVTQ1xuICAgIH0gZWxzZSBpZiAoZXNjS2V5cy5pbmRleE9mKGUua2V5KSAhPT0gLTEpIHtcbiAgICAgIGhhbmRsZUVzYyhlLCBpbm5lclBhcmFtcywgZGlzbWlzc1dpdGgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcihpbnN0YW5jZSwgZSwgaW5uZXJQYXJhbXMpIHtcbiAgICAvLyAjNzIwICM3MjFcbiAgICBpZiAoZS5pc0NvbXBvc2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlLnRhcmdldCAmJiBpbnN0YW5jZS5nZXRJbnB1dCgpICYmIGUudGFyZ2V0Lm91dGVySFRNTCA9PT0gaW5zdGFuY2UuZ2V0SW5wdXQoKS5vdXRlckhUTUwpIHtcbiAgICAgIGlmIChbJ3RleHRhcmVhJywgJ2ZpbGUnXS5pbmRleE9mKGlubmVyUGFyYW1zLmlucHV0KSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuOyAvLyBkbyBub3Qgc3VibWl0XG4gICAgICB9XG5cbiAgICAgIGNsaWNrQ29uZmlybSgpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlVGFiID0gZnVuY3Rpb24gaGFuZGxlVGFiKGUsIGlubmVyUGFyYW1zKSB7XG4gICAgdmFyIHRhcmdldEVsZW1lbnQgPSBlLnRhcmdldDtcbiAgICB2YXIgZm9jdXNhYmxlRWxlbWVudHMgPSBnZXRGb2N1c2FibGVFbGVtZW50cygpO1xuICAgIHZhciBidG5JbmRleCA9IC0xO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmb2N1c2FibGVFbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRhcmdldEVsZW1lbnQgPT09IGZvY3VzYWJsZUVsZW1lbnRzW2ldKSB7XG4gICAgICAgIGJ0bkluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFlLnNoaWZ0S2V5KSB7XG4gICAgICAvLyBDeWNsZSB0byB0aGUgbmV4dCBidXR0b25cbiAgICAgIHNldEZvY3VzKGlubmVyUGFyYW1zLCBidG5JbmRleCwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEN5Y2xlIHRvIHRoZSBwcmV2IGJ1dHRvblxuICAgICAgc2V0Rm9jdXMoaW5uZXJQYXJhbXMsIGJ0bkluZGV4LCAtMSk7XG4gICAgfVxuXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUFycm93cyA9IGZ1bmN0aW9uIGhhbmRsZUFycm93cyhrZXkpIHtcbiAgICB2YXIgY29uZmlybUJ1dHRvbiA9IGdldENvbmZpcm1CdXR0b24oKTtcbiAgICB2YXIgZGVueUJ1dHRvbiA9IGdldERlbnlCdXR0b24oKTtcbiAgICB2YXIgY2FuY2VsQnV0dG9uID0gZ2V0Q2FuY2VsQnV0dG9uKCk7XG5cbiAgICBpZiAoIShbY29uZmlybUJ1dHRvbiwgZGVueUJ1dHRvbiwgY2FuY2VsQnV0dG9uXS5pbmRleE9mKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpICE9PSAtMSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2libGluZyA9IGFycm93S2V5c05leHRCdXR0b24uaW5kZXhPZihrZXkpICE9PSAtMSA/ICduZXh0RWxlbWVudFNpYmxpbmcnIDogJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnO1xuICAgIHZhciBidXR0b25Ub0ZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFtzaWJsaW5nXTtcblxuICAgIGlmIChidXR0b25Ub0ZvY3VzKSB7XG4gICAgICBidXR0b25Ub0ZvY3VzLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVFc2MgPSBmdW5jdGlvbiBoYW5kbGVFc2MoZSwgaW5uZXJQYXJhbXMsIGRpc21pc3NXaXRoKSB7XG4gICAgaWYgKGNhbGxJZkZ1bmN0aW9uKGlubmVyUGFyYW1zLmFsbG93RXNjYXBlS2V5KSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZGlzbWlzc1dpdGgoRGlzbWlzc1JlYXNvbi5lc2MpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wdXBDbGljayA9IGZ1bmN0aW9uIGhhbmRsZVBvcHVwQ2xpY2soaW5zdGFuY2UsIGRvbUNhY2hlLCBkaXNtaXNzV2l0aCkge1xuICAgIHZhciBpbm5lclBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQoaW5zdGFuY2UpO1xuXG4gICAgaWYgKGlubmVyUGFyYW1zLnRvYXN0KSB7XG4gICAgICBoYW5kbGVUb2FzdENsaWNrKGluc3RhbmNlLCBkb21DYWNoZSwgZGlzbWlzc1dpdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZ25vcmUgY2xpY2sgZXZlbnRzIHRoYXQgaGFkIG1vdXNlZG93biBvbiB0aGUgcG9wdXAgYnV0IG1vdXNldXAgb24gdGhlIGNvbnRhaW5lclxuICAgICAgLy8gVGhpcyBjYW4gaGFwcGVuIHdoZW4gdGhlIHVzZXIgZHJhZ3MgYSBzbGlkZXJcbiAgICAgIGhhbmRsZU1vZGFsTW91c2Vkb3duKGRvbUNhY2hlKTsgLy8gSWdub3JlIGNsaWNrIGV2ZW50cyB0aGF0IGhhZCBtb3VzZWRvd24gb24gdGhlIGNvbnRhaW5lciBidXQgbW91c2V1cCBvbiB0aGUgcG9wdXBcblxuICAgICAgaGFuZGxlQ29udGFpbmVyTW91c2Vkb3duKGRvbUNhY2hlKTtcbiAgICAgIGhhbmRsZU1vZGFsQ2xpY2soaW5zdGFuY2UsIGRvbUNhY2hlLCBkaXNtaXNzV2l0aCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVUb2FzdENsaWNrID0gZnVuY3Rpb24gaGFuZGxlVG9hc3RDbGljayhpbnN0YW5jZSwgZG9tQ2FjaGUsIGRpc21pc3NXaXRoKSB7XG4gICAgLy8gQ2xvc2luZyB0b2FzdCBieSBpbnRlcm5hbCBjbGlja1xuICAgIGRvbUNhY2hlLnBvcHVwLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KGluc3RhbmNlKTtcblxuICAgICAgaWYgKGlubmVyUGFyYW1zLnNob3dDb25maXJtQnV0dG9uIHx8IGlubmVyUGFyYW1zLnNob3dEZW55QnV0dG9uIHx8IGlubmVyUGFyYW1zLnNob3dDYW5jZWxCdXR0b24gfHwgaW5uZXJQYXJhbXMuc2hvd0Nsb3NlQnV0dG9uIHx8IGlubmVyUGFyYW1zLmlucHV0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGlzbWlzc1dpdGgoRGlzbWlzc1JlYXNvbi5jbG9zZSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaWdub3JlT3V0c2lkZUNsaWNrID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZU1vZGFsTW91c2Vkb3duID0gZnVuY3Rpb24gaGFuZGxlTW9kYWxNb3VzZWRvd24oZG9tQ2FjaGUpIHtcbiAgICBkb21DYWNoZS5wb3B1cC5vbm1vdXNlZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRvbUNhY2hlLmNvbnRhaW5lci5vbm1vdXNldXAgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBkb21DYWNoZS5jb250YWluZXIub25tb3VzZXVwID0gdW5kZWZpbmVkOyAvLyBXZSBvbmx5IGNoZWNrIGlmIHRoZSBtb3VzZXVwIHRhcmdldCBpcyB0aGUgY29udGFpbmVyIGJlY2F1c2UgdXN1YWxseSBpdCBkb2Vzbid0XG4gICAgICAgIC8vIGhhdmUgYW55IG90aGVyIGRpcmVjdCBjaGlsZHJlbiBhc2lkZSBvZiB0aGUgcG9wdXBcblxuICAgICAgICBpZiAoZS50YXJnZXQgPT09IGRvbUNhY2hlLmNvbnRhaW5lcikge1xuICAgICAgICAgIGlnbm9yZU91dHNpZGVDbGljayA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQ29udGFpbmVyTW91c2Vkb3duID0gZnVuY3Rpb24gaGFuZGxlQ29udGFpbmVyTW91c2Vkb3duKGRvbUNhY2hlKSB7XG4gICAgZG9tQ2FjaGUuY29udGFpbmVyLm9ubW91c2Vkb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgZG9tQ2FjaGUucG9wdXAub25tb3VzZXVwID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZG9tQ2FjaGUucG9wdXAub25tb3VzZXVwID0gdW5kZWZpbmVkOyAvLyBXZSBhbHNvIG5lZWQgdG8gY2hlY2sgaWYgdGhlIG1vdXNldXAgdGFyZ2V0IGlzIGEgY2hpbGQgb2YgdGhlIHBvcHVwXG5cbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBkb21DYWNoZS5wb3B1cCB8fCBkb21DYWNoZS5wb3B1cC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgICBpZ25vcmVPdXRzaWRlQ2xpY2sgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhbmRsZU1vZGFsQ2xpY2sgPSBmdW5jdGlvbiBoYW5kbGVNb2RhbENsaWNrKGluc3RhbmNlLCBkb21DYWNoZSwgZGlzbWlzc1dpdGgpIHtcbiAgICBkb21DYWNoZS5jb250YWluZXIub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KGluc3RhbmNlKTtcblxuICAgICAgaWYgKGlnbm9yZU91dHNpZGVDbGljaykge1xuICAgICAgICBpZ25vcmVPdXRzaWRlQ2xpY2sgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZS50YXJnZXQgPT09IGRvbUNhY2hlLmNvbnRhaW5lciAmJiBjYWxsSWZGdW5jdGlvbihpbm5lclBhcmFtcy5hbGxvd091dHNpZGVDbGljaykpIHtcbiAgICAgICAgZGlzbWlzc1dpdGgoRGlzbWlzc1JlYXNvbi5iYWNrZHJvcCk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBfbWFpbih1c2VyUGFyYW1zKSB7XG4gICAgc2hvd1dhcm5pbmdzRm9yUGFyYW1zKHVzZXJQYXJhbXMpO1xuXG4gICAgaWYgKGdsb2JhbFN0YXRlLmN1cnJlbnRJbnN0YW5jZSkge1xuICAgICAgZ2xvYmFsU3RhdGUuY3VycmVudEluc3RhbmNlLl9kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgZ2xvYmFsU3RhdGUuY3VycmVudEluc3RhbmNlID0gdGhpcztcbiAgICB2YXIgaW5uZXJQYXJhbXMgPSBwcmVwYXJlUGFyYW1zKHVzZXJQYXJhbXMpO1xuICAgIHNldFBhcmFtZXRlcnMoaW5uZXJQYXJhbXMpO1xuICAgIE9iamVjdC5mcmVlemUoaW5uZXJQYXJhbXMpOyAvLyBjbGVhciB0aGUgcHJldmlvdXMgdGltZXJcblxuICAgIGlmIChnbG9iYWxTdGF0ZS50aW1lb3V0KSB7XG4gICAgICBnbG9iYWxTdGF0ZS50aW1lb3V0LnN0b3AoKTtcbiAgICAgIGRlbGV0ZSBnbG9iYWxTdGF0ZS50aW1lb3V0O1xuICAgIH0gLy8gY2xlYXIgdGhlIHJlc3RvcmUgZm9jdXMgdGltZW91dFxuXG5cbiAgICBjbGVhclRpbWVvdXQoZ2xvYmFsU3RhdGUucmVzdG9yZUZvY3VzVGltZW91dCk7XG4gICAgdmFyIGRvbUNhY2hlID0gcG9wdWxhdGVEb21DYWNoZSh0aGlzKTtcbiAgICByZW5kZXIodGhpcywgaW5uZXJQYXJhbXMpO1xuICAgIHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5zZXQodGhpcywgaW5uZXJQYXJhbXMpO1xuICAgIHJldHVybiBzd2FsUHJvbWlzZSh0aGlzLCBkb21DYWNoZSwgaW5uZXJQYXJhbXMpO1xuICB9XG5cbiAgdmFyIHByZXBhcmVQYXJhbXMgPSBmdW5jdGlvbiBwcmVwYXJlUGFyYW1zKHVzZXJQYXJhbXMpIHtcbiAgICB2YXIgc2hvd0NsYXNzID0gX2V4dGVuZHMoe30sIGRlZmF1bHRQYXJhbXMuc2hvd0NsYXNzLCB1c2VyUGFyYW1zLnNob3dDbGFzcyk7XG5cbiAgICB2YXIgaGlkZUNsYXNzID0gX2V4dGVuZHMoe30sIGRlZmF1bHRQYXJhbXMuaGlkZUNsYXNzLCB1c2VyUGFyYW1zLmhpZGVDbGFzcyk7XG5cbiAgICB2YXIgcGFyYW1zID0gX2V4dGVuZHMoe30sIGRlZmF1bHRQYXJhbXMsIHVzZXJQYXJhbXMpO1xuXG4gICAgcGFyYW1zLnNob3dDbGFzcyA9IHNob3dDbGFzcztcbiAgICBwYXJhbXMuaGlkZUNsYXNzID0gaGlkZUNsYXNzOyAvLyBAZGVwcmVjYXRlZFxuXG4gICAgaWYgKHVzZXJQYXJhbXMuYW5pbWF0aW9uID09PSBmYWxzZSkge1xuICAgICAgcGFyYW1zLnNob3dDbGFzcyA9IHtcbiAgICAgICAgcG9wdXA6ICdzd2FsMi1ub2FuaW1hdGlvbicsXG4gICAgICAgIGJhY2tkcm9wOiAnc3dhbDItbm9hbmltYXRpb24nXG4gICAgICB9O1xuICAgICAgcGFyYW1zLmhpZGVDbGFzcyA9IHt9O1xuICAgIH1cblxuICAgIHJldHVybiBwYXJhbXM7XG4gIH07XG5cbiAgdmFyIHN3YWxQcm9taXNlID0gZnVuY3Rpb24gc3dhbFByb21pc2UoaW5zdGFuY2UsIGRvbUNhY2hlLCBpbm5lclBhcmFtcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgLy8gZnVuY3Rpb25zIHRvIGhhbmRsZSBhbGwgY2xvc2luZ3MvZGlzbWlzc2Fsc1xuICAgICAgdmFyIGRpc21pc3NXaXRoID0gZnVuY3Rpb24gZGlzbWlzc1dpdGgoZGlzbWlzcykge1xuICAgICAgICBpbnN0YW5jZS5jbG9zZVBvcHVwKHtcbiAgICAgICAgICBpc0Rpc21pc3NlZDogdHJ1ZSxcbiAgICAgICAgICBkaXNtaXNzOiBkaXNtaXNzXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgcHJpdmF0ZU1ldGhvZHMuc3dhbFByb21pc2VSZXNvbHZlLnNldChpbnN0YW5jZSwgcmVzb2x2ZSk7XG5cbiAgICAgIGRvbUNhY2hlLmNvbmZpcm1CdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNvbmZpcm1CdXR0b25DbGljayhpbnN0YW5jZSwgaW5uZXJQYXJhbXMpO1xuICAgICAgfTtcblxuICAgICAgZG9tQ2FjaGUuZGVueUJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlRGVueUJ1dHRvbkNsaWNrKGluc3RhbmNlLCBpbm5lclBhcmFtcyk7XG4gICAgICB9O1xuXG4gICAgICBkb21DYWNoZS5jYW5jZWxCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbmNlbEJ1dHRvbkNsaWNrKGluc3RhbmNlLCBkaXNtaXNzV2l0aCk7XG4gICAgICB9O1xuXG4gICAgICBkb21DYWNoZS5jbG9zZUJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGlzbWlzc1dpdGgoRGlzbWlzc1JlYXNvbi5jbG9zZSk7XG4gICAgICB9O1xuXG4gICAgICBoYW5kbGVQb3B1cENsaWNrKGluc3RhbmNlLCBkb21DYWNoZSwgZGlzbWlzc1dpdGgpO1xuICAgICAgYWRkS2V5ZG93bkhhbmRsZXIoaW5zdGFuY2UsIGdsb2JhbFN0YXRlLCBpbm5lclBhcmFtcywgZGlzbWlzc1dpdGgpO1xuXG4gICAgICBpZiAoaW5uZXJQYXJhbXMudG9hc3QgJiYgKGlubmVyUGFyYW1zLmlucHV0IHx8IGlubmVyUGFyYW1zLmZvb3RlciB8fCBpbm5lclBhcmFtcy5zaG93Q2xvc2VCdXR0b24pKSB7XG4gICAgICAgIGFkZENsYXNzKGRvY3VtZW50LmJvZHksIHN3YWxDbGFzc2VzWyd0b2FzdC1jb2x1bW4nXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5ib2R5LCBzd2FsQ2xhc3Nlc1sndG9hc3QtY29sdW1uJ10pO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVJbnB1dE9wdGlvbnNBbmRWYWx1ZShpbnN0YW5jZSwgaW5uZXJQYXJhbXMpO1xuICAgICAgb3BlblBvcHVwKGlubmVyUGFyYW1zKTtcbiAgICAgIHNldHVwVGltZXIoZ2xvYmFsU3RhdGUsIGlubmVyUGFyYW1zLCBkaXNtaXNzV2l0aCk7XG4gICAgICBpbml0Rm9jdXMoZG9tQ2FjaGUsIGlubmVyUGFyYW1zKTsgLy8gU2Nyb2xsIGNvbnRhaW5lciB0byB0b3Agb24gb3BlbiAoIzEyNDcsICMxOTQ2KVxuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZG9tQ2FjaGUuY29udGFpbmVyLnNjcm9sbFRvcCA9IDA7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcG9wdWxhdGVEb21DYWNoZSA9IGZ1bmN0aW9uIHBvcHVsYXRlRG9tQ2FjaGUoaW5zdGFuY2UpIHtcbiAgICB2YXIgZG9tQ2FjaGUgPSB7XG4gICAgICBwb3B1cDogZ2V0UG9wdXAoKSxcbiAgICAgIGNvbnRhaW5lcjogZ2V0Q29udGFpbmVyKCksXG4gICAgICBjb250ZW50OiBnZXRDb250ZW50KCksXG4gICAgICBhY3Rpb25zOiBnZXRBY3Rpb25zKCksXG4gICAgICBjb25maXJtQnV0dG9uOiBnZXRDb25maXJtQnV0dG9uKCksXG4gICAgICBkZW55QnV0dG9uOiBnZXREZW55QnV0dG9uKCksXG4gICAgICBjYW5jZWxCdXR0b246IGdldENhbmNlbEJ1dHRvbigpLFxuICAgICAgbG9hZGVyOiBnZXRMb2FkZXIoKSxcbiAgICAgIGNsb3NlQnV0dG9uOiBnZXRDbG9zZUJ1dHRvbigpLFxuICAgICAgdmFsaWRhdGlvbk1lc3NhZ2U6IGdldFZhbGlkYXRpb25NZXNzYWdlKCksXG4gICAgICBwcm9ncmVzc1N0ZXBzOiBnZXRQcm9ncmVzc1N0ZXBzKClcbiAgICB9O1xuICAgIHByaXZhdGVQcm9wcy5kb21DYWNoZS5zZXQoaW5zdGFuY2UsIGRvbUNhY2hlKTtcbiAgICByZXR1cm4gZG9tQ2FjaGU7XG4gIH07XG5cbiAgdmFyIHNldHVwVGltZXIgPSBmdW5jdGlvbiBzZXR1cFRpbWVyKGdsb2JhbFN0YXRlJCQxLCBpbm5lclBhcmFtcywgZGlzbWlzc1dpdGgpIHtcbiAgICB2YXIgdGltZXJQcm9ncmVzc0JhciA9IGdldFRpbWVyUHJvZ3Jlc3NCYXIoKTtcbiAgICBoaWRlKHRpbWVyUHJvZ3Jlc3NCYXIpO1xuXG4gICAgaWYgKGlubmVyUGFyYW1zLnRpbWVyKSB7XG4gICAgICBnbG9iYWxTdGF0ZSQkMS50aW1lb3V0ID0gbmV3IFRpbWVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGlzbWlzc1dpdGgoJ3RpbWVyJyk7XG4gICAgICAgIGRlbGV0ZSBnbG9iYWxTdGF0ZSQkMS50aW1lb3V0O1xuICAgICAgfSwgaW5uZXJQYXJhbXMudGltZXIpO1xuXG4gICAgICBpZiAoaW5uZXJQYXJhbXMudGltZXJQcm9ncmVzc0Jhcikge1xuICAgICAgICBzaG93KHRpbWVyUHJvZ3Jlc3NCYXIpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZ2xvYmFsU3RhdGUkJDEudGltZW91dC5ydW5uaW5nKSB7XG4gICAgICAgICAgICAvLyB0aW1lciBjYW4gYmUgYWxyZWFkeSBzdG9wcGVkIGF0IHRoaXMgcG9pbnRcbiAgICAgICAgICAgIGFuaW1hdGVUaW1lclByb2dyZXNzQmFyKGlubmVyUGFyYW1zLnRpbWVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdEZvY3VzID0gZnVuY3Rpb24gaW5pdEZvY3VzKGRvbUNhY2hlLCBpbm5lclBhcmFtcykge1xuICAgIGlmIChpbm5lclBhcmFtcy50b2FzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghY2FsbElmRnVuY3Rpb24oaW5uZXJQYXJhbXMuYWxsb3dFbnRlcktleSkpIHtcbiAgICAgIHJldHVybiBibHVyQWN0aXZlRWxlbWVudCgpO1xuICAgIH1cblxuICAgIGlmICghZm9jdXNCdXR0b24oZG9tQ2FjaGUsIGlubmVyUGFyYW1zKSkge1xuICAgICAgc2V0Rm9jdXMoaW5uZXJQYXJhbXMsIC0xLCAxKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGZvY3VzQnV0dG9uID0gZnVuY3Rpb24gZm9jdXNCdXR0b24oZG9tQ2FjaGUsIGlubmVyUGFyYW1zKSB7XG4gICAgaWYgKGlubmVyUGFyYW1zLmZvY3VzRGVueSAmJiBpc1Zpc2libGUoZG9tQ2FjaGUuZGVueUJ1dHRvbikpIHtcbiAgICAgIGRvbUNhY2hlLmRlbnlCdXR0b24uZm9jdXMoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpbm5lclBhcmFtcy5mb2N1c0NhbmNlbCAmJiBpc1Zpc2libGUoZG9tQ2FjaGUuY2FuY2VsQnV0dG9uKSkge1xuICAgICAgZG9tQ2FjaGUuY2FuY2VsQnV0dG9uLmZvY3VzKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaW5uZXJQYXJhbXMuZm9jdXNDb25maXJtICYmIGlzVmlzaWJsZShkb21DYWNoZS5jb25maXJtQnV0dG9uKSkge1xuICAgICAgZG9tQ2FjaGUuY29uZmlybUJ1dHRvbi5mb2N1cygpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHZhciBibHVyQWN0aXZlRWxlbWVudCA9IGZ1bmN0aW9uIGJsdXJBY3RpdmVFbGVtZW50KCkge1xuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIHR5cGVvZiBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogVXBkYXRlcyBwb3B1cCBwYXJhbWV0ZXJzLlxuICAgKi9cblxuICBmdW5jdGlvbiB1cGRhdGUocGFyYW1zKSB7XG4gICAgdmFyIHBvcHVwID0gZ2V0UG9wdXAoKTtcbiAgICB2YXIgaW5uZXJQYXJhbXMgPSBwcml2YXRlUHJvcHMuaW5uZXJQYXJhbXMuZ2V0KHRoaXMpO1xuXG4gICAgaWYgKCFwb3B1cCB8fCBoYXNDbGFzcyhwb3B1cCwgaW5uZXJQYXJhbXMuaGlkZUNsYXNzLnBvcHVwKSkge1xuICAgICAgcmV0dXJuIHdhcm4oXCJZb3UncmUgdHJ5aW5nIHRvIHVwZGF0ZSB0aGUgY2xvc2VkIG9yIGNsb3NpbmcgcG9wdXAsIHRoYXQgd29uJ3Qgd29yay4gVXNlIHRoZSB1cGRhdGUoKSBtZXRob2QgaW4gcHJlQ29uZmlybSBwYXJhbWV0ZXIgb3Igc2hvdyBhIG5ldyBwb3B1cC5cIik7XG4gICAgfVxuXG4gICAgdmFyIHZhbGlkVXBkYXRhYmxlUGFyYW1zID0ge307IC8vIGFzc2lnbiB2YWxpZCBwYXJhbXMgZnJvbSBgcGFyYW1zYCB0byBgZGVmYXVsdHNgXG5cbiAgICBPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICBpZiAoU3dhbC5pc1VwZGF0YWJsZVBhcmFtZXRlcihwYXJhbSkpIHtcbiAgICAgICAgdmFsaWRVcGRhdGFibGVQYXJhbXNbcGFyYW1dID0gcGFyYW1zW3BhcmFtXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXCJJbnZhbGlkIHBhcmFtZXRlciB0byB1cGRhdGU6IFxcXCJcIi5jb25jYXQocGFyYW0sIFwiXFxcIi4gVXBkYXRhYmxlIHBhcmFtcyBhcmUgbGlzdGVkIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9zd2VldGFsZXJ0Mi9zd2VldGFsZXJ0Mi9ibG9iL21hc3Rlci9zcmMvdXRpbHMvcGFyYW1zLmpzXFxuXFxuSWYgeW91IHRoaW5rIHRoaXMgcGFyYW1ldGVyIHNob3VsZCBiZSB1cGRhdGFibGUsIHJlcXVlc3QgaXQgaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL3N3ZWV0YWxlcnQyL3N3ZWV0YWxlcnQyL2lzc3Vlcy9uZXc/dGVtcGxhdGU9MDJfZmVhdHVyZV9yZXF1ZXN0Lm1kXCIpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciB1cGRhdGVkUGFyYW1zID0gX2V4dGVuZHMoe30sIGlubmVyUGFyYW1zLCB2YWxpZFVwZGF0YWJsZVBhcmFtcyk7XG5cbiAgICByZW5kZXIodGhpcywgdXBkYXRlZFBhcmFtcyk7XG4gICAgcHJpdmF0ZVByb3BzLmlubmVyUGFyYW1zLnNldCh0aGlzLCB1cGRhdGVkUGFyYW1zKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgdmFsdWU6IF9leHRlbmRzKHt9LCB0aGlzLnBhcmFtcywgcGFyYW1zKSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBfZGVzdHJveSgpIHtcbiAgICB2YXIgZG9tQ2FjaGUgPSBwcml2YXRlUHJvcHMuZG9tQ2FjaGUuZ2V0KHRoaXMpO1xuICAgIHZhciBpbm5lclBhcmFtcyA9IHByaXZhdGVQcm9wcy5pbm5lclBhcmFtcy5nZXQodGhpcyk7XG5cbiAgICBpZiAoIWlubmVyUGFyYW1zKSB7XG4gICAgICByZXR1cm47IC8vIFRoaXMgaW5zdGFuY2UgaGFzIGFscmVhZHkgYmVlbiBkZXN0cm95ZWRcbiAgICB9IC8vIENoZWNrIGlmIHRoZXJlIGlzIGFub3RoZXIgU3dhbCBjbG9zaW5nXG5cblxuICAgIGlmIChkb21DYWNoZS5wb3B1cCAmJiBnbG9iYWxTdGF0ZS5zd2FsQ2xvc2VFdmVudEZpbmlzaGVkQ2FsbGJhY2spIHtcbiAgICAgIGdsb2JhbFN0YXRlLnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjaygpO1xuICAgICAgZGVsZXRlIGdsb2JhbFN0YXRlLnN3YWxDbG9zZUV2ZW50RmluaXNoZWRDYWxsYmFjaztcbiAgICB9IC8vIENoZWNrIGlmIHRoZXJlIGlzIGEgc3dhbCBkaXNwb3NhbCBkZWZlciB0aW1lclxuXG5cbiAgICBpZiAoZ2xvYmFsU3RhdGUuZGVmZXJEaXNwb3NhbFRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZ2xvYmFsU3RhdGUuZGVmZXJEaXNwb3NhbFRpbWVyKTtcbiAgICAgIGRlbGV0ZSBnbG9iYWxTdGF0ZS5kZWZlckRpc3Bvc2FsVGltZXI7XG4gICAgfVxuXG4gICAgcnVuRGlkRGVzdHJveShpbm5lclBhcmFtcyk7XG4gICAgZGlzcG9zZVN3YWwodGhpcyk7XG4gIH1cblxuICB2YXIgcnVuRGlkRGVzdHJveSA9IGZ1bmN0aW9uIHJ1bkRpZERlc3Ryb3koaW5uZXJQYXJhbXMpIHtcbiAgICBpZiAodHlwZW9mIGlubmVyUGFyYW1zLmRpZERlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlubmVyUGFyYW1zLmRpZERlc3Ryb3koKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbm5lclBhcmFtcy5vbkRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlubmVyUGFyYW1zLm9uRGVzdHJveSgpOyAvLyBAZGVwcmVjYXRlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZGlzcG9zZVN3YWwgPSBmdW5jdGlvbiBkaXNwb3NlU3dhbChpbnN0YW5jZSkge1xuICAgIC8vIFVuc2V0IHRoaXMucGFyYW1zIHNvIEdDIHdpbGwgZGlzcG9zZSBpdCAoIzE1NjkpXG4gICAgZGVsZXRlIGluc3RhbmNlLnBhcmFtczsgLy8gVW5zZXQgZ2xvYmFsU3RhdGUgcHJvcHMgc28gR0Mgd2lsbCBkaXNwb3NlIGdsb2JhbFN0YXRlICgjMTU2OSlcblxuICAgIGRlbGV0ZSBnbG9iYWxTdGF0ZS5rZXlkb3duSGFuZGxlcjtcbiAgICBkZWxldGUgZ2xvYmFsU3RhdGUua2V5ZG93blRhcmdldDsgLy8gVW5zZXQgV2Vha01hcHMgc28gR0Mgd2lsbCBiZSBhYmxlIHRvIGRpc3Bvc2UgdGhlbSAoIzE1NjkpXG5cbiAgICB1bnNldFdlYWtNYXBzKHByaXZhdGVQcm9wcyk7XG4gICAgdW5zZXRXZWFrTWFwcyhwcml2YXRlTWV0aG9kcyk7XG4gIH07XG5cbiAgdmFyIHVuc2V0V2Vha01hcHMgPSBmdW5jdGlvbiB1bnNldFdlYWtNYXBzKG9iaikge1xuICAgIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgICBvYmpbaV0gPSBuZXcgV2Vha01hcCgpO1xuICAgIH1cbiAgfTtcblxuXG5cbiAgdmFyIGluc3RhbmNlTWV0aG9kcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICBoaWRlTG9hZGluZzogaGlkZUxvYWRpbmcsXG4gICAgZGlzYWJsZUxvYWRpbmc6IGhpZGVMb2FkaW5nLFxuICAgIGdldElucHV0OiBnZXRJbnB1dCQxLFxuICAgIGNsb3NlOiBjbG9zZSxcbiAgICBjbG9zZVBvcHVwOiBjbG9zZSxcbiAgICBjbG9zZU1vZGFsOiBjbG9zZSxcbiAgICBjbG9zZVRvYXN0OiBjbG9zZSxcbiAgICBlbmFibGVCdXR0b25zOiBlbmFibGVCdXR0b25zLFxuICAgIGRpc2FibGVCdXR0b25zOiBkaXNhYmxlQnV0dG9ucyxcbiAgICBlbmFibGVJbnB1dDogZW5hYmxlSW5wdXQsXG4gICAgZGlzYWJsZUlucHV0OiBkaXNhYmxlSW5wdXQsXG4gICAgc2hvd1ZhbGlkYXRpb25NZXNzYWdlOiBzaG93VmFsaWRhdGlvbk1lc3NhZ2UsXG4gICAgcmVzZXRWYWxpZGF0aW9uTWVzc2FnZTogcmVzZXRWYWxpZGF0aW9uTWVzc2FnZSQxLFxuICAgIGdldFByb2dyZXNzU3RlcHM6IGdldFByb2dyZXNzU3RlcHMkMSxcbiAgICBfbWFpbjogX21haW4sXG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgX2Rlc3Ryb3k6IF9kZXN0cm95XG4gIH0pO1xuXG4gIHZhciBjdXJyZW50SW5zdGFuY2U7XG5cbiAgdmFyIFN3ZWV0QWxlcnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN3ZWV0QWxlcnQoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3dlZXRBbGVydCk7XG5cbiAgICAgIC8vIFByZXZlbnQgcnVuIGluIE5vZGUgZW52XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBDaGVjayBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBQcm9taXNlXG5cblxuICAgICAgaWYgKHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBlcnJvcignVGhpcyBwYWNrYWdlIHJlcXVpcmVzIGEgUHJvbWlzZSBsaWJyYXJ5LCBwbGVhc2UgaW5jbHVkZSBhIHNoaW0gdG8gZW5hYmxlIGl0IGluIHRoaXMgYnJvd3NlciAoU2VlOiBodHRwczovL2dpdGh1Yi5jb20vc3dlZXRhbGVydDIvc3dlZXRhbGVydDIvd2lraS9NaWdyYXRpb24tZnJvbS1Td2VldEFsZXJ0LXRvLVN3ZWV0QWxlcnQyIzEtaWUtc3VwcG9ydCknKTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudEluc3RhbmNlID0gdGhpcztcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciBvdXRlclBhcmFtcyA9IE9iamVjdC5mcmVlemUodGhpcy5jb25zdHJ1Y3Rvci5hcmdzVG9QYXJhbXMoYXJncykpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICB2YWx1ZTogb3V0ZXJQYXJhbXMsXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuX21haW4odGhpcy5wYXJhbXMpO1xuXG4gICAgICBwcml2YXRlUHJvcHMucHJvbWlzZS5zZXQodGhpcywgcHJvbWlzZSk7XG4gICAgfSAvLyBgY2F0Y2hgIGNhbm5vdCBiZSB0aGUgbmFtZSBvZiBhIG1vZHVsZSBleHBvcnQsIHNvIHdlIGRlZmluZSBvdXIgdGhlbmFibGUgbWV0aG9kcyBoZXJlIGluc3RlYWRcblxuXG4gICAgX2NyZWF0ZUNsYXNzKFN3ZWV0QWxlcnQsIFt7XG4gICAgICBrZXk6IFwidGhlblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSBwcml2YXRlUHJvcHMucHJvbWlzZS5nZXQodGhpcyk7XG4gICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4ob25GdWxmaWxsZWQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJmaW5hbGx5XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpbmFsbHkob25GaW5hbGx5KSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gcHJpdmF0ZVByb3BzLnByb21pc2UuZ2V0KHRoaXMpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZVtcImZpbmFsbHlcIl0ob25GaW5hbGx5KTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gU3dlZXRBbGVydDtcbiAgfSgpOyAvLyBBc3NpZ24gaW5zdGFuY2UgbWV0aG9kcyBmcm9tIHNyYy9pbnN0YW5jZU1ldGhvZHMvKi5qcyB0byBwcm90b3R5cGVcblxuXG4gIF9leHRlbmRzKFN3ZWV0QWxlcnQucHJvdG90eXBlLCBpbnN0YW5jZU1ldGhvZHMpOyAvLyBBc3NpZ24gc3RhdGljIG1ldGhvZHMgZnJvbSBzcmMvc3RhdGljTWV0aG9kcy8qLmpzIHRvIGNvbnN0cnVjdG9yXG5cblxuICBfZXh0ZW5kcyhTd2VldEFsZXJ0LCBzdGF0aWNNZXRob2RzKTsgLy8gUHJveHkgdG8gaW5zdGFuY2UgbWV0aG9kcyB0byBjb25zdHJ1Y3RvciwgZm9yIG5vdywgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cblxuICBPYmplY3Qua2V5cyhpbnN0YW5jZU1ldGhvZHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIFN3ZWV0QWxlcnRba2V5XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChjdXJyZW50SW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIF9jdXJyZW50SW5zdGFuY2U7XG5cbiAgICAgICAgcmV0dXJuIChfY3VycmVudEluc3RhbmNlID0gY3VycmVudEluc3RhbmNlKVtrZXldLmFwcGx5KF9jdXJyZW50SW5zdGFuY2UsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIFN3ZWV0QWxlcnQuRGlzbWlzc1JlYXNvbiA9IERpc21pc3NSZWFzb247XG4gIFN3ZWV0QWxlcnQudmVyc2lvbiA9ICcxMC42LjEnO1xuXG4gIHZhciBTd2FsID0gU3dlZXRBbGVydDtcbiAgU3dhbFtcImRlZmF1bHRcIl0gPSBTd2FsO1xuXG4gIHJldHVybiBTd2FsO1xuXG59KSk7XG5pZiAodHlwZW9mIHRoaXMgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuU3dlZXRhbGVydDIpeyAgdGhpcy5zd2FsID0gdGhpcy5zd2VldEFsZXJ0ID0gdGhpcy5Td2FsID0gdGhpcy5Td2VldEFsZXJ0ID0gdGhpcy5Td2VldGFsZXJ0Mn1cblxuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZmdW5jdGlvbihlLHQpe3ZhciBuPWUuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO2lmKGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKG4pLG4uc3R5bGVTaGVldCluLnN0eWxlU2hlZXQuZGlzYWJsZWR8fChuLnN0eWxlU2hlZXQuY3NzVGV4dD10KTtlbHNlIHRyeXtuLmlubmVySFRNTD10fWNhdGNoKGUpe24uaW5uZXJUZXh0PXR9fShkb2N1bWVudCxcIi5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdHtmbGV4LWRpcmVjdGlvbjpyb3c7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOmF1dG87cGFkZGluZzouNjI1ZW07b3ZlcmZsb3cteTpoaWRkZW47YmFja2dyb3VuZDojZmZmO2JveC1zaGFkb3c6MCAwIC42MjVlbSAjZDlkOWQ5fS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaGVhZGVye2ZsZXgtZGlyZWN0aW9uOnJvdztwYWRkaW5nOjB9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi10aXRsZXtmbGV4LWdyb3c6MTtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydDttYXJnaW46MCAuNmVtO2ZvbnQtc2l6ZToxZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1mb290ZXJ7bWFyZ2luOi41ZW0gMCAwO3BhZGRpbmc6LjVlbSAwIDA7Zm9udC1zaXplOi44ZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1jbG9zZXtwb3NpdGlvbjpzdGF0aWM7d2lkdGg6LjhlbTtoZWlnaHQ6LjhlbTtsaW5lLWhlaWdodDouOH0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLWNvbnRlbnR7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7cGFkZGluZzowO2ZvbnQtc2l6ZToxZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1pY29ue3dpZHRoOjJlbTttaW4td2lkdGg6MmVtO2hlaWdodDoyZW07bWFyZ2luOjB9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1pY29uIC5zd2FsMi1pY29uLWNvbnRlbnR7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtmb250LXNpemU6MS44ZW07Zm9udC13ZWlnaHQ6NzAwfUBtZWRpYSBhbGwgYW5kICgtbXMtaGlnaC1jb250cmFzdDpub25lKSwoLW1zLWhpZ2gtY29udHJhc3Q6YWN0aXZlKXsuc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLWljb24gLnN3YWwyLWljb24tY29udGVudHtmb250LXNpemU6LjI1ZW19fS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItaWNvbi5zd2FsMi1zdWNjZXNzIC5zd2FsMi1zdWNjZXNzLXJpbmd7d2lkdGg6MmVtO2hlaWdodDoyZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1pY29uLnN3YWwyLWVycm9yIFtjbGFzc149c3dhbDIteC1tYXJrLWxpbmVde3RvcDouODc1ZW07d2lkdGg6MS4zNzVlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLWljb24uc3dhbDItZXJyb3IgW2NsYXNzXj1zd2FsMi14LW1hcmstbGluZV1bY2xhc3MkPWxlZnRde2xlZnQ6LjMxMjVlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLWljb24uc3dhbDItZXJyb3IgW2NsYXNzXj1zd2FsMi14LW1hcmstbGluZV1bY2xhc3MkPXJpZ2h0XXtyaWdodDouMzEyNWVtfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItYWN0aW9uc3tmbGV4LWJhc2lzOmF1dG8haW1wb3J0YW50O3dpZHRoOmF1dG87aGVpZ2h0OmF1dG87bWFyZ2luOjAgLjMxMjVlbTtwYWRkaW5nOjB9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdHlsZWR7bWFyZ2luOjAgLjMxMjVlbTtwYWRkaW5nOi4zMTI1ZW0gLjYyNWVtO2ZvbnQtc2l6ZToxZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdHlsZWQ6Zm9jdXN7Ym94LXNoYWRvdzowIDAgMCAxcHggI2ZmZiwwIDAgMCAzcHggcmdiYSg1MCwxMDAsMTUwLC40KX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3N7Ym9yZGVyLWNvbG9yOiNhNWRjODZ9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdWNjZXNzIFtjbGFzc149c3dhbDItc3VjY2Vzcy1jaXJjdWxhci1saW5lXXtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxLjZlbTtoZWlnaHQ6M2VtO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO2JvcmRlci1yYWRpdXM6NTAlfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdCAuc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZV1bY2xhc3MkPWxlZnRde3RvcDotLjhlbTtsZWZ0Oi0uNWVtO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm0tb3JpZ2luOjJlbSAyZW07Ym9yZGVyLXJhZGl1czo0ZW0gMCAwIDRlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmVdW2NsYXNzJD1yaWdodF17dG9wOi0uMjVlbTtsZWZ0Oi45Mzc1ZW07dHJhbnNmb3JtLW9yaWdpbjowIDEuNWVtO2JvcmRlci1yYWRpdXM6MCA0ZW0gNGVtIDB9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdWNjZXNzIC5zd2FsMi1zdWNjZXNzLXJpbmd7d2lkdGg6MmVtO2hlaWdodDoyZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdWNjZXNzIC5zd2FsMi1zdWNjZXNzLWZpeHt0b3A6MDtsZWZ0Oi40Mzc1ZW07d2lkdGg6LjQzNzVlbTtoZWlnaHQ6Mi42ODc1ZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdWNjZXNzIFtjbGFzc149c3dhbDItc3VjY2Vzcy1saW5lXXtoZWlnaHQ6LjMxMjVlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWxpbmVdW2NsYXNzJD10aXBde3RvcDoxLjEyNWVtO2xlZnQ6LjE4NzVlbTt3aWR0aDouNzVlbX0uc3dhbDItcG9wdXAuc3dhbDItdG9hc3QgLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWxpbmVdW2NsYXNzJD1sb25nXXt0b3A6LjkzNzVlbTtyaWdodDouMTg3NWVtO3dpZHRoOjEuMzc1ZW19LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdWNjZXNzLnN3YWwyLWljb24tc2hvdyAuc3dhbDItc3VjY2Vzcy1saW5lLXRpcHstd2Via2l0LWFuaW1hdGlvbjpzd2FsMi10b2FzdC1hbmltYXRlLXN1Y2Nlc3MtbGluZS10aXAgLjc1czthbmltYXRpb246c3dhbDItdG9hc3QtYW5pbWF0ZS1zdWNjZXNzLWxpbmUtdGlwIC43NXN9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0IC5zd2FsMi1zdWNjZXNzLnN3YWwyLWljb24tc2hvdyAuc3dhbDItc3VjY2Vzcy1saW5lLWxvbmd7LXdlYmtpdC1hbmltYXRpb246c3dhbDItdG9hc3QtYW5pbWF0ZS1zdWNjZXNzLWxpbmUtbG9uZyAuNzVzO2FuaW1hdGlvbjpzd2FsMi10b2FzdC1hbmltYXRlLXN1Y2Nlc3MtbGluZS1sb25nIC43NXN9LnN3YWwyLXBvcHVwLnN3YWwyLXRvYXN0LnN3YWwyLXNob3d7LXdlYmtpdC1hbmltYXRpb246c3dhbDItdG9hc3Qtc2hvdyAuNXM7YW5pbWF0aW9uOnN3YWwyLXRvYXN0LXNob3cgLjVzfS5zd2FsMi1wb3B1cC5zd2FsMi10b2FzdC5zd2FsMi1oaWRley13ZWJraXQtYW5pbWF0aW9uOnN3YWwyLXRvYXN0LWhpZGUgLjFzIGZvcndhcmRzO2FuaW1hdGlvbjpzd2FsMi10b2FzdC1oaWRlIC4xcyBmb3J3YXJkc30uc3dhbDItY29udGFpbmVye2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpmaXhlZDt6LWluZGV4OjEwNjA7dG9wOjA7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7ZmxleC1kaXJlY3Rpb246cm93O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmc6LjYyNWVtO292ZXJmbG93LXg6aGlkZGVuO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuMXM7LXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6dG91Y2h9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1iYWNrZHJvcC1zaG93LC5zd2FsMi1jb250YWluZXIuc3dhbDItbm9hbmltYXRpb257YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC40KX0uc3dhbDItY29udGFpbmVyLnN3YWwyLWJhY2tkcm9wLWhpZGV7YmFja2dyb3VuZDowIDAhaW1wb3J0YW50fS5zd2FsMi1jb250YWluZXIuc3dhbDItdG9we2FsaWduLWl0ZW1zOmZsZXgtc3RhcnR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3AtbGVmdCwuc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcC1zdGFydHthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wLWVuZCwuc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcC1yaWdodHthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LWVuZH0uc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlcnthbGlnbi1pdGVtczpjZW50ZXJ9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXItbGVmdCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1zdGFydHthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXItZW5kLC5zd2FsMi1jb250YWluZXIuc3dhbDItY2VudGVyLXJpZ2h0e2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b217YWxpZ24taXRlbXM6ZmxleC1lbmR9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tbGVmdCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWJvdHRvbS1zdGFydHthbGlnbi1pdGVtczpmbGV4LWVuZDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH0uc3dhbDItY29udGFpbmVyLnN3YWwyLWJvdHRvbS1lbmQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tcmlnaHR7YWxpZ24taXRlbXM6ZmxleC1lbmQ7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kfS5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLWVuZD46Zmlyc3QtY2hpbGQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tbGVmdD46Zmlyc3QtY2hpbGQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tcmlnaHQ+OmZpcnN0LWNoaWxkLC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLXN0YXJ0PjpmaXJzdC1jaGlsZCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWJvdHRvbT46Zmlyc3QtY2hpbGR7bWFyZ2luLXRvcDphdXRvfS5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1mdWxsc2NyZWVuPi5zd2FsMi1tb2RhbHtkaXNwbGF5OmZsZXghaW1wb3J0YW50O2ZsZXg6MTthbGlnbi1zZWxmOnN0cmV0Y2g7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctcm93Pi5zd2FsMi1tb2RhbHtkaXNwbGF5OmZsZXghaW1wb3J0YW50O2ZsZXg6MTthbGlnbi1jb250ZW50OmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW57ZmxleDoxO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLWJvdHRvbSwuc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLWNlbnRlciwuc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLXRvcHthbGlnbi1pdGVtczpjZW50ZXJ9LnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ncm93LWNvbHVtbi5zd2FsMi1ib3R0b20tbGVmdCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLWJvdHRvbS1zdGFydCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLWNlbnRlci1sZWZ0LC5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW4uc3dhbDItY2VudGVyLXN0YXJ0LC5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW4uc3dhbDItdG9wLWxlZnQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ncm93LWNvbHVtbi5zd2FsMi10b3Atc3RhcnR7YWxpZ24taXRlbXM6ZmxleC1zdGFydH0uc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLWJvdHRvbS1lbmQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ncm93LWNvbHVtbi5zd2FsMi1ib3R0b20tcmlnaHQsLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ncm93LWNvbHVtbi5zd2FsMi1jZW50ZXItZW5kLC5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW4uc3dhbDItY2VudGVyLXJpZ2h0LC5zd2FsMi1jb250YWluZXIuc3dhbDItZ3Jvdy1jb2x1bW4uc3dhbDItdG9wLWVuZCwuc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uLnN3YWwyLXRvcC1yaWdodHthbGlnbi1pdGVtczpmbGV4LWVuZH0uc3dhbDItY29udGFpbmVyLnN3YWwyLWdyb3ctY29sdW1uPi5zd2FsMi1tb2RhbHtkaXNwbGF5OmZsZXghaW1wb3J0YW50O2ZsZXg6MTthbGlnbi1jb250ZW50OmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5zd2FsMi1jb250YWluZXIuc3dhbDItbm8tdHJhbnNpdGlvbnt0cmFuc2l0aW9uOm5vbmUhaW1wb3J0YW50fS5zd2FsMi1jb250YWluZXI6bm90KC5zd2FsMi10b3ApOm5vdCguc3dhbDItdG9wLXN0YXJ0KTpub3QoLnN3YWwyLXRvcC1lbmQpOm5vdCguc3dhbDItdG9wLWxlZnQpOm5vdCguc3dhbDItdG9wLXJpZ2h0KTpub3QoLnN3YWwyLWNlbnRlci1zdGFydCk6bm90KC5zd2FsMi1jZW50ZXItZW5kKTpub3QoLnN3YWwyLWNlbnRlci1sZWZ0KTpub3QoLnN3YWwyLWNlbnRlci1yaWdodCk6bm90KC5zd2FsMi1ib3R0b20pOm5vdCguc3dhbDItYm90dG9tLXN0YXJ0KTpub3QoLnN3YWwyLWJvdHRvbS1lbmQpOm5vdCguc3dhbDItYm90dG9tLWxlZnQpOm5vdCguc3dhbDItYm90dG9tLXJpZ2h0KTpub3QoLnN3YWwyLWdyb3ctZnVsbHNjcmVlbik+LnN3YWwyLW1vZGFse21hcmdpbjphdXRvfUBtZWRpYSBhbGwgYW5kICgtbXMtaGlnaC1jb250cmFzdDpub25lKSwoLW1zLWhpZ2gtY29udHJhc3Q6YWN0aXZlKXsuc3dhbDItY29udGFpbmVyIC5zd2FsMi1tb2RhbHttYXJnaW46MCFpbXBvcnRhbnR9fS5zd2FsMi1wb3B1cHtkaXNwbGF5Om5vbmU7cG9zaXRpb246cmVsYXRpdmU7Ym94LXNpemluZzpib3JkZXItYm94O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjMyZW07bWF4LXdpZHRoOjEwMCU7cGFkZGluZzoxLjI1ZW07Ym9yZGVyOm5vbmU7Ym9yZGVyLXJhZGl1czouMzEyNWVtO2JhY2tncm91bmQ6I2ZmZjtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZToxcmVtfS5zd2FsMi1wb3B1cDpmb2N1c3tvdXRsaW5lOjB9LnN3YWwyLXBvcHVwLnN3YWwyLWxvYWRpbmd7b3ZlcmZsb3cteTpoaWRkZW59LnN3YWwyLWhlYWRlcntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOjAgMS44ZW19LnN3YWwyLXRpdGxle3Bvc2l0aW9uOnJlbGF0aXZlO21heC13aWR0aDoxMDAlO21hcmdpbjowIDAgLjRlbTtwYWRkaW5nOjA7Y29sb3I6IzU5NTk1OTtmb250LXNpemU6MS44NzVlbTtmb250LXdlaWdodDo2MDA7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC10cmFuc2Zvcm06bm9uZTt3b3JkLXdyYXA6YnJlYWstd29yZH0uc3dhbDItYWN0aW9uc3tkaXNwbGF5OmZsZXg7ei1pbmRleDoxO2JveC1zaXppbmc6Ym9yZGVyLWJveDtmbGV4LXdyYXA6d3JhcDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO21hcmdpbjoxLjI1ZW0gYXV0byAwO3BhZGRpbmc6MCAxLjZlbX0uc3dhbDItYWN0aW9uczpub3QoLnN3YWwyLWxvYWRpbmcpIC5zd2FsMi1zdHlsZWRbZGlzYWJsZWRde29wYWNpdHk6LjR9LnN3YWwyLWFjdGlvbnM6bm90KC5zd2FsMi1sb2FkaW5nKSAuc3dhbDItc3R5bGVkOmhvdmVye2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHJnYmEoMCwwLDAsLjEpLHJnYmEoMCwwLDAsLjEpKX0uc3dhbDItYWN0aW9uczpub3QoLnN3YWwyLWxvYWRpbmcpIC5zd2FsMi1zdHlsZWQ6YWN0aXZle2JhY2tncm91bmQtaW1hZ2U6bGluZWFyLWdyYWRpZW50KHJnYmEoMCwwLDAsLjIpLHJnYmEoMCwwLDAsLjIpKX0uc3dhbDItbG9hZGVye2Rpc3BsYXk6bm9uZTthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoyLjJlbTtoZWlnaHQ6Mi4yZW07bWFyZ2luOjAgMS44NzVlbTstd2Via2l0LWFuaW1hdGlvbjpzd2FsMi1yb3RhdGUtbG9hZGluZyAxLjVzIGxpbmVhciAwcyBpbmZpbml0ZSBub3JtYWw7YW5pbWF0aW9uOnN3YWwyLXJvdGF0ZS1sb2FkaW5nIDEuNXMgbGluZWFyIDBzIGluZmluaXRlIG5vcm1hbDtib3JkZXItd2lkdGg6LjI1ZW07Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci1yYWRpdXM6MTAwJTtib3JkZXItY29sb3I6IzI3NzhjNCB0cmFuc3BhcmVudCAjMjc3OGM0IHRyYW5zcGFyZW50fS5zd2FsMi1zdHlsZWR7bWFyZ2luOi4zMTI1ZW07cGFkZGluZzouNjI1ZW0gMmVtO2JveC1zaGFkb3c6bm9uZTtmb250LXdlaWdodDo1MDB9LnN3YWwyLXN0eWxlZDpub3QoW2Rpc2FibGVkXSl7Y3Vyc29yOnBvaW50ZXJ9LnN3YWwyLXN0eWxlZC5zd2FsMi1jb25maXJte2JvcmRlcjowO2JvcmRlci1yYWRpdXM6LjI1ZW07YmFja2dyb3VuZDppbml0aWFsO2JhY2tncm91bmQtY29sb3I6IzI3NzhjNDtjb2xvcjojZmZmO2ZvbnQtc2l6ZToxLjA2MjVlbX0uc3dhbDItc3R5bGVkLnN3YWwyLWRlbnl7Ym9yZGVyOjA7Ym9yZGVyLXJhZGl1czouMjVlbTtiYWNrZ3JvdW5kOmluaXRpYWw7YmFja2dyb3VuZC1jb2xvcjojZDE0NTI5O2NvbG9yOiNmZmY7Zm9udC1zaXplOjEuMDYyNWVtfS5zd2FsMi1zdHlsZWQuc3dhbDItY2FuY2Vse2JvcmRlcjowO2JvcmRlci1yYWRpdXM6LjI1ZW07YmFja2dyb3VuZDppbml0aWFsO2JhY2tncm91bmQtY29sb3I6Izc1NzU3NTtjb2xvcjojZmZmO2ZvbnQtc2l6ZToxLjA2MjVlbX0uc3dhbDItc3R5bGVkOmZvY3Vze291dGxpbmU6MDtib3gtc2hhZG93OjAgMCAwIDFweCAjZmZmLDAgMCAwIDNweCByZ2JhKDUwLDEwMCwxNTAsLjQpfS5zd2FsMi1zdHlsZWQ6Oi1tb3otZm9jdXMtaW5uZXJ7Ym9yZGVyOjB9LnN3YWwyLWZvb3RlcntqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbjoxLjI1ZW0gMCAwO3BhZGRpbmc6MWVtIDAgMDtib3JkZXItdG9wOjFweCBzb2xpZCAjZWVlO2NvbG9yOiM1NDU0NTQ7Zm9udC1zaXplOjFlbX0uc3dhbDItdGltZXItcHJvZ3Jlc3MtYmFyLWNvbnRhaW5lcntwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDtoZWlnaHQ6LjI1ZW07b3ZlcmZsb3c6aGlkZGVuO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOi4zMTI1ZW07Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czouMzEyNWVtfS5zd2FsMi10aW1lci1wcm9ncmVzcy1iYXJ7d2lkdGg6MTAwJTtoZWlnaHQ6LjI1ZW07YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC4yKX0uc3dhbDItaW1hZ2V7bWF4LXdpZHRoOjEwMCU7bWFyZ2luOjEuMjVlbSBhdXRvfS5zd2FsMi1jbG9zZXtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjI7dG9wOjA7cmlnaHQ6MDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxLjJlbTtoZWlnaHQ6MS4yZW07cGFkZGluZzowO292ZXJmbG93OmhpZGRlbjt0cmFuc2l0aW9uOmNvbG9yIC4xcyBlYXNlLW91dDtib3JkZXI6bm9uZTtib3JkZXItcmFkaXVzOjA7YmFja2dyb3VuZDowIDA7Y29sb3I6I2NjYztmb250LWZhbWlseTpzZXJpZjtmb250LXNpemU6Mi41ZW07bGluZS1oZWlnaHQ6MS4yO2N1cnNvcjpwb2ludGVyfS5zd2FsMi1jbG9zZTpob3Zlcnt0cmFuc2Zvcm06bm9uZTtiYWNrZ3JvdW5kOjAgMDtjb2xvcjojZjI3NDc0fS5zd2FsMi1jbG9zZTo6LW1vei1mb2N1cy1pbm5lcntib3JkZXI6MH0uc3dhbDItY29udGVudHt6LWluZGV4OjE7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW46MDtwYWRkaW5nOjAgMS42ZW07Y29sb3I6IzU0NTQ1NDtmb250LXNpemU6MS4xMjVlbTtmb250LXdlaWdodDo0MDA7bGluZS1oZWlnaHQ6bm9ybWFsO3RleHQtYWxpZ246Y2VudGVyO3dvcmQtd3JhcDpicmVhay13b3JkfS5zd2FsMi1jaGVja2JveCwuc3dhbDItZmlsZSwuc3dhbDItaW5wdXQsLnN3YWwyLXJhZGlvLC5zd2FsMi1zZWxlY3QsLnN3YWwyLXRleHRhcmVhe21hcmdpbjoxZW0gYXV0b30uc3dhbDItZmlsZSwuc3dhbDItaW5wdXQsLnN3YWwyLXRleHRhcmVhe2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDoxMDAlO3RyYW5zaXRpb246Ym9yZGVyLWNvbG9yIC4zcyxib3gtc2hhZG93IC4zcztib3JkZXI6MXB4IHNvbGlkICNkOWQ5ZDk7Ym9yZGVyLXJhZGl1czouMTg3NWVtO2JhY2tncm91bmQ6aW5oZXJpdDtib3gtc2hhZG93Omluc2V0IDAgMXB4IDFweCByZ2JhKDAsMCwwLC4wNik7Y29sb3I6aW5oZXJpdDtmb250LXNpemU6MS4xMjVlbX0uc3dhbDItZmlsZS5zd2FsMi1pbnB1dGVycm9yLC5zd2FsMi1pbnB1dC5zd2FsMi1pbnB1dGVycm9yLC5zd2FsMi10ZXh0YXJlYS5zd2FsMi1pbnB1dGVycm9ye2JvcmRlci1jb2xvcjojZjI3NDc0IWltcG9ydGFudDtib3gtc2hhZG93OjAgMCAycHggI2YyNzQ3NCFpbXBvcnRhbnR9LnN3YWwyLWZpbGU6Zm9jdXMsLnN3YWwyLWlucHV0OmZvY3VzLC5zd2FsMi10ZXh0YXJlYTpmb2N1c3tib3JkZXI6MXB4IHNvbGlkICNiNGRiZWQ7b3V0bGluZTowO2JveC1zaGFkb3c6MCAwIDNweCAjYzRlNmY1fS5zd2FsMi1maWxlOjotbW96LXBsYWNlaG9sZGVyLC5zd2FsMi1pbnB1dDo6LW1vei1wbGFjZWhvbGRlciwuc3dhbDItdGV4dGFyZWE6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6I2NjY30uc3dhbDItZmlsZTotbXMtaW5wdXQtcGxhY2Vob2xkZXIsLnN3YWwyLWlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciwuc3dhbDItdGV4dGFyZWE6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiNjY2N9LnN3YWwyLWZpbGU6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciwuc3dhbDItaW5wdXQ6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciwuc3dhbDItdGV4dGFyZWE6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojY2NjfS5zd2FsMi1maWxlOjpwbGFjZWhvbGRlciwuc3dhbDItaW5wdXQ6OnBsYWNlaG9sZGVyLC5zd2FsMi10ZXh0YXJlYTo6cGxhY2Vob2xkZXJ7Y29sb3I6I2NjY30uc3dhbDItcmFuZ2V7bWFyZ2luOjFlbSBhdXRvO2JhY2tncm91bmQ6I2ZmZn0uc3dhbDItcmFuZ2UgaW5wdXR7d2lkdGg6ODAlfS5zd2FsMi1yYW5nZSBvdXRwdXR7d2lkdGg6MjAlO2NvbG9yOmluaGVyaXQ7Zm9udC13ZWlnaHQ6NjAwO3RleHQtYWxpZ246Y2VudGVyfS5zd2FsMi1yYW5nZSBpbnB1dCwuc3dhbDItcmFuZ2Ugb3V0cHV0e2hlaWdodDoyLjYyNWVtO3BhZGRpbmc6MDtmb250LXNpemU6MS4xMjVlbTtsaW5lLWhlaWdodDoyLjYyNWVtfS5zd2FsMi1pbnB1dHtoZWlnaHQ6Mi42MjVlbTtwYWRkaW5nOjAgLjc1ZW19LnN3YWwyLWlucHV0W3R5cGU9bnVtYmVyXXttYXgtd2lkdGg6MTBlbX0uc3dhbDItZmlsZXtiYWNrZ3JvdW5kOmluaGVyaXQ7Zm9udC1zaXplOjEuMTI1ZW19LnN3YWwyLXRleHRhcmVhe2hlaWdodDo2Ljc1ZW07cGFkZGluZzouNzVlbX0uc3dhbDItc2VsZWN0e21pbi13aWR0aDo1MCU7bWF4LXdpZHRoOjEwMCU7cGFkZGluZzouMzc1ZW0gLjYyNWVtO2JhY2tncm91bmQ6aW5oZXJpdDtjb2xvcjppbmhlcml0O2ZvbnQtc2l6ZToxLjEyNWVtfS5zd2FsMi1jaGVja2JveCwuc3dhbDItcmFkaW97YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7YmFja2dyb3VuZDojZmZmO2NvbG9yOmluaGVyaXR9LnN3YWwyLWNoZWNrYm94IGxhYmVsLC5zd2FsMi1yYWRpbyBsYWJlbHttYXJnaW46MCAuNmVtO2ZvbnQtc2l6ZToxLjEyNWVtfS5zd2FsMi1jaGVja2JveCBpbnB1dCwuc3dhbDItcmFkaW8gaW5wdXR7bWFyZ2luOjAgLjRlbX0uc3dhbDItaW5wdXQtbGFiZWx7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7bWFyZ2luOjFlbSBhdXRvfS5zd2FsMi12YWxpZGF0aW9uLW1lc3NhZ2V7ZGlzcGxheTpub25lO2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21hcmdpbjowIC0yLjdlbTtwYWRkaW5nOi42MjVlbTtvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZDojZjBmMGYwO2NvbG9yOiM2NjY7Zm9udC1zaXplOjFlbTtmb250LXdlaWdodDozMDB9LnN3YWwyLXZhbGlkYXRpb24tbWVzc2FnZTo6YmVmb3Jle2NvbnRlbnQ6XFxcIiFcXFwiO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjEuNWVtO21pbi13aWR0aDoxLjVlbTtoZWlnaHQ6MS41ZW07bWFyZ2luOjAgLjYyNWVtO2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQtY29sb3I6I2YyNzQ3NDtjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0OjYwMDtsaW5lLWhlaWdodDoxLjVlbTt0ZXh0LWFsaWduOmNlbnRlcn0uc3dhbDItaWNvbntwb3NpdGlvbjpyZWxhdGl2ZTtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6NWVtO2hlaWdodDo1ZW07bWFyZ2luOjEuMjVlbSBhdXRvIDEuODc1ZW07Ym9yZGVyOi4yNWVtIHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6NTAlO2ZvbnQtZmFtaWx5OmluaGVyaXQ7bGluZS1oZWlnaHQ6NWVtO2N1cnNvcjpkZWZhdWx0Oy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uc3dhbDItaWNvbiAuc3dhbDItaWNvbi1jb250ZW50e2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Zm9udC1zaXplOjMuNzVlbX0uc3dhbDItaWNvbi5zd2FsMi1lcnJvcntib3JkZXItY29sb3I6I2YyNzQ3NDtjb2xvcjojZjI3NDc0fS5zd2FsMi1pY29uLnN3YWwyLWVycm9yIC5zd2FsMi14LW1hcmt7cG9zaXRpb246cmVsYXRpdmU7ZmxleC1ncm93OjF9LnN3YWwyLWljb24uc3dhbDItZXJyb3IgW2NsYXNzXj1zd2FsMi14LW1hcmstbGluZV17ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6Mi4zMTI1ZW07d2lkdGg6Mi45Mzc1ZW07aGVpZ2h0Oi4zMTI1ZW07Ym9yZGVyLXJhZGl1czouMTI1ZW07YmFja2dyb3VuZC1jb2xvcjojZjI3NDc0fS5zd2FsMi1pY29uLnN3YWwyLWVycm9yIFtjbGFzc149c3dhbDIteC1tYXJrLWxpbmVdW2NsYXNzJD1sZWZ0XXtsZWZ0OjEuMDYyNWVtO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpfS5zd2FsMi1pY29uLnN3YWwyLWVycm9yIFtjbGFzc149c3dhbDIteC1tYXJrLWxpbmVdW2NsYXNzJD1yaWdodF17cmlnaHQ6MWVtO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0uc3dhbDItaWNvbi5zd2FsMi1lcnJvci5zd2FsMi1pY29uLXNob3d7LXdlYmtpdC1hbmltYXRpb246c3dhbDItYW5pbWF0ZS1lcnJvci1pY29uIC41czthbmltYXRpb246c3dhbDItYW5pbWF0ZS1lcnJvci1pY29uIC41c30uc3dhbDItaWNvbi5zd2FsMi1lcnJvci5zd2FsMi1pY29uLXNob3cgLnN3YWwyLXgtbWFya3std2Via2l0LWFuaW1hdGlvbjpzd2FsMi1hbmltYXRlLWVycm9yLXgtbWFyayAuNXM7YW5pbWF0aW9uOnN3YWwyLWFuaW1hdGUtZXJyb3IteC1tYXJrIC41c30uc3dhbDItaWNvbi5zd2FsMi13YXJuaW5ne2JvcmRlci1jb2xvcjojZmFjZWE4O2NvbG9yOiNmOGJiODZ9LnN3YWwyLWljb24uc3dhbDItaW5mb3tib3JkZXItY29sb3I6IzlkZTBmNjtjb2xvcjojM2ZjM2VlfS5zd2FsMi1pY29uLnN3YWwyLXF1ZXN0aW9ue2JvcmRlci1jb2xvcjojYzlkYWUxO2NvbG9yOiM4N2FkYmR9LnN3YWwyLWljb24uc3dhbDItc3VjY2Vzc3tib3JkZXItY29sb3I6I2E1ZGM4Njtjb2xvcjojYTVkYzg2fS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmVde3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjMuNzVlbTtoZWlnaHQ6Ny41ZW07dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7Ym9yZGVyLXJhZGl1czo1MCV9LnN3YWwyLWljb24uc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZV1bY2xhc3MkPWxlZnRde3RvcDotLjQzNzVlbTtsZWZ0Oi0yLjA2MzVlbTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7dHJhbnNmb3JtLW9yaWdpbjozLjc1ZW0gMy43NWVtO2JvcmRlci1yYWRpdXM6Ny41ZW0gMCAwIDcuNWVtfS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWNpcmN1bGFyLWxpbmVdW2NsYXNzJD1yaWdodF17dG9wOi0uNjg3NWVtO2xlZnQ6MS44NzVlbTt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7dHJhbnNmb3JtLW9yaWdpbjowIDMuNzVlbTtib3JkZXItcmFkaXVzOjAgNy41ZW0gNy41ZW0gMH0uc3dhbDItaWNvbi5zd2FsMi1zdWNjZXNzIC5zd2FsMi1zdWNjZXNzLXJpbmd7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoyO3RvcDotLjI1ZW07bGVmdDotLjI1ZW07Ym94LXNpemluZzpjb250ZW50LWJveDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JvcmRlcjouMjVlbSBzb2xpZCByZ2JhKDE2NSwyMjAsMTM0LC4zKTtib3JkZXItcmFkaXVzOjUwJX0uc3dhbDItaWNvbi5zd2FsMi1zdWNjZXNzIC5zd2FsMi1zdWNjZXNzLWZpeHtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjE7dG9wOi41ZW07bGVmdDoxLjYyNWVtO3dpZHRoOi40Mzc1ZW07aGVpZ2h0OjUuNjI1ZW07dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3MgW2NsYXNzXj1zd2FsMi1zdWNjZXNzLWxpbmVde2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoyO2hlaWdodDouMzEyNWVtO2JvcmRlci1yYWRpdXM6LjEyNWVtO2JhY2tncm91bmQtY29sb3I6I2E1ZGM4Nn0uc3dhbDItaWNvbi5zd2FsMi1zdWNjZXNzIFtjbGFzc149c3dhbDItc3VjY2Vzcy1saW5lXVtjbGFzcyQ9dGlwXXt0b3A6Mi44NzVlbTtsZWZ0Oi44MTI1ZW07d2lkdGg6MS41NjI1ZW07dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyl9LnN3YWwyLWljb24uc3dhbDItc3VjY2VzcyBbY2xhc3NePXN3YWwyLXN1Y2Nlc3MtbGluZV1bY2xhc3MkPWxvbmdde3RvcDoyLjM3NWVtO3JpZ2h0Oi41ZW07d2lkdGg6Mi45Mzc1ZW07dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfS5zd2FsMi1pY29uLnN3YWwyLXN1Y2Nlc3Muc3dhbDItaWNvbi1zaG93IC5zd2FsMi1zdWNjZXNzLWxpbmUtdGlwey13ZWJraXQtYW5pbWF0aW9uOnN3YWwyLWFuaW1hdGUtc3VjY2Vzcy1saW5lLXRpcCAuNzVzO2FuaW1hdGlvbjpzd2FsMi1hbmltYXRlLXN1Y2Nlc3MtbGluZS10aXAgLjc1c30uc3dhbDItaWNvbi5zd2FsMi1zdWNjZXNzLnN3YWwyLWljb24tc2hvdyAuc3dhbDItc3VjY2Vzcy1saW5lLWxvbmd7LXdlYmtpdC1hbmltYXRpb246c3dhbDItYW5pbWF0ZS1zdWNjZXNzLWxpbmUtbG9uZyAuNzVzO2FuaW1hdGlvbjpzd2FsMi1hbmltYXRlLXN1Y2Nlc3MtbGluZS1sb25nIC43NXN9LnN3YWwyLWljb24uc3dhbDItc3VjY2Vzcy5zd2FsMi1pY29uLXNob3cgLnN3YWwyLXN1Y2Nlc3MtY2lyY3VsYXItbGluZS1yaWdodHstd2Via2l0LWFuaW1hdGlvbjpzd2FsMi1yb3RhdGUtc3VjY2Vzcy1jaXJjdWxhci1saW5lIDQuMjVzIGVhc2UtaW47YW5pbWF0aW9uOnN3YWwyLXJvdGF0ZS1zdWNjZXNzLWNpcmN1bGFyLWxpbmUgNC4yNXMgZWFzZS1pbn0uc3dhbDItcHJvZ3Jlc3Mtc3RlcHN7ZmxleC13cmFwOndyYXA7YWxpZ24taXRlbXM6Y2VudGVyO21heC13aWR0aDoxMDAlO21hcmdpbjowIDAgMS4yNWVtO3BhZGRpbmc6MDtiYWNrZ3JvdW5kOmluaGVyaXQ7Zm9udC13ZWlnaHQ6NjAwfS5zd2FsMi1wcm9ncmVzcy1zdGVwcyBsaXtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZX0uc3dhbDItcHJvZ3Jlc3Mtc3RlcHMgLnN3YWwyLXByb2dyZXNzLXN0ZXB7ei1pbmRleDoyMDtmbGV4LXNocmluazowO3dpZHRoOjJlbTtoZWlnaHQ6MmVtO2JvcmRlci1yYWRpdXM6MmVtO2JhY2tncm91bmQ6IzI3NzhjNDtjb2xvcjojZmZmO2xpbmUtaGVpZ2h0OjJlbTt0ZXh0LWFsaWduOmNlbnRlcn0uc3dhbDItcHJvZ3Jlc3Mtc3RlcHMgLnN3YWwyLXByb2dyZXNzLXN0ZXAuc3dhbDItYWN0aXZlLXByb2dyZXNzLXN0ZXB7YmFja2dyb3VuZDojMjc3OGM0fS5zd2FsMi1wcm9ncmVzcy1zdGVwcyAuc3dhbDItcHJvZ3Jlc3Mtc3RlcC5zd2FsMi1hY3RpdmUtcHJvZ3Jlc3Mtc3RlcH4uc3dhbDItcHJvZ3Jlc3Mtc3RlcHtiYWNrZ3JvdW5kOiNhZGQ4ZTY7Y29sb3I6I2ZmZn0uc3dhbDItcHJvZ3Jlc3Mtc3RlcHMgLnN3YWwyLXByb2dyZXNzLXN0ZXAuc3dhbDItYWN0aXZlLXByb2dyZXNzLXN0ZXB+LnN3YWwyLXByb2dyZXNzLXN0ZXAtbGluZXtiYWNrZ3JvdW5kOiNhZGQ4ZTZ9LnN3YWwyLXByb2dyZXNzLXN0ZXBzIC5zd2FsMi1wcm9ncmVzcy1zdGVwLWxpbmV7ei1pbmRleDoxMDtmbGV4LXNocmluazowO3dpZHRoOjIuNWVtO2hlaWdodDouNGVtO21hcmdpbjowIC0xcHg7YmFja2dyb3VuZDojMjc3OGM0fVtjbGFzc149c3dhbDJdey13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudH0uc3dhbDItc2hvd3std2Via2l0LWFuaW1hdGlvbjpzd2FsMi1zaG93IC4zczthbmltYXRpb246c3dhbDItc2hvdyAuM3N9LnN3YWwyLWhpZGV7LXdlYmtpdC1hbmltYXRpb246c3dhbDItaGlkZSAuMTVzIGZvcndhcmRzO2FuaW1hdGlvbjpzd2FsMi1oaWRlIC4xNXMgZm9yd2FyZHN9LnN3YWwyLW5vYW5pbWF0aW9ue3RyYW5zaXRpb246bm9uZX0uc3dhbDItc2Nyb2xsYmFyLW1lYXN1cmV7cG9zaXRpb246YWJzb2x1dGU7dG9wOi05OTk5cHg7d2lkdGg6NTBweDtoZWlnaHQ6NTBweDtvdmVyZmxvdzpzY3JvbGx9LnN3YWwyLXJ0bCAuc3dhbDItY2xvc2V7cmlnaHQ6YXV0bztsZWZ0OjB9LnN3YWwyLXJ0bCAuc3dhbDItdGltZXItcHJvZ3Jlc3MtYmFye3JpZ2h0OjA7bGVmdDphdXRvfUBzdXBwb3J0cyAoLW1zLWFjY2VsZXJhdG9yOnRydWUpey5zd2FsMi1yYW5nZSBpbnB1dHt3aWR0aDoxMDAlIWltcG9ydGFudH0uc3dhbDItcmFuZ2Ugb3V0cHV0e2Rpc3BsYXk6bm9uZX19QG1lZGlhIGFsbCBhbmQgKC1tcy1oaWdoLWNvbnRyYXN0Om5vbmUpLCgtbXMtaGlnaC1jb250cmFzdDphY3RpdmUpey5zd2FsMi1yYW5nZSBpbnB1dHt3aWR0aDoxMDAlIWltcG9ydGFudH0uc3dhbDItcmFuZ2Ugb3V0cHV0e2Rpc3BsYXk6bm9uZX19QC1tb3otZG9jdW1lbnQgdXJsLXByZWZpeCgpey5zd2FsMi1jbG9zZTpmb2N1c3tvdXRsaW5lOjJweCBzb2xpZCByZ2JhKDUwLDEwMCwxNTAsLjQpfX1ALXdlYmtpdC1rZXlmcmFtZXMgc3dhbDItdG9hc3Qtc2hvd3swJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtLjYyNWVtKSByb3RhdGVaKDJkZWcpfTMzJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKSByb3RhdGVaKC0yZGVnKX02NiV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLjMxMjVlbSkgcm90YXRlWigyZGVnKX0xMDAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApIHJvdGF0ZVooMCl9fUBrZXlmcmFtZXMgc3dhbDItdG9hc3Qtc2hvd3swJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtLjYyNWVtKSByb3RhdGVaKDJkZWcpfTMzJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKSByb3RhdGVaKC0yZGVnKX02NiV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLjMxMjVlbSkgcm90YXRlWigyZGVnKX0xMDAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApIHJvdGF0ZVooMCl9fUAtd2Via2l0LWtleWZyYW1lcyBzd2FsMi10b2FzdC1oaWRlezEwMCV7dHJhbnNmb3JtOnJvdGF0ZVooMWRlZyk7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIHN3YWwyLXRvYXN0LWhpZGV7MTAwJXt0cmFuc2Zvcm06cm90YXRlWigxZGVnKTtvcGFjaXR5OjB9fUAtd2Via2l0LWtleWZyYW1lcyBzd2FsMi10b2FzdC1hbmltYXRlLXN1Y2Nlc3MtbGluZS10aXB7MCV7dG9wOi41NjI1ZW07bGVmdDouMDYyNWVtO3dpZHRoOjB9NTQle3RvcDouMTI1ZW07bGVmdDouMTI1ZW07d2lkdGg6MH03MCV7dG9wOi42MjVlbTtsZWZ0Oi0uMjVlbTt3aWR0aDoxLjYyNWVtfTg0JXt0b3A6MS4wNjI1ZW07bGVmdDouNzVlbTt3aWR0aDouNWVtfTEwMCV7dG9wOjEuMTI1ZW07bGVmdDouMTg3NWVtO3dpZHRoOi43NWVtfX1Aa2V5ZnJhbWVzIHN3YWwyLXRvYXN0LWFuaW1hdGUtc3VjY2Vzcy1saW5lLXRpcHswJXt0b3A6LjU2MjVlbTtsZWZ0Oi4wNjI1ZW07d2lkdGg6MH01NCV7dG9wOi4xMjVlbTtsZWZ0Oi4xMjVlbTt3aWR0aDowfTcwJXt0b3A6LjYyNWVtO2xlZnQ6LS4yNWVtO3dpZHRoOjEuNjI1ZW19ODQle3RvcDoxLjA2MjVlbTtsZWZ0Oi43NWVtO3dpZHRoOi41ZW19MTAwJXt0b3A6MS4xMjVlbTtsZWZ0Oi4xODc1ZW07d2lkdGg6Ljc1ZW19fUAtd2Via2l0LWtleWZyYW1lcyBzd2FsMi10b2FzdC1hbmltYXRlLXN1Y2Nlc3MtbGluZS1sb25nezAle3RvcDoxLjYyNWVtO3JpZ2h0OjEuMzc1ZW07d2lkdGg6MH02NSV7dG9wOjEuMjVlbTtyaWdodDouOTM3NWVtO3dpZHRoOjB9ODQle3RvcDouOTM3NWVtO3JpZ2h0OjA7d2lkdGg6MS4xMjVlbX0xMDAle3RvcDouOTM3NWVtO3JpZ2h0Oi4xODc1ZW07d2lkdGg6MS4zNzVlbX19QGtleWZyYW1lcyBzd2FsMi10b2FzdC1hbmltYXRlLXN1Y2Nlc3MtbGluZS1sb25nezAle3RvcDoxLjYyNWVtO3JpZ2h0OjEuMzc1ZW07d2lkdGg6MH02NSV7dG9wOjEuMjVlbTtyaWdodDouOTM3NWVtO3dpZHRoOjB9ODQle3RvcDouOTM3NWVtO3JpZ2h0OjA7d2lkdGg6MS4xMjVlbX0xMDAle3RvcDouOTM3NWVtO3JpZ2h0Oi4xODc1ZW07d2lkdGg6MS4zNzVlbX19QC13ZWJraXQta2V5ZnJhbWVzIHN3YWwyLXNob3d7MCV7dHJhbnNmb3JtOnNjYWxlKC43KX00NSV7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTgwJXt0cmFuc2Zvcm06c2NhbGUoLjk1KX0xMDAle3RyYW5zZm9ybTpzY2FsZSgxKX19QGtleWZyYW1lcyBzd2FsMi1zaG93ezAle3RyYW5zZm9ybTpzY2FsZSguNyl9NDUle3RyYW5zZm9ybTpzY2FsZSgxLjA1KX04MCV7dHJhbnNmb3JtOnNjYWxlKC45NSl9MTAwJXt0cmFuc2Zvcm06c2NhbGUoMSl9fUAtd2Via2l0LWtleWZyYW1lcyBzd2FsMi1oaWRlezAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9MTAwJXt0cmFuc2Zvcm06c2NhbGUoLjUpO29wYWNpdHk6MH19QGtleWZyYW1lcyBzd2FsMi1oaWRlezAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9MTAwJXt0cmFuc2Zvcm06c2NhbGUoLjUpO29wYWNpdHk6MH19QC13ZWJraXQta2V5ZnJhbWVzIHN3YWwyLWFuaW1hdGUtc3VjY2Vzcy1saW5lLXRpcHswJXt0b3A6MS4xODc1ZW07bGVmdDouMDYyNWVtO3dpZHRoOjB9NTQle3RvcDoxLjA2MjVlbTtsZWZ0Oi4xMjVlbTt3aWR0aDowfTcwJXt0b3A6Mi4xODc1ZW07bGVmdDotLjM3NWVtO3dpZHRoOjMuMTI1ZW19ODQle3RvcDozZW07bGVmdDoxLjMxMjVlbTt3aWR0aDoxLjA2MjVlbX0xMDAle3RvcDoyLjgxMjVlbTtsZWZ0Oi44MTI1ZW07d2lkdGg6MS41NjI1ZW19fUBrZXlmcmFtZXMgc3dhbDItYW5pbWF0ZS1zdWNjZXNzLWxpbmUtdGlwezAle3RvcDoxLjE4NzVlbTtsZWZ0Oi4wNjI1ZW07d2lkdGg6MH01NCV7dG9wOjEuMDYyNWVtO2xlZnQ6LjEyNWVtO3dpZHRoOjB9NzAle3RvcDoyLjE4NzVlbTtsZWZ0Oi0uMzc1ZW07d2lkdGg6My4xMjVlbX04NCV7dG9wOjNlbTtsZWZ0OjEuMzEyNWVtO3dpZHRoOjEuMDYyNWVtfTEwMCV7dG9wOjIuODEyNWVtO2xlZnQ6LjgxMjVlbTt3aWR0aDoxLjU2MjVlbX19QC13ZWJraXQta2V5ZnJhbWVzIHN3YWwyLWFuaW1hdGUtc3VjY2Vzcy1saW5lLWxvbmd7MCV7dG9wOjMuMzc1ZW07cmlnaHQ6Mi44NzVlbTt3aWR0aDowfTY1JXt0b3A6My4zNzVlbTtyaWdodDoyLjg3NWVtO3dpZHRoOjB9ODQle3RvcDoyLjE4NzVlbTtyaWdodDowO3dpZHRoOjMuNDM3NWVtfTEwMCV7dG9wOjIuMzc1ZW07cmlnaHQ6LjVlbTt3aWR0aDoyLjkzNzVlbX19QGtleWZyYW1lcyBzd2FsMi1hbmltYXRlLXN1Y2Nlc3MtbGluZS1sb25nezAle3RvcDozLjM3NWVtO3JpZ2h0OjIuODc1ZW07d2lkdGg6MH02NSV7dG9wOjMuMzc1ZW07cmlnaHQ6Mi44NzVlbTt3aWR0aDowfTg0JXt0b3A6Mi4xODc1ZW07cmlnaHQ6MDt3aWR0aDozLjQzNzVlbX0xMDAle3RvcDoyLjM3NWVtO3JpZ2h0Oi41ZW07d2lkdGg6Mi45Mzc1ZW19fUAtd2Via2l0LWtleWZyYW1lcyBzd2FsMi1yb3RhdGUtc3VjY2Vzcy1jaXJjdWxhci1saW5lezAle3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX01JXt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyl9MTIle3RyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyl9MTAwJXt0cmFuc2Zvcm06cm90YXRlKC00MDVkZWcpfX1Aa2V5ZnJhbWVzIHN3YWwyLXJvdGF0ZS1zdWNjZXNzLWNpcmN1bGFyLWxpbmV7MCV7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpfTUle3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0xMiV7dHJhbnNmb3JtOnJvdGF0ZSgtNDA1ZGVnKX0xMDAle3RyYW5zZm9ybTpyb3RhdGUoLTQwNWRlZyl9fUAtd2Via2l0LWtleWZyYW1lcyBzd2FsMi1hbmltYXRlLWVycm9yLXgtbWFya3swJXttYXJnaW4tdG9wOjEuNjI1ZW07dHJhbnNmb3JtOnNjYWxlKC40KTtvcGFjaXR5OjB9NTAle21hcmdpbi10b3A6MS42MjVlbTt0cmFuc2Zvcm06c2NhbGUoLjQpO29wYWNpdHk6MH04MCV7bWFyZ2luLXRvcDotLjM3NWVtO3RyYW5zZm9ybTpzY2FsZSgxLjE1KX0xMDAle21hcmdpbi10b3A6MDt0cmFuc2Zvcm06c2NhbGUoMSk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIHN3YWwyLWFuaW1hdGUtZXJyb3IteC1tYXJrezAle21hcmdpbi10b3A6MS42MjVlbTt0cmFuc2Zvcm06c2NhbGUoLjQpO29wYWNpdHk6MH01MCV7bWFyZ2luLXRvcDoxLjYyNWVtO3RyYW5zZm9ybTpzY2FsZSguNCk7b3BhY2l0eTowfTgwJXttYXJnaW4tdG9wOi0uMzc1ZW07dHJhbnNmb3JtOnNjYWxlKDEuMTUpfTEwMCV7bWFyZ2luLXRvcDowO3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBzd2FsMi1hbmltYXRlLWVycm9yLWljb257MCV7dHJhbnNmb3JtOnJvdGF0ZVgoMTAwZGVnKTtvcGFjaXR5OjB9MTAwJXt0cmFuc2Zvcm06cm90YXRlWCgwKTtvcGFjaXR5OjF9fUBrZXlmcmFtZXMgc3dhbDItYW5pbWF0ZS1lcnJvci1pY29uezAle3RyYW5zZm9ybTpyb3RhdGVYKDEwMGRlZyk7b3BhY2l0eTowfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZVgoMCk7b3BhY2l0eToxfX1ALXdlYmtpdC1rZXlmcmFtZXMgc3dhbDItcm90YXRlLWxvYWRpbmd7MCV7dHJhbnNmb3JtOnJvdGF0ZSgwKX0xMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX19QGtleWZyYW1lcyBzd2FsMi1yb3RhdGUtbG9hZGluZ3swJXt0cmFuc2Zvcm06cm90YXRlKDApfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1ib2R5LnN3YWwyLXNob3duOm5vdCguc3dhbDItbm8tYmFja2Ryb3ApOm5vdCguc3dhbDItdG9hc3Qtc2hvd24pe292ZXJmbG93OmhpZGRlbn1ib2R5LnN3YWwyLWhlaWdodC1hdXRve2hlaWdodDphdXRvIWltcG9ydGFudH1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXJ7dG9wOmF1dG87cmlnaHQ6YXV0bztib3R0b206YXV0bztsZWZ0OmF1dG87bWF4LXdpZHRoOmNhbGMoMTAwJSAtIC42MjVlbSAqIDIpO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQhaW1wb3J0YW50fWJvZHkuc3dhbDItbm8tYmFja2Ryb3AgLnN3YWwyLWNvbnRhaW5lcj4uc3dhbDItbW9kYWx7Ym94LXNoYWRvdzowIDAgMTBweCByZ2JhKDAsMCwwLC40KX1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItdG9we3RvcDowO2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpfWJvZHkuc3dhbDItbm8tYmFja2Ryb3AgLnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3AtbGVmdCxib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wLXN0YXJ0e3RvcDowO2xlZnQ6MH1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wLWVuZCxib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItdG9wLXJpZ2h0e3RvcDowO3JpZ2h0OjB9Ym9keS5zd2FsMi1uby1iYWNrZHJvcCAuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlcnt0b3A6NTAlO2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwtNTAlKX1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItY2VudGVyLWxlZnQsYm9keS5zd2FsMi1uby1iYWNrZHJvcCAuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1zdGFydHt0b3A6NTAlO2xlZnQ6MDt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKX1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItY2VudGVyLWVuZCxib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItY2VudGVyLXJpZ2h0e3RvcDo1MCU7cmlnaHQ6MDt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKX1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9te2JvdHRvbTowO2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpfWJvZHkuc3dhbDItbm8tYmFja2Ryb3AgLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tbGVmdCxib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLXN0YXJ0e2JvdHRvbTowO2xlZnQ6MH1ib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLWVuZCxib2R5LnN3YWwyLW5vLWJhY2tkcm9wIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLXJpZ2h0e3JpZ2h0OjA7Ym90dG9tOjB9QG1lZGlhIHByaW50e2JvZHkuc3dhbDItc2hvd246bm90KC5zd2FsMi1uby1iYWNrZHJvcCk6bm90KC5zd2FsMi10b2FzdC1zaG93bil7b3ZlcmZsb3cteTpzY3JvbGwhaW1wb3J0YW50fWJvZHkuc3dhbDItc2hvd246bm90KC5zd2FsMi1uby1iYWNrZHJvcCk6bm90KC5zd2FsMi10b2FzdC1zaG93bik+W2FyaWEtaGlkZGVuPXRydWVde2Rpc3BsYXk6bm9uZX1ib2R5LnN3YWwyLXNob3duOm5vdCguc3dhbDItbm8tYmFja2Ryb3ApOm5vdCguc3dhbDItdG9hc3Qtc2hvd24pIC5zd2FsMi1jb250YWluZXJ7cG9zaXRpb246c3RhdGljIWltcG9ydGFudH19Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVye2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcHt0b3A6MDtyaWdodDphdXRvO2JvdHRvbTphdXRvO2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpfWJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3AtZW5kLGJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3AtcmlnaHR7dG9wOjA7cmlnaHQ6MDtib3R0b206YXV0bztsZWZ0OmF1dG99Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLXRvcC1sZWZ0LGJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi10b3Atc3RhcnR7dG9wOjA7cmlnaHQ6YXV0bztib3R0b206YXV0bztsZWZ0OjB9Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1sZWZ0LGJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1jZW50ZXItc3RhcnR7dG9wOjUwJTtyaWdodDphdXRvO2JvdHRvbTphdXRvO2xlZnQ6MDt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNTAlKX1ib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItY2VudGVye3RvcDo1MCU7cmlnaHQ6YXV0bztib3R0b206YXV0bztsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSl9Ym9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1lbmQsYm9keS5zd2FsMi10b2FzdC1zaG93biAuc3dhbDItY29udGFpbmVyLnN3YWwyLWNlbnRlci1yaWdodHt0b3A6NTAlO3JpZ2h0OjA7Ym90dG9tOmF1dG87bGVmdDphdXRvO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01MCUpfWJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b20tbGVmdCxib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLXN0YXJ0e3RvcDphdXRvO3JpZ2h0OmF1dG87Ym90dG9tOjA7bGVmdDowfWJvZHkuc3dhbDItdG9hc3Qtc2hvd24gLnN3YWwyLWNvbnRhaW5lci5zd2FsMi1ib3R0b217dG9wOmF1dG87cmlnaHQ6YXV0bztib3R0b206MDtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKX1ib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLWVuZCxib2R5LnN3YWwyLXRvYXN0LXNob3duIC5zd2FsMi1jb250YWluZXIuc3dhbDItYm90dG9tLXJpZ2h0e3RvcDphdXRvO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDphdXRvfWJvZHkuc3dhbDItdG9hc3QtY29sdW1uIC5zd2FsMi10b2FzdHtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6c3RyZXRjaH1ib2R5LnN3YWwyLXRvYXN0LWNvbHVtbiAuc3dhbDItdG9hc3QgLnN3YWwyLWFjdGlvbnN7ZmxleDoxO2FsaWduLXNlbGY6c3RyZXRjaDtoZWlnaHQ6Mi4yZW07bWFyZ2luLXRvcDouMzEyNWVtfWJvZHkuc3dhbDItdG9hc3QtY29sdW1uIC5zd2FsMi10b2FzdCAuc3dhbDItbG9hZGluZ3tqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfWJvZHkuc3dhbDItdG9hc3QtY29sdW1uIC5zd2FsMi10b2FzdCAuc3dhbDItaW5wdXR7aGVpZ2h0OjJlbTttYXJnaW46LjMxMjVlbSBhdXRvO2ZvbnQtc2l6ZToxZW19Ym9keS5zd2FsMi10b2FzdC1jb2x1bW4gLnN3YWwyLXRvYXN0IC5zd2FsMi12YWxpZGF0aW9uLW1lc3NhZ2V7Zm9udC1zaXplOjFlbX1cIik7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAodXRpbHMuaXNCbG9iKHJlcXVlc3REYXRhKSB8fCB1dGlscy5pc0ZpbGUocmVxdWVzdERhdGEpKSAmJlxuICAgICAgcmVxdWVzdERhdGEudHlwZVxuICAgICkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlXG4gICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFjb25maWcucmVzcG9uc2VUeXBlIHx8IGNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICd0ZXh0JyA/IHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCc7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKHRpbWVvdXRFcnJvck1lc3NhZ2UsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5JywgJ3BhcmFtcyddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd0aW1lb3V0TWVzc2FnZScsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdkZWNvbXByZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICdtYXhCb2R5TGVuZ3RoJywgJ21heFJlZGlyZWN0cycsICd0cmFuc3BvcnQnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJywgJ3Jlc3BvbnNlRW5jb2RpbmcnXG4gIF07XG4gIHZhciBkaXJlY3RNZXJnZUtleXMgPSBbJ3ZhbGlkYXRlU3RhdHVzJ107XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGlyZWN0TWVyZ2VLZXlzLCBmdW5jdGlvbiBtZXJnZShwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpXG4gICAgLmNvbmNhdChkaXJlY3RNZXJnZUtleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcxKVxuICAgIC5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvcHRpb25zID0ge307XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgdXJsID0gdXJsICYmIHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmw7XG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjkzMzJlMzZlMDNlNjc3MzdjNmYxYWJiYTZiY2I4NGUyLm90ZlwiOyIsImZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW5oZXJpdHNMb29zZTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjEzLjFcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTkuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcbiAgICBjb25maWcudXJsID0gYXJndW1lbnRzWzBdO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9yZXNldC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gZnJvbSBcIi4vTm90b1NhbnNLUi1NZWRpdW0ub3RmXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18odHJ1ZSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIk5vdG9TYW5zS1ItTWVkaXVtXFxcIjtcXG4gIHNyYzogbG9jYWwo4oC7KSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSBmb3JtYXQoXFxcIm9wZW50eXBlXFxcIik7XFxufVxcblxcbioge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJOb3RvU2Fuc0tSLU1lZGl1bVxcXCI7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MGRlZywjMTExZDJhLCMyOTU1ODIgKTtcXG4gIGhlaWdodDogMTAwdmg7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcInJlc2V0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGdDQUFnQztFQUNoQyx5RUFBOEQ7QUFDaEU7O0FBRUE7RUFDRSxnQ0FBZ0M7RUFDaEMsU0FBUztFQUNULFVBQVU7QUFDWjs7QUFFQTtFQUNFLG1EQUFtRDtFQUNuRCxhQUFhO0FBQ2ZcIixcImZpbGVcIjpcInJlc2V0LmNzc1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTm90b1NhbnNLUi1NZWRpdW1cXFwiO1xcbiAgc3JjOiBsb2NhbCjigLspLCB1cmwoXFxcIk5vdG9TYW5zS1ItTWVkaXVtLm90ZlxcXCIpIGZvcm1hdChcXFwib3BlbnR5cGVcXFwiKTtcXG59XFxuXFxuKiB7XFxuICBmb250LWZhbWlseTogXFxcIk5vdG9TYW5zS1ItTWVkaXVtXFxcIjtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbmJvZHkge1xcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkwZGVnLCMxMTFkMmEsIzI5NTU4MiApO1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuXCJdfV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IHZhciBSZWFjdFJlZHV4Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiLy8gRGVmYXVsdCB0byBhIGR1bW15IFwiYmF0Y2hcIiBpbXBsZW1lbnRhdGlvbiB0aGF0IGp1c3QgcnVucyB0aGUgY2FsbGJhY2tcbmZ1bmN0aW9uIGRlZmF1bHROb29wQmF0Y2goY2FsbGJhY2spIHtcbiAgY2FsbGJhY2soKTtcbn1cblxudmFyIGJhdGNoID0gZGVmYXVsdE5vb3BCYXRjaDsgLy8gQWxsb3cgaW5qZWN0aW5nIGFub3RoZXIgYmF0Y2hpbmcgZnVuY3Rpb24gbGF0ZXJcblxuZXhwb3J0IHZhciBzZXRCYXRjaCA9IGZ1bmN0aW9uIHNldEJhdGNoKG5ld0JhdGNoKSB7XG4gIHJldHVybiBiYXRjaCA9IG5ld0JhdGNoO1xufTsgLy8gU3VwcGx5IGEgZ2V0dGVyIGp1c3QgdG8gc2tpcCBkZWFsaW5nIHdpdGggRVNNIGJpbmRpbmdzXG5cbmV4cG9ydCB2YXIgZ2V0QmF0Y2ggPSBmdW5jdGlvbiBnZXRCYXRjaCgpIHtcbiAgcmV0dXJuIGJhdGNoO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICAgIHRoaXMuc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLnBhcmVudFN1YiA9IHBhcmVudFN1YjtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gdGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmICh0aGlzLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMudW5zdWJzY3JpYmUpO1xuICB9O1xuXG4gIF9wcm90by50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5wYXJlbnRTdWIgPyB0aGlzLnBhcmVudFN1Yi5hZGROZXN0ZWRTdWIodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8udHJ5VW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgICB0aGlzLmxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpO1xuXG5leHBvcnQgeyBTdWJzY3JpcHRpb24gYXMgZGVmYXVsdCB9OyIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSksXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnOyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgdG8gZW5zdXJlIHRoZSBzdG9yZVxuLy8gc3Vic2NyaXB0aW9uIGNhbGxiYWNrIGFsd2F5cyBoYXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGxhdGVzdCByZW5kZXIgY29tbWl0XG4vLyBhdmFpbGFibGUsIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgaGFwcGVuIGJldHdlZW4gcmVuZGVyIGFuZCB0aGUgZWZmZWN0LFxuLy8gd2hpY2ggbWF5IGNhdXNlIG1pc3NlZCB1cGRhdGVzOyB3ZSBhbHNvIG11c3QgZW5zdXJlIHRoZSBzdG9yZSBzdWJzY3JpcHRpb25cbi8vIGlzIGNyZWF0ZWQgc3luY2hyb25vdXNseSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBvY2N1ciBiZWZvcmUgdGhlXG4vLyBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBhbmQgYW4gaW5jb25zaXN0ZW50IHN0YXRlIG1heSBiZSBvYnNlcnZlZFxuXG5leHBvcnQgdmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0OyIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUmVkdXggc3RvcmUgdGhhdCBob2xkcyB0aGUgc3RhdGUgdHJlZS5cbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBUaGlzIG1ha2VzIGEgc2hhbGxvdyBjb3B5IG9mIGN1cnJlbnRMaXN0ZW5lcnMgc28gd2UgY2FuIHVzZVxuICAgKiBuZXh0TGlzdGVuZXJzIGFzIGEgdGVtcG9yYXJ5IGxpc3Qgd2hpbGUgZGlzcGF0Y2hpbmcuXG4gICAqXG4gICAqIFRoaXMgcHJldmVudHMgYW55IGJ1Z3MgYXJvdW5kIGNvbnN1bWVycyBjYWxsaW5nXG4gICAqIHN1YnNjcmliZS91bnN1YnNjcmliZSBpbiB0aGUgbWlkZGxlIG9mIGEgZGlzcGF0Y2guXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgc3RhdGUgdHJlZSBtYW5hZ2VkIGJ5IHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHJldHVybnMge2FueX0gVGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBvZiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiAnICsgJ1VzZSBjdXN0b20gbWlkZGxld2FyZSBmb3IgYXN5bmMgYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cblxuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuXG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICB2YXIgYWN0aW9uRGVzY3JpcHRpb24gPSBhY3Rpb25UeXBlICYmIFwiYWN0aW9uIFxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIHx8ICdhbiBhY3Rpb24nO1xuICByZXR1cm4gXCJHaXZlbiBcIiArIGFjdGlvbkRlc2NyaXB0aW9uICsgXCIsIHJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiO1xufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIHt9LnRvU3RyaW5nLmNhbGwoaW5wdXRTdGF0ZSkubWF0Y2goL1xccyhbYS16fEEtWl0rKS8pWzFdICsgXCJcXFwiLiBFeHBlY3RlZCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIFwiICsgKFwia2V5czogXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCJcIik7XG4gIH1cblxuICB2YXIgdW5leHBlY3RlZEtleXMgPSBPYmplY3Qua2V5cyhpbnB1dFN0YXRlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhcmVkdWNlcnMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAhdW5leHBlY3RlZEtleUNhY2hlW2tleV07XG4gIH0pO1xuICB1bmV4cGVjdGVkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XSA9IHRydWU7XG4gIH0pO1xuICBpZiAoYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5SRVBMQUNFKSByZXR1cm47XG5cbiAgaWYgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gXCJVbmV4cGVjdGVkIFwiICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyBcIiBcIiArIChcIlxcXCJcIiArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiIGZvdW5kIGluIFwiICsgYXJndW1lbnROYW1lICsgXCIuIFwiKSArIFwiRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiBcIiArIChcIlxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLlwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2hhcGUocmVkdWNlcnMpIHtcbiAgT2JqZWN0LmtleXMocmVkdWNlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciByZWR1Y2VyID0gcmVkdWNlcnNba2V5XTtcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLklOSVRcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlJlZHVjZXIgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIiBvciBvdGhlciBhY3Rpb25zIGluIFxcXCJyZWR1eC8qXFxcIiBcIikgKyBcIm5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIFwiICsgXCJjdXJyZW50IHN0YXRlIGZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB1bmxlc3MgaXQgaXMgdW5kZWZpbmVkLCBcIiArIFwiaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlIFwiICsgXCJhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC5cIik7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IHJlZHVjZXIgZnVuY3Rpb25zLCBpbnRvIGEgc2luZ2xlXG4gKiByZWR1Y2VyIGZ1bmN0aW9uLiBJdCB3aWxsIGNhbGwgZXZlcnkgY2hpbGQgcmVkdWNlciwgYW5kIGdhdGhlciB0aGVpciByZXN1bHRzXG4gKiBpbnRvIGEgc2luZ2xlIHN0YXRlIG9iamVjdCwgd2hvc2Uga2V5cyBjb3JyZXNwb25kIHRvIHRoZSBrZXlzIG9mIHRoZSBwYXNzZWRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWR1Y2VycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGNvcnJlc3BvbmQgdG8gZGlmZmVyZW50XG4gKiByZWR1Y2VyIGZ1bmN0aW9ucyB0aGF0IG5lZWQgdG8gYmUgY29tYmluZWQgaW50byBvbmUuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluXG4gKiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhcyByZWR1Y2Vyc2Agc3ludGF4LiBUaGUgcmVkdWNlcnMgbWF5IG5ldmVyIHJldHVyblxuICogdW5kZWZpbmVkIGZvciBhbnkgYWN0aW9uLiBJbnN0ZWFkLCB0aGV5IHNob3VsZCByZXR1cm4gdGhlaXIgaW5pdGlhbCBzdGF0ZVxuICogaWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGVtIHdhcyB1bmRlZmluZWQsIGFuZCB0aGUgY3VycmVudCBzdGF0ZSBmb3IgYW55XG4gKiB1bnJlY29nbml6ZWQgYWN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBldmVyeSByZWR1Y2VyIGluc2lkZSB0aGVcbiAqIHBhc3NlZCBvYmplY3QsIGFuZCBidWlsZHMgYSBzdGF0ZSBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWR1Y2VyS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdhcm5pbmcoXCJObyByZWR1Y2VyIHByb3ZpZGVkIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICB9XG4gIH1cblxuICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpOyAvLyBUaGlzIGlzIHVzZWQgdG8gbWFrZSBzdXJlIHdlIGRvbid0IHdhcm4gYWJvdXQgdGhlIHNhbWVcbiAgLy8ga2V5cyBtdWx0aXBsZSB0aW1lcy5cblxuICB2YXIgdW5leHBlY3RlZEtleUNhY2hlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlID0ge307XG4gIH1cblxuICB2YXIgc2hhcGVBc3NlcnRpb25FcnJvcjtcblxuICB0cnkge1xuICAgIGFzc2VydFJlZHVjZXJTaGFwZShmaW5hbFJlZHVjZXJzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNoYXBlQXNzZXJ0aW9uRXJyb3IgPSBlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmF0aW9uKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGVBc3NlcnRpb25FcnJvcikge1xuICAgICAgdGhyb3cgc2hhcGVBc3NlcnRpb25FcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpO1xuXG4gICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgd2FybmluZyh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhhc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgbmV4dFN0YXRlID0ge307XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfa2V5ID0gZmluYWxSZWR1Y2VyS2V5c1tfaV07XG4gICAgICB2YXIgcmVkdWNlciA9IGZpbmFsUmVkdWNlcnNbX2tleV07XG4gICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW19rZXldO1xuICAgICAgdmFyIG5leHRTdGF0ZUZvcktleSA9IHJlZHVjZXIocHJldmlvdXNTdGF0ZUZvcktleSwgYWN0aW9uKTtcblxuICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShfa2V5LCBhY3Rpb24pO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICB9XG5cbiAgaWYgKGVudW1lcmFibGVPbmx5KSBrZXlzID0ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICB9KTtcbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlIH07XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgLiBUaGlzIGlzIGEgbG93LWxldmVsXHJcbiAqIGhvb2sgdGhhdCB5b3Ugc2hvdWxkIHVzdWFsbHkgbm90IG5lZWQgdG8gY2FsbCBkaXJlY3RseS5cclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xyXG4gKiAgIGNvbnN0IHsgc3RvcmUgfSA9IHVzZVJlZHV4Q29udGV4dCgpXHJcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1eENvbnRleHQoKSB7XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KFJlYWN0UmVkdXhDb250ZXh0KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29udGV4dFZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgZmluZCByZWFjdC1yZWR1eCBjb250ZXh0IHZhbHVlOyBwbGVhc2UgZW5zdXJlIHRoZSBjb21wb25lbnQgaXMgd3JhcHBlZCBpbiBhIDxQcm92aWRlcj4nKTtcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0VmFsdWU7XG59IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVN0b3JlKCkge1xuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZTtcblxuICAgIHJldHVybiBzdG9yZTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZS5cclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHJlZHV4IHN0b3JlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IEV4YW1wbGVDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXHJcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlU3RvcmUgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlU3RvcmVIb29rKCk7IiwiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VTdG9yZSA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFN0b3JlIDogY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlRGlzcGF0Y2goKSB7XG4gICAgdmFyIHN0b3JlID0gdXNlU3RvcmUoKTtcbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcclxuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcclxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXHJcbiAqICAgcmV0dXJuIChcclxuICogICAgIDxkaXY+XHJcbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XHJcbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XHJcbiAqICAgICA8L2Rpdj5cclxuICogICApXHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlRGlzcGF0Y2ggPVxuLyojX19QVVJFX18qL1xuY3JlYXRlRGlzcGF0Y2hIb29rKCk7IiwiaW1wb3J0IHsgdXNlUmVkdWNlciwgdXNlUmVmLCB1c2VNZW1vLCB1c2VDb250ZXh0LCB1c2VEZWJ1Z1ZhbHVlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5mdW5jdGlvbiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpIHtcbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgY29udGV4dFN1Yik7XG4gIH0sIFtzdG9yZSwgY29udGV4dFN1Yl0pO1xuICB2YXIgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0b3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdGVkU3RhdGUgPSB1c2VSZWYoKTtcbiAgdmFyIHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBzdG9yZVN0YXRlICE9PSBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgfHwgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBzZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmVTdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnIubWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcblwiO1xuICAgIH1cblxuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgPSBzdG9yZVN0YXRlO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW3N0b3JlLCBzdWJzY3JpcHRpb25dKTtcbiAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG59XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTZWxlY3RvcihzZWxlY3RvciwgZXF1YWxpdHlGbikge1xuICAgIGlmIChlcXVhbGl0eUZuID09PSB2b2lkIDApIHtcbiAgICAgIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHZhciBzZWxlY3RlZFN0YXRlID0gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImZ1bmN0aW9uIG4obil7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgscj1BcnJheSh0PjE/dC0xOjApLGU9MTtlPHQ7ZSsrKXJbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVtuXSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwscik6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK247dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrbisoci5sZW5ndGg/XCIgXCIrci5qb2luKFwiLFwiKTpcIlwiKStcIi4gRmluZCB0aGUgZnVsbCBlcnJvciBhdDogaHR0cHM6Ly9iaXQubHkvM2NYRUtXZlwiKX1mdW5jdGlvbiB0KG4pe3JldHVybiEhbiYmISFuW1FdfWZ1bmN0aW9uIHIobil7cmV0dXJuISFuJiYoZnVuY3Rpb24obil7aWYoIW58fFwib2JqZWN0XCIhPXR5cGVvZiBuKXJldHVybiExO3ZhciB0PU9iamVjdC5nZXRQcm90b3R5cGVPZihuKTtyZXR1cm4hdHx8dD09PU9iamVjdC5wcm90b3R5cGV9KG4pfHxBcnJheS5pc0FycmF5KG4pfHwhIW5bTF18fCEhbi5jb25zdHJ1Y3RvcltMXXx8cyhuKXx8dihuKSl9ZnVuY3Rpb24gZShyKXtyZXR1cm4gdChyKXx8bigyMyxyKSxyW1FdLnR9ZnVuY3Rpb24gaShuLHQscil7dm9pZCAwPT09ciYmKHI9ITEpLDA9PT1vKG4pPyhyP09iamVjdC5rZXlzOlopKG4pLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ImJlwic3ltYm9sXCI9PXR5cGVvZiBlfHx0KGUsbltlXSxuKX0pKTpuLmZvckVhY2goKGZ1bmN0aW9uKHIsZSl7cmV0dXJuIHQoZSxyLG4pfSkpfWZ1bmN0aW9uIG8obil7dmFyIHQ9bltRXTtyZXR1cm4gdD90Lmk+Mz90LmktNDp0Lmk6QXJyYXkuaXNBcnJheShuKT8xOnMobik/Mjp2KG4pPzM6MH1mdW5jdGlvbiB1KG4sdCl7cmV0dXJuIDI9PT1vKG4pP24uaGFzKHQpOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHQpfWZ1bmN0aW9uIGEobix0KXtyZXR1cm4gMj09PW8obik/bi5nZXQodCk6blt0XX1mdW5jdGlvbiBmKG4sdCxyKXt2YXIgZT1vKG4pOzI9PT1lP24uc2V0KHQscik6Mz09PWU/KG4uZGVsZXRlKHQpLG4uYWRkKHIpKTpuW3RdPXJ9ZnVuY3Rpb24gYyhuLHQpe3JldHVybiBuPT09dD8wIT09bnx8MS9uPT0xL3Q6biE9biYmdCE9dH1mdW5jdGlvbiBzKG4pe3JldHVybiBYJiZuIGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIHYobil7cmV0dXJuIHEmJm4gaW5zdGFuY2VvZiBTZXR9ZnVuY3Rpb24gcChuKXtyZXR1cm4gbi5vfHxuLnR9ZnVuY3Rpb24gbChuKXtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuKTt2YXIgdD1ubihuKTtkZWxldGUgdFtRXTtmb3IodmFyIHI9Wih0KSxlPTA7ZTxyLmxlbmd0aDtlKyspe3ZhciBpPXJbZV0sbz10W2ldOyExPT09by53cml0YWJsZSYmKG8ud3JpdGFibGU9ITAsby5jb25maWd1cmFibGU9ITApLChvLmdldHx8by5zZXQpJiYodFtpXT17Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6by5lbnVtZXJhYmxlLHZhbHVlOm5baV19KX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YobiksdCl9ZnVuY3Rpb24gZChuLGUpe3kobil8fHQobil8fCFyKG4pfHwobyhuKT4xJiYobi5zZXQ9bi5hZGQ9bi5jbGVhcj1uLmRlbGV0ZT1oKSxPYmplY3QuZnJlZXplKG4pLGUmJmkobiwoZnVuY3Rpb24obix0KXtyZXR1cm4gZCh0LCEwKX0pLCEwKSl9ZnVuY3Rpb24gaCgpe24oMil9ZnVuY3Rpb24geShuKXtyZXR1cm4gbnVsbD09bnx8XCJvYmplY3RcIiE9dHlwZW9mIG58fE9iamVjdC5pc0Zyb3plbihuKX1mdW5jdGlvbiBiKHQpe3ZhciByPXRuW3RdO3JldHVybiByfHxuKFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/MTg6MTksdCkscn1mdW5jdGlvbiBtKG4sdCl7dG5bbl09dH1mdW5jdGlvbiBfKCl7cmV0dXJuXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8VXx8bigwKSxVfWZ1bmN0aW9uIGoobix0KXt0JiYoYihcIlBhdGNoZXNcIiksbi51PVtdLG4ucz1bXSxuLnY9dCl9ZnVuY3Rpb24gZyhuKXtPKG4pLG4ucC5mb3JFYWNoKFMpLG4ucD1udWxsfWZ1bmN0aW9uIE8obil7bj09PVUmJihVPW4ubCl9ZnVuY3Rpb24gdyhuKXtyZXR1cm4gVT17cDpbXSxsOlUsaDpuLG06ITAsXzowfX1mdW5jdGlvbiBTKG4pe3ZhciB0PW5bUV07MD09PXQuaXx8MT09PXQuaT90LmooKTp0Lmc9ITB9ZnVuY3Rpb24gUCh0LGUpe2UuXz1lLnAubGVuZ3RoO3ZhciBpPWUucFswXSxvPXZvaWQgMCE9PXQmJnQhPT1pO3JldHVybiBlLmguT3x8YihcIkVTNVwiKS5TKGUsdCxvKSxvPyhpW1FdLlAmJihnKGUpLG4oNCkpLHIodCkmJih0PU0oZSx0KSxlLmx8fHgoZSx0KSksZS51JiZiKFwiUGF0Y2hlc1wiKS5NKGlbUV0sdCxlLnUsZS5zKSk6dD1NKGUsaSxbXSksZyhlKSxlLnUmJmUudihlLnUsZS5zKSx0IT09SD90OnZvaWQgMH1mdW5jdGlvbiBNKG4sdCxyKXtpZih5KHQpKXJldHVybiB0O3ZhciBlPXRbUV07aWYoIWUpcmV0dXJuIGkodCwoZnVuY3Rpb24oaSxvKXtyZXR1cm4gQShuLGUsdCxpLG8scil9KSwhMCksdDtpZihlLkEhPT1uKXJldHVybiB0O2lmKCFlLlApcmV0dXJuIHgobixlLnQsITApLGUudDtpZighZS5JKXtlLkk9ITAsZS5BLl8tLTt2YXIgbz00PT09ZS5pfHw1PT09ZS5pP2Uubz1sKGUuayk6ZS5vO2koMz09PWUuaT9uZXcgU2V0KG8pOm8sKGZ1bmN0aW9uKHQsaSl7cmV0dXJuIEEobixlLG8sdCxpLHIpfSkpLHgobixvLCExKSxyJiZuLnUmJmIoXCJQYXRjaGVzXCIpLlIoZSxyLG4udSxuLnMpfXJldHVybiBlLm99ZnVuY3Rpb24gQShlLGksbyxhLGMscyl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmYz09PW8mJm4oNSksdChjKSl7dmFyIHY9TShlLGMscyYmaSYmMyE9PWkuaSYmIXUoaS5ELGEpP3MuY29uY2F0KGEpOnZvaWQgMCk7aWYoZihvLGEsdiksIXQodikpcmV0dXJuO2UubT0hMX1pZihyKGMpJiYheShjKSl7aWYoIWUuaC5OJiZlLl88MSlyZXR1cm47TShlLGMpLGkmJmkuQS5sfHx4KGUsYyl9fWZ1bmN0aW9uIHgobix0LHIpe3ZvaWQgMD09PXImJihyPSExKSxuLmguTiYmbi5tJiZkKHQscil9ZnVuY3Rpb24geihuLHQpe3ZhciByPW5bUV07cmV0dXJuKHI/cChyKTpuKVt0XX1mdW5jdGlvbiBJKG4sdCl7aWYodCBpbiBuKWZvcih2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7cjspe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iocix0KTtpZihlKXJldHVybiBlO3I9T2JqZWN0LmdldFByb3RvdHlwZU9mKHIpfX1mdW5jdGlvbiBFKG4pe24uUHx8KG4uUD0hMCxuLmwmJkUobi5sKSl9ZnVuY3Rpb24gayhuKXtuLm98fChuLm89bChuLnQpKX1mdW5jdGlvbiBSKG4sdCxyKXt2YXIgZT1zKHQpP2IoXCJNYXBTZXRcIikuVCh0LHIpOnYodCk/YihcIk1hcFNldFwiKS5GKHQscik6bi5PP2Z1bmN0aW9uKG4sdCl7dmFyIHI9QXJyYXkuaXNBcnJheShuKSxlPXtpOnI/MTowLEE6dD90LkE6XygpLFA6ITEsSTohMSxEOnt9LGw6dCx0Om4sazpudWxsLG86bnVsbCxqOm51bGwsQzohMX0saT1lLG89cm47ciYmKGk9W2VdLG89ZW4pO3ZhciB1PVByb3h5LnJldm9jYWJsZShpLG8pLGE9dS5yZXZva2UsZj11LnByb3h5O3JldHVybiBlLms9ZixlLmo9YSxmfSh0LHIpOmIoXCJFUzVcIikuSih0LHIpO3JldHVybihyP3IuQTpfKCkpLnAucHVzaChlKSxlfWZ1bmN0aW9uIEQoZSl7cmV0dXJuIHQoZSl8fG4oMjIsZSksZnVuY3Rpb24gbih0KXtpZighcih0KSlyZXR1cm4gdDt2YXIgZSx1PXRbUV0sYz1vKHQpO2lmKHUpe2lmKCF1LlAmJih1Lmk8NHx8IWIoXCJFUzVcIikuSyh1KSkpcmV0dXJuIHUudDt1Lkk9ITAsZT1OKHQsYyksdS5JPSExfWVsc2UgZT1OKHQsYyk7cmV0dXJuIGkoZSwoZnVuY3Rpb24odCxyKXt1JiZhKHUudCx0KT09PXJ8fGYoZSx0LG4ocikpfSkpLDM9PT1jP25ldyBTZXQoZSk6ZX0oZSl9ZnVuY3Rpb24gTihuLHQpe3N3aXRjaCh0KXtjYXNlIDI6cmV0dXJuIG5ldyBNYXAobik7Y2FzZSAzOnJldHVybiBBcnJheS5mcm9tKG4pfXJldHVybiBsKG4pfWZ1bmN0aW9uIFQoKXtmdW5jdGlvbiByKG4sdCl7dmFyIHI9c1tuXTtyZXR1cm4gcj9yLmVudW1lcmFibGU9dDpzW25dPXI9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOnQsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpc1tRXTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHQpLHJuLmdldCh0LG4pfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIHI9dGhpc1tRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHIpLHJuLnNldChyLG4sdCl9fSxyfWZ1bmN0aW9uIGUobil7Zm9yKHZhciB0PW4ubGVuZ3RoLTE7dD49MDt0LS0pe3ZhciByPW5bdF1bUV07aWYoIXIuUClzd2l0Y2goci5pKXtjYXNlIDU6YShyKSYmRShyKTticmVhaztjYXNlIDQ6byhyKSYmRShyKX19fWZ1bmN0aW9uIG8obil7Zm9yKHZhciB0PW4udCxyPW4uayxlPVoociksaT1lLmxlbmd0aC0xO2k+PTA7aS0tKXt2YXIgbz1lW2ldO2lmKG8hPT1RKXt2YXIgYT10W29dO2lmKHZvaWQgMD09PWEmJiF1KHQsbykpcmV0dXJuITA7dmFyIGY9cltvXSxzPWYmJmZbUV07aWYocz9zLnQhPT1hOiFjKGYsYSkpcmV0dXJuITB9fXZhciB2PSEhdFtRXTtyZXR1cm4gZS5sZW5ndGghPT1aKHQpLmxlbmd0aCsodj8wOjEpfWZ1bmN0aW9uIGEobil7dmFyIHQ9bi5rO2lmKHQubGVuZ3RoIT09bi50Lmxlbmd0aClyZXR1cm4hMDt2YXIgcj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsdC5sZW5ndGgtMSk7cmV0dXJuISghcnx8ci5nZXQpfWZ1bmN0aW9uIGYodCl7dC5nJiZuKDMsSlNPTi5zdHJpbmdpZnkocCh0KSkpfXZhciBzPXt9O20oXCJFUzVcIix7SjpmdW5jdGlvbihuLHQpe3ZhciBlPUFycmF5LmlzQXJyYXkobiksaT1mdW5jdGlvbihuLHQpe2lmKG4pe2Zvcih2YXIgZT1BcnJheSh0Lmxlbmd0aCksaT0wO2k8dC5sZW5ndGg7aSsrKU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiXCIraSxyKGksITApKTtyZXR1cm4gZX12YXIgbz1ubih0KTtkZWxldGUgb1tRXTtmb3IodmFyIHU9WihvKSxhPTA7YTx1Lmxlbmd0aDthKyspe3ZhciBmPXVbYV07b1tmXT1yKGYsbnx8ISFvW2ZdLmVudW1lcmFibGUpfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0KSxvKX0oZSxuKSxvPXtpOmU/NTo0LEE6dD90LkE6XygpLFA6ITEsSTohMSxEOnt9LGw6dCx0Om4sazppLG86bnVsbCxnOiExLEM6ITF9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxRLHt2YWx1ZTpvLHdyaXRhYmxlOiEwfSksaX0sUzpmdW5jdGlvbihuLHIsbyl7bz90KHIpJiZyW1FdLkE9PT1uJiZlKG4ucCk6KG4udSYmZnVuY3Rpb24gbih0KXtpZih0JiZcIm9iamVjdFwiPT10eXBlb2YgdCl7dmFyIHI9dFtRXTtpZihyKXt2YXIgZT1yLnQsbz1yLmssZj1yLkQsYz1yLmk7aWYoND09PWMpaShvLChmdW5jdGlvbih0KXt0IT09USYmKHZvaWQgMCE9PWVbdF18fHUoZSx0KT9mW3RdfHxuKG9bdF0pOihmW3RdPSEwLEUocikpKX0pKSxpKGUsKGZ1bmN0aW9uKG4pe3ZvaWQgMCE9PW9bbl18fHUobyxuKXx8KGZbbl09ITEsRShyKSl9KSk7ZWxzZSBpZig1PT09Yyl7aWYoYShyKSYmKEUociksZi5sZW5ndGg9ITApLG8ubGVuZ3RoPGUubGVuZ3RoKWZvcih2YXIgcz1vLmxlbmd0aDtzPGUubGVuZ3RoO3MrKylmW3NdPSExO2Vsc2UgZm9yKHZhciB2PWUubGVuZ3RoO3Y8by5sZW5ndGg7disrKWZbdl09ITA7Zm9yKHZhciBwPU1hdGgubWluKG8ubGVuZ3RoLGUubGVuZ3RoKSxsPTA7bDxwO2wrKyl2b2lkIDA9PT1mW2xdJiZuKG9bbF0pfX19fShuLnBbMF0pLGUobi5wKSl9LEs6ZnVuY3Rpb24obil7cmV0dXJuIDQ9PT1uLmk/byhuKTphKG4pfX0pfWZ1bmN0aW9uIEYoKXtmdW5jdGlvbiByKG4pe2lmKCFufHxcIm9iamVjdFwiIT10eXBlb2YgbilyZXR1cm4gbjtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBuLm1hcChyKTtpZihzKG4pKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20obi5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuW25bMF0scihuWzFdKV19KSkpO2lmKHYobikpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShuKS5tYXAocikpO3ZhciB0PU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pKTtmb3IodmFyIGUgaW4gbil0W2VdPXIobltlXSk7cmV0dXJuIHR9ZnVuY3Rpb24gZShuKXtyZXR1cm4gdChuKT9yKG4pOm59dmFyIGY9XCJhZGRcIjttKFwiUGF0Y2hlc1wiLHskOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24oZSl7Zm9yKHZhciBpPWUucGF0aCx1PWUub3AsYz10LHM9MDtzPGkubGVuZ3RoLTE7cysrKVwib2JqZWN0XCIhPXR5cGVvZihjPWEoYyxpW3NdKSkmJm4oMTUsaS5qb2luKFwiL1wiKSk7dmFyIHY9byhjKSxwPXIoZS52YWx1ZSksbD1pW2kubGVuZ3RoLTFdO3N3aXRjaCh1KXtjYXNlXCJyZXBsYWNlXCI6c3dpdGNoKHYpe2Nhc2UgMjpyZXR1cm4gYy5zZXQobCxwKTtjYXNlIDM6bigxNik7ZGVmYXVsdDpyZXR1cm4gY1tsXT1wfWNhc2UgZjpzd2l0Y2godil7Y2FzZSAxOnJldHVybiBjLnNwbGljZShsLDAscCk7Y2FzZSAyOnJldHVybiBjLnNldChsLHApO2Nhc2UgMzpyZXR1cm4gYy5hZGQocCk7ZGVmYXVsdDpyZXR1cm4gY1tsXT1wfWNhc2VcInJlbW92ZVwiOnN3aXRjaCh2KXtjYXNlIDE6cmV0dXJuIGMuc3BsaWNlKGwsMSk7Y2FzZSAyOnJldHVybiBjLmRlbGV0ZShsKTtjYXNlIDM6cmV0dXJuIGMuZGVsZXRlKGUudmFsdWUpO2RlZmF1bHQ6cmV0dXJuIGRlbGV0ZSBjW2xdfWRlZmF1bHQ6bigxNyx1KX19KSksdH0sUjpmdW5jdGlvbihuLHQscixvKXtzd2l0Y2gobi5pKXtjYXNlIDA6Y2FzZSA0OmNhc2UgMjpyZXR1cm4gZnVuY3Rpb24obix0LHIsbyl7dmFyIGM9bi50LHM9bi5vO2kobi5ELChmdW5jdGlvbihuLGkpe3ZhciB2PWEoYyxuKSxwPWEocyxuKSxsPWk/dShjLG4pP1wicmVwbGFjZVwiOmY6XCJyZW1vdmVcIjtpZih2IT09cHx8XCJyZXBsYWNlXCIhPT1sKXt2YXIgZD10LmNvbmNhdChuKTtyLnB1c2goXCJyZW1vdmVcIj09PWw/e29wOmwscGF0aDpkfTp7b3A6bCxwYXRoOmQsdmFsdWU6cH0pLG8ucHVzaChsPT09Zj97b3A6XCJyZW1vdmVcIixwYXRoOmR9OlwicmVtb3ZlXCI9PT1sP3tvcDpmLHBhdGg6ZCx2YWx1ZTplKHYpfTp7b3A6XCJyZXBsYWNlXCIscGF0aDpkLHZhbHVlOmUodil9KX19KSl9KG4sdCxyLG8pO2Nhc2UgNTpjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4sdCxyLGkpe3ZhciBvPW4udCx1PW4uRCxhPW4ubztpZihhLmxlbmd0aDxvLmxlbmd0aCl7dmFyIGM9W2Esb107bz1jWzBdLGE9Y1sxXTt2YXIgcz1baSxyXTtyPXNbMF0saT1zWzFdfWZvcih2YXIgdj0wO3Y8by5sZW5ndGg7disrKWlmKHVbdl0mJmFbdl0hPT1vW3ZdKXt2YXIgcD10LmNvbmNhdChbdl0pO3IucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpwLHZhbHVlOmUoYVt2XSl9KSxpLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTplKG9bdl0pfSl9Zm9yKHZhciBsPW8ubGVuZ3RoO2w8YS5sZW5ndGg7bCsrKXt2YXIgZD10LmNvbmNhdChbbF0pO3IucHVzaCh7b3A6ZixwYXRoOmQsdmFsdWU6ZShhW2xdKX0pfW8ubGVuZ3RoPGEubGVuZ3RoJiZpLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6dC5jb25jYXQoW1wibGVuZ3RoXCJdKSx2YWx1ZTpvLmxlbmd0aH0pfShuLHQscixvKTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKG4sdCxyLGUpe3ZhciBpPW4udCxvPW4ubyx1PTA7aS5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighby5oYXMobikpe3ZhciBpPXQuY29uY2F0KFt1XSk7ci5wdXNoKHtvcDpcInJlbW92ZVwiLHBhdGg6aSx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpmLHBhdGg6aSx2YWx1ZTpufSl9dSsrfSkpLHU9MCxvLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKCFpLmhhcyhuKSl7dmFyIG89dC5jb25jYXQoW3VdKTtyLnB1c2goe29wOmYscGF0aDpvLHZhbHVlOm59KSxlLnVuc2hpZnQoe29wOlwicmVtb3ZlXCIscGF0aDpvLHZhbHVlOm59KX11Kyt9KSl9KG4sdCxyLG8pfX0sTTpmdW5jdGlvbihuLHQscixlKXtyLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6dH0pLGUucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpbXSx2YWx1ZTpuLnR9KX19KX1mdW5jdGlvbiBDKCl7ZnVuY3Rpb24gdChuLHQpe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPW59YShuLHQpLG4ucHJvdG90eXBlPShyLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgcil9ZnVuY3Rpb24gZShuKXtuLm98fChuLkQ9bmV3IE1hcCxuLm89bmV3IE1hcChuLnQpKX1mdW5jdGlvbiBvKG4pe24ub3x8KG4ubz1uZXcgU2V0LG4udC5mb3JFYWNoKChmdW5jdGlvbih0KXtpZihyKHQpKXt2YXIgZT1SKG4uQS5oLHQsbik7bi5wLnNldCh0LGUpLG4uby5hZGQoZSl9ZWxzZSBuLm8uYWRkKHQpfSkpKX1mdW5jdGlvbiB1KHQpe3QuZyYmbigzLEpTT04uc3RyaW5naWZ5KHAodCkpKX12YXIgYT1mdW5jdGlvbihuLHQpe3JldHVybihhPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihuLHQpe24uX19wcm90b19fPXR9fHxmdW5jdGlvbihuLHQpe2Zvcih2YXIgciBpbiB0KXQuaGFzT3duUHJvcGVydHkocikmJihuW3JdPXRbcl0pfSkobix0KX0sZj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4obix0KXtyZXR1cm4gdGhpc1tRXT17aToyLGw6dCxBOnQ/dC5BOl8oKSxQOiExLEk6ITEsbzp2b2lkIDAsRDp2b2lkIDAsdDpuLGs6dGhpcyxDOiExLGc6ITF9LHRoaXN9dChuLE1hcCk7dmFyIG89bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLG8uaGFzPWZ1bmN0aW9uKG4pe3JldHVybiBwKHRoaXNbUV0pLmhhcyhuKX0sby5zZXQ9ZnVuY3Rpb24obix0KXt2YXIgcj10aGlzW1FdO3JldHVybiB1KHIpLHAocikuaGFzKG4pJiZwKHIpLmdldChuKT09PXR8fChlKHIpLEUociksci5ELnNldChuLCEwKSxyLm8uc2V0KG4sdCksci5ELnNldChuLCEwKSksdGhpc30sby5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCksZSh0KSxFKHQpLHQuRC5zZXQobiwhMSksdC5vLmRlbGV0ZShuKSwhMH0sby5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksZShuKSxFKG4pLG4uRD1uZXcgTWFwLGkobi50LChmdW5jdGlvbih0KXtuLkQuc2V0KHQsITEpfSkpLG4uby5jbGVhcigpfSxvLmZvckVhY2g9ZnVuY3Rpb24obix0KXt2YXIgcj10aGlzO3AodGhpc1tRXSkuZm9yRWFjaCgoZnVuY3Rpb24oZSxpKXtuLmNhbGwodCxyLmdldChpKSxpLHIpfSkpfSxvLmdldD1mdW5jdGlvbihuKXt2YXIgdD10aGlzW1FdO3UodCk7dmFyIGk9cCh0KS5nZXQobik7aWYodC5JfHwhcihpKSlyZXR1cm4gaTtpZihpIT09dC50LmdldChuKSlyZXR1cm4gaTt2YXIgbz1SKHQuQS5oLGksdCk7cmV0dXJuIGUodCksdC5vLnNldChuLG8pLG99LG8ua2V5cz1mdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLmtleXMoKX0sby52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgbix0PXRoaXMscj10aGlzLmtleXMoKTtyZXR1cm4obj17fSlbVl09ZnVuY3Rpb24oKXtyZXR1cm4gdC52YWx1ZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49ci5uZXh0KCk7cmV0dXJuIG4uZG9uZT9uOntkb25lOiExLHZhbHVlOnQuZ2V0KG4udmFsdWUpfX0sbn0sby5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG4sdD10aGlzLHI9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHQuZW50cmllcygpfSxuLm5leHQ9ZnVuY3Rpb24oKXt2YXIgbj1yLm5leHQoKTtpZihuLmRvbmUpcmV0dXJuIG47dmFyIGU9dC5nZXQobi52YWx1ZSk7cmV0dXJue2RvbmU6ITEsdmFsdWU6W24udmFsdWUsZV19fSxufSxvW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfSxufSgpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4sdCl7cmV0dXJuIHRoaXNbUV09e2k6MyxsOnQsQTp0P3QuQTpfKCksUDohMSxJOiExLG86dm9pZCAwLHQ6bixrOnRoaXMscDpuZXcgTWFwLGc6ITEsQzohMX0sdGhpc310KG4sU2V0KTt2YXIgcj1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksci5oYXM9ZnVuY3Rpb24obil7dmFyIHQ9dGhpc1tRXTtyZXR1cm4gdSh0KSx0Lm8/ISF0Lm8uaGFzKG4pfHwhKCF0LnAuaGFzKG4pfHwhdC5vLmhhcyh0LnAuZ2V0KG4pKSk6dC50LmhhcyhuKX0sci5hZGQ9ZnVuY3Rpb24obil7dmFyIHQ9dGhpc1tRXTtyZXR1cm4gdSh0KSx0aGlzLmhhcyhuKXx8KG8odCksRSh0KSx0Lm8uYWRkKG4pKSx0aGlzfSxyLmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHQ9dGhpc1tRXTtyZXR1cm4gdSh0KSxvKHQpLEUodCksdC5vLmRlbGV0ZShuKXx8ISF0LnAuaGFzKG4pJiZ0Lm8uZGVsZXRlKHQucC5nZXQobikpfSxyLmNsZWFyPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLEUobiksbi5vLmNsZWFyKCl9LHIudmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby52YWx1ZXMoKX0sci5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby5lbnRyaWVzKCl9LHIua2V5cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSxyW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9LHIuZm9yRWFjaD1mdW5jdGlvbihuLHQpe2Zvcih2YXIgcj10aGlzLnZhbHVlcygpLGU9ci5uZXh0KCk7IWUuZG9uZTspbi5jYWxsKHQsZS52YWx1ZSxlLnZhbHVlLHRoaXMpLGU9ci5uZXh0KCl9LG59KCk7bShcIk1hcFNldFwiLHtUOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIG5ldyBmKG4sdCl9LEY6ZnVuY3Rpb24obix0KXtyZXR1cm4gbmV3IGMobix0KX19KX1mdW5jdGlvbiBKKCl7VCgpLEMoKSxGKCl9ZnVuY3Rpb24gSyhuKXtyZXR1cm4gbn1mdW5jdGlvbiAkKG4pe3JldHVybiBufXZhciBHLFUsVz1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sKFwieFwiKSxYPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBNYXAscT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU2V0LEI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb3h5JiZ2b2lkIDAhPT1Qcm94eS5yZXZvY2FibGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0LEg9Vz9TeW1ib2wuZm9yKFwiaW1tZXItbm90aGluZ1wiKTooKEc9e30pW1wiaW1tZXItbm90aGluZ1wiXT0hMCxHKSxMPVc/U3ltYm9sLmZvcihcImltbWVyLWRyYWZ0YWJsZVwiKTpcIl9fJGltbWVyX2RyYWZ0YWJsZVwiLFE9Vz9TeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik6XCJfXyRpbW1lcl9zdGF0ZVwiLFY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIixZPXswOlwiSWxsZWdhbCBzdGF0ZVwiLDE6XCJJbW1lciBkcmFmdHMgY2Fubm90IGhhdmUgY29tcHV0ZWQgcHJvcGVydGllc1wiLDI6XCJUaGlzIG9iamVjdCBoYXMgYmVlbiBmcm96ZW4gYW5kIHNob3VsZCBub3QgYmUgbXV0YXRlZFwiLDM6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgdXNlIGEgcHJveHkgdGhhdCBoYXMgYmVlbiByZXZva2VkLiBEaWQgeW91IHBhc3MgYW4gb2JqZWN0IGZyb20gaW5zaWRlIGFuIGltbWVyIGZ1bmN0aW9uIHRvIGFuIGFzeW5jIHByb2Nlc3M/IFwiK259LDQ6XCJBbiBpbW1lciBwcm9kdWNlciByZXR1cm5lZCBhIG5ldyB2YWx1ZSAqYW5kKiBtb2RpZmllZCBpdHMgZHJhZnQuIEVpdGhlciByZXR1cm4gYSBuZXcgdmFsdWUgKm9yKiBtb2RpZnkgdGhlIGRyYWZ0LlwiLDU6XCJJbW1lciBmb3JiaWRzIGNpcmN1bGFyIHJlZmVyZW5jZXNcIiw2OlwiVGhlIGZpcnN0IG9yIHNlY29uZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uXCIsNzpcIlRoZSB0aGlyZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZFwiLDg6XCJGaXJzdCBhcmd1bWVudCB0byBgY3JlYXRlRHJhZnRgIG11c3QgYmUgYSBwbGFpbiBvYmplY3QsIGFuIGFycmF5LCBvciBhbiBpbW1lcmFibGUgb2JqZWN0XCIsOTpcIkZpcnN0IGFyZ3VtZW50IHRvIGBmaW5pc2hEcmFmdGAgbXVzdCBiZSBhIGRyYWZ0IHJldHVybmVkIGJ5IGBjcmVhdGVEcmFmdGBcIiwxMDpcIlRoZSBnaXZlbiBkcmFmdCBpcyBhbHJlYWR5IGZpbmFsaXplZFwiLDExOlwiT2JqZWN0LmRlZmluZVByb3BlcnR5KCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIiwxMjpcIk9iamVjdC5zZXRQcm90b3R5cGVPZigpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTM6XCJJbW1lciBvbmx5IHN1cHBvcnRzIGRlbGV0aW5nIGFycmF5IGluZGljZXNcIiwxNDpcIkltbWVyIG9ubHkgc3VwcG9ydHMgc2V0dGluZyBhcnJheSBpbmRpY2VzIGFuZCB0aGUgJ2xlbmd0aCcgcHJvcGVydHlcIiwxNTpmdW5jdGlvbihuKXtyZXR1cm5cIkNhbm5vdCBhcHBseSBwYXRjaCwgcGF0aCBkb2Vzbid0IHJlc29sdmU6IFwiK259LDE2OidTZXRzIGNhbm5vdCBoYXZlIFwicmVwbGFjZVwiIHBhdGNoZXMuJywxNzpmdW5jdGlvbihuKXtyZXR1cm5cIlVuc3VwcG9ydGVkIHBhdGNoIG9wZXJhdGlvbjogXCIrbn0sMTg6ZnVuY3Rpb24obil7cmV0dXJuXCJUaGUgcGx1Z2luIGZvciAnXCIrbitcIicgaGFzIG5vdCBiZWVuIGxvYWRlZCBpbnRvIEltbWVyLiBUbyBlbmFibGUgdGhlIHBsdWdpbiwgaW1wb3J0IGFuZCBjYWxsIGBlbmFibGVcIituK1wiKClgIHdoZW4gaW5pdGlhbGl6aW5nIHlvdXIgYXBwbGljYXRpb24uXCJ9LDE5OlwicGx1Z2luIG5vdCBsb2FkZWRcIiwyMDpcIkNhbm5vdCB1c2UgcHJveGllcyBpZiBQcm94eSwgUHJveHkucmV2b2NhYmxlIG9yIFJlZmxlY3QgYXJlIG5vdCBhdmFpbGFibGVcIiwyMTpmdW5jdGlvbihuKXtyZXR1cm5cInByb2R1Y2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoaW5ncyB0aGF0IGFyZSBkcmFmdGFibGU6IHBsYWluIG9iamVjdHMsIGFycmF5cywgTWFwLCBTZXQgb3IgY2xhc3NlcyB0aGF0IGFyZSBtYXJrZWQgd2l0aCAnW2ltbWVyYWJsZV06IHRydWUnLiBHb3QgJ1wiK24rXCInXCJ9LDIyOmZ1bmN0aW9uKG4pe3JldHVyblwiJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIitufSwyMzpmdW5jdGlvbihuKXtyZXR1cm5cIidvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259fSxaPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0Lm93bktleXM/UmVmbGVjdC5vd25LZXlzOnZvaWQgMCE9PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4pLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG4pKX06T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsbm49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnN8fGZ1bmN0aW9uKG4pe3ZhciB0PXt9O3JldHVybiBaKG4pLmZvckVhY2goKGZ1bmN0aW9uKHIpe3Rbcl09T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLHIpfSkpLHR9LHRuPXt9LHJuPXtnZXQ6ZnVuY3Rpb24obix0KXtpZih0PT09USlyZXR1cm4gbjt2YXIgZT1wKG4pO2lmKCF1KGUsdCkpcmV0dXJuIGZ1bmN0aW9uKG4sdCxyKXt2YXIgZSxpPUkodCxyKTtyZXR1cm4gaT9cInZhbHVlXCJpbiBpP2kudmFsdWU6bnVsbD09PShlPWkuZ2V0KXx8dm9pZCAwPT09ZT92b2lkIDA6ZS5jYWxsKG4uayk6dm9pZCAwfShuLGUsdCk7dmFyIGk9ZVt0XTtyZXR1cm4gbi5JfHwhcihpKT9pOmk9PT16KG4udCx0KT8oayhuKSxuLm9bdF09UihuLkEuaCxpLG4pKTppfSxoYXM6ZnVuY3Rpb24obix0KXtyZXR1cm4gdCBpbiBwKG4pfSxvd25LZXlzOmZ1bmN0aW9uKG4pe3JldHVybiBSZWZsZWN0Lm93bktleXMocChuKSl9LHNldDpmdW5jdGlvbihuLHQscil7dmFyIGU9SShwKG4pLHQpO2lmKG51bGw9PWU/dm9pZCAwOmUuc2V0KXJldHVybiBlLnNldC5jYWxsKG4uayxyKSwhMDtpZihuLkRbdF09ITAsIW4uUCl7aWYoYyhyLHoocChuKSx0KSkmJih2b2lkIDAhPT1yfHx1KG4udCx0KSkpcmV0dXJuITA7ayhuKSxFKG4pfXJldHVybiBuLm9bdF09ciwhMH0sZGVsZXRlUHJvcGVydHk6ZnVuY3Rpb24obix0KXtyZXR1cm4gdm9pZCAwIT09eihuLnQsdCl8fHQgaW4gbi50PyhuLkRbdF09ITEsayhuKSxFKG4pKTpkZWxldGUgbi5EW3RdLG4ubyYmZGVsZXRlIG4ub1t0XSwhMH0sZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmZ1bmN0aW9uKG4sdCl7dmFyIHI9cChuKSxlPVJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHIsdCk7cmV0dXJuIGU/e3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZToxIT09bi5pfHxcImxlbmd0aFwiIT09dCxlbnVtZXJhYmxlOmUuZW51bWVyYWJsZSx2YWx1ZTpyW3RdfTplfSxkZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbigpe24oMTEpfSxnZXRQcm90b3R5cGVPZjpmdW5jdGlvbihuKXtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG4udCl9LHNldFByb3RvdHlwZU9mOmZ1bmN0aW9uKCl7bigxMil9fSxlbj17fTtpKHJuLChmdW5jdGlvbihuLHQpe2VuW25dPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT1hcmd1bWVudHNbMF1bMF0sdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkpLGVuLmRlbGV0ZVByb3BlcnR5PWZ1bmN0aW9uKHQscil7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaXNOYU4ocGFyc2VJbnQocikpJiZuKDEzKSxybi5kZWxldGVQcm9wZXJ0eS5jYWxsKHRoaXMsdFswXSxyKX0sZW4uc2V0PWZ1bmN0aW9uKHQscixlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcImxlbmd0aFwiIT09ciYmaXNOYU4ocGFyc2VJbnQocikpJiZuKDE0KSxybi5zZXQuY2FsbCh0aGlzLHRbMF0scixlLHRbMF0pfTt2YXIgb249ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4pe3RoaXMuTz1CLHRoaXMuTj1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WLFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09bj92b2lkIDA6bi51c2VQcm94aWVzKSYmdGhpcy5zZXRVc2VQcm94aWVzKG4udXNlUHJveGllcyksXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT1uP3ZvaWQgMDpuLmF1dG9GcmVlemUpJiZ0aGlzLnNldEF1dG9GcmVlemUobi5hdXRvRnJlZXplKSx0aGlzLnByb2R1Y2U9dGhpcy5wcm9kdWNlLmJpbmQodGhpcyksdGhpcy5wcm9kdWNlV2l0aFBhdGNoZXM9dGhpcy5wcm9kdWNlV2l0aFBhdGNoZXMuYmluZCh0aGlzKX12YXIgaT1lLnByb3RvdHlwZTtyZXR1cm4gaS5wcm9kdWNlPWZ1bmN0aW9uKHQsZSxpKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXt2YXIgbz1lO2U9dDt2YXIgdT10aGlzO3JldHVybiBmdW5jdGlvbihuKXt2YXIgdD10aGlzO3ZvaWQgMD09PW4mJihuPW8pO2Zvcih2YXIgcj1hcmd1bWVudHMubGVuZ3RoLGk9QXJyYXkocj4xP3ItMTowKSxhPTE7YTxyO2ErKylpW2EtMV09YXJndW1lbnRzW2FdO3JldHVybiB1LnByb2R1Y2UobiwoZnVuY3Rpb24obil7dmFyIHI7cmV0dXJuKHI9ZSkuY2FsbC5hcHBseShyLFt0LG5dLmNvbmNhdChpKSl9KSl9fXZhciBhO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUmJm4oNiksdm9pZCAwIT09aSYmXCJmdW5jdGlvblwiIT10eXBlb2YgaSYmbig3KSxyKHQpKXt2YXIgZj13KHRoaXMpLGM9Uih0aGlzLHQsdm9pZCAwKSxzPSEwO3RyeXthPWUoYykscz0hMX1maW5hbGx5e3M/ZyhmKTpPKGYpfXJldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlJiZhIGluc3RhbmNlb2YgUHJvbWlzZT9hLnRoZW4oKGZ1bmN0aW9uKG4pe3JldHVybiBqKGYsaSksUChuLGYpfSksKGZ1bmN0aW9uKG4pe3Rocm93IGcoZiksbn0pKTooaihmLGkpLFAoYSxmKSl9aWYoIXR8fFwib2JqZWN0XCIhPXR5cGVvZiB0KXtpZigoYT1lKHQpKT09PUgpcmV0dXJuO3JldHVybiB2b2lkIDA9PT1hJiYoYT10KSx0aGlzLk4mJmQoYSwhMCksYX1uKDIxLHQpfSxpLnByb2R1Y2VXaXRoUGF0Y2hlcz1mdW5jdGlvbihuLHQpe3ZhciByLGUsaT10aGlzO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4/ZnVuY3Rpb24odCl7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsZT1BcnJheShyPjE/ci0xOjApLG89MTtvPHI7bysrKWVbby0xXT1hcmd1bWVudHNbb107cmV0dXJuIGkucHJvZHVjZVdpdGhQYXRjaGVzKHQsKGZ1bmN0aW9uKHQpe3JldHVybiBuLmFwcGx5KHZvaWQgMCxbdF0uY29uY2F0KGUpKX0pKX06W3RoaXMucHJvZHVjZShuLHQsKGZ1bmN0aW9uKG4sdCl7cj1uLGU9dH0pKSxyLGVdfSxpLmNyZWF0ZURyYWZ0PWZ1bmN0aW9uKGUpe3IoZSl8fG4oOCksdChlKSYmKGU9RChlKSk7dmFyIGk9dyh0aGlzKSxvPVIodGhpcyxlLHZvaWQgMCk7cmV0dXJuIG9bUV0uQz0hMCxPKGkpLG99LGkuZmluaXNoRHJhZnQ9ZnVuY3Rpb24odCxyKXt2YXIgZT10JiZ0W1FdO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihlJiZlLkN8fG4oOSksZS5JJiZuKDEwKSk7dmFyIGk9ZS5BO3JldHVybiBqKGksciksUCh2b2lkIDAsaSl9LGkuc2V0QXV0b0ZyZWV6ZT1mdW5jdGlvbihuKXt0aGlzLk49bn0saS5zZXRVc2VQcm94aWVzPWZ1bmN0aW9uKHQpe3QmJiFCJiZuKDIwKSx0aGlzLk89dH0saS5hcHBseVBhdGNoZXM9ZnVuY3Rpb24obixyKXt2YXIgZTtmb3IoZT1yLmxlbmd0aC0xO2U+PTA7ZS0tKXt2YXIgaT1yW2VdO2lmKDA9PT1pLnBhdGgubGVuZ3RoJiZcInJlcGxhY2VcIj09PWkub3Ape249aS52YWx1ZTticmVha319dmFyIG89YihcIlBhdGNoZXNcIikuJDtyZXR1cm4gdChuKT9vKG4scik6dGhpcy5wcm9kdWNlKG4sKGZ1bmN0aW9uKG4pe3JldHVybiBvKG4sci5zbGljZShlKzEpKX0pKX0sZX0oKSx1bj1uZXcgb24sYW49dW4ucHJvZHVjZSxmbj11bi5wcm9kdWNlV2l0aFBhdGNoZXMuYmluZCh1biksY249dW4uc2V0QXV0b0ZyZWV6ZS5iaW5kKHVuKSxzbj11bi5zZXRVc2VQcm94aWVzLmJpbmQodW4pLHZuPXVuLmFwcGx5UGF0Y2hlcy5iaW5kKHVuKSxwbj11bi5jcmVhdGVEcmFmdC5iaW5kKHVuKSxsbj11bi5maW5pc2hEcmFmdC5iaW5kKHVuKTtleHBvcnQgZGVmYXVsdCBhbjtleHBvcnR7b24gYXMgSW1tZXIsdm4gYXMgYXBwbHlQYXRjaGVzLEsgYXMgY2FzdERyYWZ0LCQgYXMgY2FzdEltbXV0YWJsZSxwbiBhcyBjcmVhdGVEcmFmdCxEIGFzIGN1cnJlbnQsSiBhcyBlbmFibGVBbGxQbHVnaW5zLFQgYXMgZW5hYmxlRVM1LEMgYXMgZW5hYmxlTWFwU2V0LEYgYXMgZW5hYmxlUGF0Y2hlcyxsbiBhcyBmaW5pc2hEcmFmdCxMIGFzIGltbWVyYWJsZSx0IGFzIGlzRHJhZnQsciBhcyBpc0RyYWZ0YWJsZSxIIGFzIG5vdGhpbmcsZSBhcyBvcmlnaW5hbCxhbiBhcyBwcm9kdWNlLGZuIGFzIHByb2R1Y2VXaXRoUGF0Y2hlcyxjbiBhcyBzZXRBdXRvRnJlZXplLHNuIGFzIHNldFVzZVByb3hpZXN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1tZXIuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcic7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgY29ubmVjdCBmcm9tICcuL2Nvbm5lY3QvY29ubmVjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rIH0gZnJvbSAnLi9ob29rcy91c2VEaXNwYXRjaCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTdG9yZSc7XG5pbXBvcnQgeyBzZXRCYXRjaCB9IGZyb20gJy4vdXRpbHMvYmF0Y2gnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBQcm92aWRlciwgY29ubmVjdEFkdmFuY2VkLCBSZWFjdFJlZHV4Q29udGV4dCwgY29ubmVjdCwgYmF0Y2gsIHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2ssIHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2ssIHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2ssIHNoYWxsb3dFcXVhbCB9OyIsImZ1bmN0aW9uIGRlZmF1bHRFcXVhbGl0eUNoZWNrKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59XG5cbmZ1bmN0aW9uIGFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIHByZXYsIG5leHQpIHtcbiAgaWYgKHByZXYgPT09IG51bGwgfHwgbmV4dCA9PT0gbnVsbCB8fCBwcmV2Lmxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBEbyB0aGlzIGluIGEgZm9yIGxvb3AgKGFuZCBub3QgYSBgZm9yRWFjaGAgb3IgYW4gYGV2ZXJ5YCkgc28gd2UgY2FuIGRldGVybWluZSBlcXVhbGl0eSBhcyBmYXN0IGFzIHBvc3NpYmxlLlxuICB2YXIgbGVuZ3RoID0gcHJldi5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWVxdWFsaXR5Q2hlY2socHJldltpXSwgbmV4dFtpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRNZW1vaXplKGZ1bmMpIHtcbiAgdmFyIGVxdWFsaXR5Q2hlY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGRlZmF1bHRFcXVhbGl0eUNoZWNrO1xuXG4gIHZhciBsYXN0QXJncyA9IG51bGw7XG4gIHZhciBsYXN0UmVzdWx0ID0gbnVsbDtcbiAgLy8gd2UgcmVmZXJlbmNlIGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyB0aGVtIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbChlcXVhbGl0eUNoZWNrLCBsYXN0QXJncywgYXJndW1lbnRzKSkge1xuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIGxhc3RSZXN1bHQgPSBmdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERlcGVuZGVuY2llcyhmdW5jcykge1xuICB2YXIgZGVwZW5kZW5jaWVzID0gQXJyYXkuaXNBcnJheShmdW5jc1swXSkgPyBmdW5jc1swXSA6IGZ1bmNzO1xuXG4gIGlmICghZGVwZW5kZW5jaWVzLmV2ZXJ5KGZ1bmN0aW9uIChkZXApIHtcbiAgICByZXR1cm4gdHlwZW9mIGRlcCA9PT0gJ2Z1bmN0aW9uJztcbiAgfSkpIHtcbiAgICB2YXIgZGVwZW5kZW5jeVR5cGVzID0gZGVwZW5kZW5jaWVzLm1hcChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGRlcDtcbiAgICB9KS5qb2luKCcsICcpO1xuICAgIHRocm93IG5ldyBFcnJvcignU2VsZWN0b3IgY3JlYXRvcnMgZXhwZWN0IGFsbCBpbnB1dC1zZWxlY3RvcnMgdG8gYmUgZnVuY3Rpb25zLCAnICsgKCdpbnN0ZWFkIHJlY2VpdmVkIHRoZSBmb2xsb3dpbmcgdHlwZXM6IFsnICsgZGVwZW5kZW5jeVR5cGVzICsgJ10nKSk7XG4gIH1cblxuICByZXR1cm4gZGVwZW5kZW5jaWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKG1lbW9pemUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1lbW9pemVPcHRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1lbW9pemVPcHRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBmdW5jc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHZhciByZWNvbXB1dGF0aW9ucyA9IDA7XG4gICAgdmFyIHJlc3VsdEZ1bmMgPSBmdW5jcy5wb3AoKTtcbiAgICB2YXIgZGVwZW5kZW5jaWVzID0gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKTtcblxuICAgIHZhciBtZW1vaXplZFJlc3VsdEZ1bmMgPSBtZW1vaXplLmFwcGx5KHVuZGVmaW5lZCwgW2Z1bmN0aW9uICgpIHtcbiAgICAgIHJlY29tcHV0YXRpb25zKys7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgcmV0dXJuIHJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XS5jb25jYXQobWVtb2l6ZU9wdGlvbnMpKTtcblxuICAgIC8vIElmIGEgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIGV4YWN0IHNhbWUgYXJndW1lbnRzIHdlIGRvbid0IG5lZWQgdG8gdHJhdmVyc2Ugb3VyIGRlcGVuZGVuY2llcyBhZ2Fpbi5cbiAgICB2YXIgc2VsZWN0b3IgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBbXTtcbiAgICAgIHZhciBsZW5ndGggPSBkZXBlbmRlbmNpZXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBhbmQgbXV0YXRlIGEgbG9jYWwgbGlzdCBvZiBwYXJhbXMgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgICBwYXJhbXMucHVzaChkZXBlbmRlbmNpZXNbaV0uYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICByZXR1cm4gbWVtb2l6ZWRSZXN1bHRGdW5jLmFwcGx5KG51bGwsIHBhcmFtcyk7XG4gICAgfSk7XG5cbiAgICBzZWxlY3Rvci5yZXN1bHRGdW5jID0gcmVzdWx0RnVuYztcbiAgICBzZWxlY3Rvci5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG4gICAgc2VsZWN0b3IucmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnM7XG4gICAgfTtcbiAgICBzZWxlY3Rvci5yZXNldFJlY29tcHV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlY29tcHV0YXRpb25zID0gMDtcbiAgICB9O1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBjcmVhdGVTZWxlY3RvciA9IGNyZWF0ZVNlbGVjdG9yQ3JlYXRvcihkZWZhdWx0TWVtb2l6ZSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3Ioc2VsZWN0b3JzKSB7XG4gIHZhciBzZWxlY3RvckNyZWF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGNyZWF0ZVNlbGVjdG9yO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0b3JzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcignY3JlYXRlU3RydWN0dXJlZFNlbGVjdG9yIGV4cGVjdHMgZmlyc3QgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0ICcgKyAoJ3doZXJlIGVhY2ggcHJvcGVydHkgaXMgYSBzZWxlY3RvciwgaW5zdGVhZCByZWNlaXZlZCBhICcgKyB0eXBlb2Ygc2VsZWN0b3JzKSk7XG4gIH1cbiAgdmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyhzZWxlY3RvcnMpO1xuICByZXR1cm4gc2VsZWN0b3JDcmVhdG9yKG9iamVjdEtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gc2VsZWN0b3JzW2tleV07XG4gIH0pLCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCB2YWx1ZXMgPSBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgdmFsdWVzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKGNvbXBvc2l0aW9uLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIGNvbXBvc2l0aW9uW29iamVjdEtleXNbaW5kZXhdXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGNvbXBvc2l0aW9uO1xuICAgIH0sIHt9KTtcbiAgfSk7XG59IiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgY3JlYXRlTmV4dFN0YXRlLCB7IGlzRHJhZnQsIGlzRHJhZnRhYmxlLCBlbmFibGVFUzUgfSBmcm9tICdpbW1lcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGNyZWF0ZU5leHRTdGF0ZSwgY3VycmVudCB9IGZyb20gJ2ltbWVyJztcbmltcG9ydCB7IGNvbXBvc2UsIGNvbWJpbmVSZWR1Y2VycywgYXBwbHlNaWRkbGV3YXJlLCBjcmVhdGVTdG9yZSB9IGZyb20gJ3JlZHV4JztcbmV4cG9ydCAqIGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAncmVzZWxlY3QnO1xuZXhwb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICdyZXNlbGVjdCc7XG5pbXBvcnQgdGh1bmtNaWRkbGV3YXJlIGZyb20gJ3JlZHV4LXRodW5rJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTtcbiAgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTtcblxuICB0cnkge1xuICAgIERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gIGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkge1xuICAgIF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDtcbiAgfSBlbHNlIHtcbiAgICBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICB2YXIgYSA9IFtudWxsXTtcbiAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7XG4gIHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHtcbiAgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDtcblxuICBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICAgIGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7XG5cbiAgICBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBXcmFwcGVyLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpO1xuICB9O1xuXG4gIHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTtcbn1cblxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbnZhciBjb21wb3NlV2l0aERldlRvb2xzID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gOiBmdW5jdGlvbiAoKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ29iamVjdCcpIHJldHVybiBjb21wb3NlO1xuICByZXR1cm4gY29tcG9zZS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufTtcblxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGFzc2VkIHZhbHVlIGlzIFwicGxhaW5cIiBvYmplY3QsIGkuZS4gYW4gb2JqZWN0IHdob3NlXHJcbiAqIHByb3RveXBlIGlzIHRoZSByb290IGBPYmplY3QucHJvdG90eXBlYC4gVGhpcyBpbmNsdWRlcyBvYmplY3RzIGNyZWF0ZWRcclxuICogdXNpbmcgb2JqZWN0IGxpdGVyYWxzLCBidXQgbm90IGZvciBpbnN0YW5jZSBmb3IgY2xhc3MgaW5zdGFuY2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge2FueX0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxyXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gdmFsdWU7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gcHJvdG87XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVNZWFzdXJlVXRpbHMobWF4RGVsYXksIGZuTmFtZSkge1xuICB2YXIgZWxhcHNlZCA9IDA7XG4gIHJldHVybiB7XG4gICAgbWVhc3VyZVRpbWU6IGZ1bmN0aW9uIG1lYXN1cmVUaW1lKGZuKSB7XG4gICAgICB2YXIgc3RhcnRlZCA9IERhdGUubm93KCk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdmFyIGZpbmlzaGVkID0gRGF0ZS5ub3coKTtcbiAgICAgICAgZWxhcHNlZCArPSBmaW5pc2hlZCAtIHN0YXJ0ZWQ7XG4gICAgICB9XG4gICAgfSxcbiAgICB3YXJuSWZFeGNlZWRlZDogZnVuY3Rpb24gd2FybklmRXhjZWVkZWQoKSB7XG4gICAgICBpZiAoZWxhcHNlZCA+IG1heERlbGF5KSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihmbk5hbWUgKyBcIiB0b29rIFwiICsgZWxhcHNlZCArIFwibXMsIHdoaWNoIGlzIG1vcmUgdGhhbiB0aGUgd2FybmluZyB0aHJlc2hvbGQgb2YgXCIgKyBtYXhEZWxheSArIFwibXMuIFxcbklmIHlvdXIgc3RhdGUgb3IgYWN0aW9ucyBhcmUgdmVyeSBsYXJnZSwgeW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhlIG1pZGRsZXdhcmUgYXMgaXQgbWlnaHQgY2F1c2UgdG9vIG11Y2ggb2YgYSBzbG93ZG93biBpbiBkZXZlbG9wbWVudCBtb2RlLiBTZWUgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvZ2V0RGVmYXVsdE1pZGRsZXdhcmUgZm9yIGluc3RydWN0aW9ucy5cXG5JdCBpcyBkaXNhYmxlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcywgc28geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhhdC5cIik7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbnZhciBNaWRkbGV3YXJlQXJyYXkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9BcnJheSkge1xuICBfaW5oZXJpdHNMb29zZShNaWRkbGV3YXJlQXJyYXksIF9BcnJheSk7XG5cbiAgZnVuY3Rpb24gTWlkZGxld2FyZUFycmF5KCkge1xuICAgIHJldHVybiBfQXJyYXkuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgX0FycmF5JHByb3RvdHlwZSRjb25jO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyciA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFycltfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2NvbnN0cnVjdChNaWRkbGV3YXJlQXJyYXksIChfQXJyYXkkcHJvdG90eXBlJGNvbmMgPSBfQXJyYXkucHJvdG90eXBlLmNvbmNhdCkuY2FsbC5hcHBseShfQXJyYXkkcHJvdG90eXBlJGNvbmMsIFt0aGlzXS5jb25jYXQoYXJyKSkpO1xuICB9O1xuXG4gIF9wcm90by5wcmVwZW5kID0gZnVuY3Rpb24gcHJlcGVuZCgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyciA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJyW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgaWYgKGFyci5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShhcnJbMF0pKSB7XG4gICAgICByZXR1cm4gX2NvbnN0cnVjdChNaWRkbGV3YXJlQXJyYXksIGFyclswXS5jb25jYXQodGhpcykpO1xuICAgIH1cblxuICAgIHJldHVybiBfY29uc3RydWN0KE1pZGRsZXdhcmVBcnJheSwgYXJyLmNvbmNhdCh0aGlzKSk7XG4gIH07XG5cbiAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheTtcbn0oXG4vKiNfX1BVUkVfXyovXG5fd3JhcE5hdGl2ZVN1cGVyKEFycmF5KSk7XG5cbnZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJzsgLy8gVGhyb3cgYW4gZXJyb3IgaWYgdGhlIGNvbmRpdGlvbiBmYWlsc1xuLy8gU3RyaXAgb3V0IGVycm9yIG1lc3NhZ2VzIGZvciBwcm9kdWN0aW9uXG4vLyA+IE5vdCBwcm92aWRpbmcgYW4gaW5saW5lIGRlZmF1bHQgYXJndW1lbnQgZm9yIG1lc3NhZ2UgYXMgdGhlIHJlc3VsdCBpcyBzbWFsbGVyXG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIHJldHVybjtcbiAgfSAvLyBDb25kaXRpb24gbm90IHBhc3NlZFxuICAvLyBJbiBwcm9kdWN0aW9uIHdlIHN0cmlwIHRoZSBtZXNzYWdlIGJ1dCBzdGlsbCB0aHJvd1xuXG5cbiAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXgpO1xuICB9IC8vIFdoZW4gbm90IGluIHByb2R1Y3Rpb24gd2UgYWxsb3cgdGhlIG1lc3NhZ2UgdG8gcGFzcyB0aHJvdWdoXG4gIC8vICpUaGlzIGJsb2NrIHdpbGwgYmUgcmVtb3ZlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcypcblxuXG4gIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkob2JqLCBzZXJpYWxpemVyLCBpbmRlbnQsIGRlY3ljbGVyKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIGdldFNlcmlhbGl6ZShzZXJpYWxpemVyLCBkZWN5Y2xlciksIGluZGVudCk7XG59XG5cbmZ1bmN0aW9uIGdldFNlcmlhbGl6ZShzZXJpYWxpemVyLCBkZWN5Y2xlcikge1xuICB2YXIgc3RhY2sgPSBbXSxcbiAgICAgIGtleXMgPSBbXTtcbiAgaWYgKCFkZWN5Y2xlcikgZGVjeWNsZXIgPSBmdW5jdGlvbiBkZWN5Y2xlcihfLCB2YWx1ZSkge1xuICAgIGlmIChzdGFja1swXSA9PT0gdmFsdWUpIHJldHVybiAnW0NpcmN1bGFyIH5dJztcbiAgICByZXR1cm4gJ1tDaXJjdWxhciB+LicgKyBrZXlzLnNsaWNlKDAsIHN0YWNrLmluZGV4T2YodmFsdWUpKS5qb2luKCcuJykgKyAnXSc7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgdGhpc1BvcyA9IHN0YWNrLmluZGV4T2YodGhpcyk7XG4gICAgICB+dGhpc1BvcyA/IHN0YWNrLnNwbGljZSh0aGlzUG9zICsgMSkgOiBzdGFjay5wdXNoKHRoaXMpO1xuICAgICAgfnRoaXNQb3MgPyBrZXlzLnNwbGljZSh0aGlzUG9zLCBJbmZpbml0eSwga2V5KSA6IGtleXMucHVzaChrZXkpO1xuICAgICAgaWYgKH5zdGFjay5pbmRleE9mKHZhbHVlKSkgdmFsdWUgPSBkZWN5Y2xlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgIH0gZWxzZSBzdGFjay5wdXNoKHZhbHVlKTtcblxuICAgIHJldHVybiBzZXJpYWxpemVyID09IG51bGwgPyB2YWx1ZSA6IHNlcmlhbGl6ZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCBgaXNJbW11dGFibGVgIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGlzSW1tdXRhYmxlRGVmYXVsdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xufVxuZnVuY3Rpb24gdHJhY2tGb3JNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopIHtcbiAgdmFyIHRyYWNrZWRQcm9wZXJ0aWVzID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKTtcbiAgcmV0dXJuIHtcbiAgICBkZXRlY3RNdXRhdGlvbnM6IGZ1bmN0aW9uIGRldGVjdE11dGF0aW9ucygpIHtcbiAgICAgIHJldHVybiBfZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnRpZXMsIG9iaik7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmosIHBhdGgpIHtcbiAgaWYgKGlnbm9yZVBhdGhzID09PSB2b2lkIDApIHtcbiAgICBpZ25vcmVQYXRocyA9IFtdO1xuICB9XG5cbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBbXTtcbiAgfVxuXG4gIHZhciB0cmFja2VkID0ge1xuICAgIHZhbHVlOiBvYmpcbiAgfTtcblxuICBpZiAoIWlzSW1tdXRhYmxlKG9iaikpIHtcbiAgICB0cmFja2VkLmNoaWxkcmVuID0ge307XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICB2YXIgY2hpbGRQYXRoID0gcGF0aC5jb25jYXQoa2V5KTtcblxuICAgICAgaWYgKGlnbm9yZVBhdGhzLmxlbmd0aCAmJiBpZ25vcmVQYXRocy5pbmRleE9mKGNoaWxkUGF0aC5qb2luKCcuJykpICE9PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdHJhY2tlZC5jaGlsZHJlbltrZXldID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqW2tleV0sIGNoaWxkUGF0aCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRyYWNrZWQ7XG59XG5cbmZ1bmN0aW9uIF9kZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydHksIG9iaiwgc2FtZVBhcmVudFJlZiwgcGF0aCkge1xuICBpZiAoaWdub3JlUGF0aHMgPT09IHZvaWQgMCkge1xuICAgIGlnbm9yZVBhdGhzID0gW107XG4gIH1cblxuICBpZiAoc2FtZVBhcmVudFJlZiA9PT0gdm9pZCAwKSB7XG4gICAgc2FtZVBhcmVudFJlZiA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBbXTtcbiAgfVxuXG4gIHZhciBwcmV2T2JqID0gdHJhY2tlZFByb3BlcnR5ID8gdHJhY2tlZFByb3BlcnR5LnZhbHVlIDogdW5kZWZpbmVkO1xuICB2YXIgc2FtZVJlZiA9IHByZXZPYmogPT09IG9iajtcblxuICBpZiAoc2FtZVBhcmVudFJlZiAmJiAhc2FtZVJlZiAmJiAhTnVtYmVyLmlzTmFOKG9iaikpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2FzTXV0YXRlZDogdHJ1ZSxcbiAgICAgIHBhdGg6IHBhdGhcbiAgICB9O1xuICB9XG5cbiAgaWYgKGlzSW1tdXRhYmxlKHByZXZPYmopIHx8IGlzSW1tdXRhYmxlKG9iaikpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2FzTXV0YXRlZDogZmFsc2VcbiAgICB9O1xuICB9IC8vIEdhdGhlciBhbGwga2V5cyBmcm9tIHByZXYgKHRyYWNrZWQpIGFuZCBhZnRlciBvYmpzXG5cblxuICB2YXIga2V5c1RvRGV0ZWN0ID0ge307XG4gIE9iamVjdC5rZXlzKHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xuICB9KTtcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XG4gIH0pO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGtleXNUb0RldGVjdCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGNoaWxkUGF0aCA9IHBhdGguY29uY2F0KGtleSk7XG5cbiAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoLmpvaW4oJy4nKSkgIT09IC0xKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gX2RldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbltrZXldLCBvYmpba2V5XSwgc2FtZVJlZiwgY2hpbGRQYXRoKTtcblxuICAgIGlmIChyZXN1bHQud2FzTXV0YXRlZCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdhc011dGF0ZWQ6IGZhbHNlXG4gIH07XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1pZGRsZXdhcmUgdGhhdCBjaGVja3Mgd2hldGhlciBhbnkgc3RhdGUgd2FzIG11dGF0ZWQgaW4gYmV0d2VlblxyXG4gKiBkaXNwYXRjaGVzIG9yIGR1cmluZyBhIGRpc3BhdGNoLiBJZiBhbnkgbXV0YXRpb25zIGFyZSBkZXRlY3RlZCwgYW4gZXJyb3IgaXNcclxuICogdGhyb3duLlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyBNaWRkbGV3YXJlIG9wdGlvbnMuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkaXNJbW11dGFibGUgPSBfb3B0aW9ucy5pc0ltbXV0YWJsZSxcbiAgICAgIGlzSW1tdXRhYmxlID0gX29wdGlvbnMkaXNJbW11dGFibGUgPT09IHZvaWQgMCA/IGlzSW1tdXRhYmxlRGVmYXVsdCA6IF9vcHRpb25zJGlzSW1tdXRhYmxlLFxuICAgICAgaWdub3JlZFBhdGhzID0gX29wdGlvbnMuaWdub3JlZFBhdGhzLFxuICAgICAgX29wdGlvbnMkd2FybkFmdGVyID0gX29wdGlvbnMud2FybkFmdGVyLFxuICAgICAgd2FybkFmdGVyID0gX29wdGlvbnMkd2FybkFmdGVyID09PSB2b2lkIDAgPyAzMiA6IF9vcHRpb25zJHdhcm5BZnRlcixcbiAgICAgIGlnbm9yZSA9IF9vcHRpb25zLmlnbm9yZTsgLy8gQWxpYXMgaWdub3JlLT5pZ25vcmVkUGF0aHMsIGJ1dCBwcmVmZXIgaWdub3JlZFBhdGhzIGlmIHByZXNlbnRcblxuICBpZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMgfHwgaWdub3JlO1xuICB2YXIgdHJhY2sgPSB0cmFja0Zvck11dGF0aW9ucy5iaW5kKG51bGwsIGlzSW1tdXRhYmxlLCBpZ25vcmVkUGF0aHMpO1xuICByZXR1cm4gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHZhciBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgdmFyIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHZhciBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgJ0ltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZScpO1xuICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpOyAvLyBUcmFjayBiZWZvcmUgcG90ZW50aWFsbHkgbm90IG1lZXRpbmcgdGhlIGludmFyaWFudFxuXG4gICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcbiAgICAgICAgICAhIXJlc3VsdC53YXNNdXRhdGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGJldHdlZW4gZGlzcGF0Y2hlcywgaW4gdGhlIHBhdGggJ1wiICsgKHJlc3VsdC5wYXRoIHx8IFtdKS5qb2luKCcuJykgKyBcIicuICBUaGlzIG1heSBjYXVzZSBpbmNvcnJlY3QgYmVoYXZpb3IuIChodHRwczovL3JlZHV4LmpzLm9yZy90cm91Ymxlc2hvb3RpbmcjbmV2ZXItbXV0YXRlLXJlZHVjZXItYXJndW1lbnRzKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZGlzcGF0Y2hlZEFjdGlvbiA9IG5leHQoYWN0aW9uKTtcbiAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTsgLy8gVHJhY2sgYmVmb3JlIHBvdGVudGlhbGx5IG5vdCBtZWV0aW5nIHRoZSBpbnZhcmlhbnRcblxuICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XG4gICAgICAgICAgcmVzdWx0Lndhc011dGF0ZWQgJiYgKCEhcmVzdWx0Lndhc011dGF0ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgaW5zaWRlIGEgZGlzcGF0Y2gsIGluIHRoZSBwYXRoOiBcIiArIChyZXN1bHQucGF0aCB8fCBbXSkuam9pbignLicpICsgXCIuIFRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoZSBhY3Rpb24gXCIgKyBzdHJpbmdpZnkoYWN0aW9uKSArIFwiLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHJvdWJsZXNob290aW5nI25ldmVyLW11dGF0ZS1yZWR1Y2VyLWFyZ3VtZW50cylcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2hlZEFjdGlvbjtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGFzc2VkIHZhbHVlIGlzIFwicGxhaW5cIiwgaS5lLiBhIHZhbHVlIHRoYXQgaXMgZWl0aGVyXHJcbiAqIGRpcmVjdGx5IEpTT04tc2VyaWFsaXphYmxlIChib29sZWFuLCBudW1iZXIsIHN0cmluZywgYXJyYXksIHBsYWluIG9iamVjdClcclxuICogb3IgYHVuZGVmaW5lZGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB2YWwgVGhlIHZhbHVlIHRvIGNoZWNrLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBpc1BsYWluKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWwgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyB8fCBBcnJheS5pc0FycmF5KHZhbCkgfHwgaXNQbGFpbk9iamVjdCh2YWwpO1xufVxuLyoqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSh2YWx1ZSwgcGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFtdO1xuICB9XG5cbiAgaWYgKGlzU2VyaWFsaXphYmxlID09PSB2b2lkIDApIHtcbiAgICBpc1NlcmlhbGl6YWJsZSA9IGlzUGxhaW47XG4gIH1cblxuICBpZiAoaWdub3JlZFBhdGhzID09PSB2b2lkIDApIHtcbiAgICBpZ25vcmVkUGF0aHMgPSBbXTtcbiAgfVxuXG4gIHZhciBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcblxuICBpZiAoIWlzU2VyaWFsaXphYmxlKHZhbHVlKSkge1xuICAgIHJldHVybiB7XG4gICAgICBrZXlQYXRoOiBwYXRoLmpvaW4oJy4nKSB8fCAnPHJvb3Q+JyxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBlbnRyaWVzID0gZ2V0RW50cmllcyAhPSBudWxsID8gZ2V0RW50cmllcyh2YWx1ZSkgOiBPYmplY3QuZW50cmllcyh2YWx1ZSk7XG4gIHZhciBoYXNJZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMubGVuZ3RoID4gMDtcblxuICBmb3IgKHZhciBfaXRlcmF0b3IgPSBlbnRyaWVzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgIHZhciBfcmVmO1xuXG4gICAgaWYgKF9pc0FycmF5KSB7XG4gICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICBfcmVmID0gX2kudmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgICAgcHJvcGVydHkgPSBfcmVmMlswXSxcbiAgICAgICAgbmVzdGVkVmFsdWUgPSBfcmVmMlsxXTtcbiAgICB2YXIgbmVzdGVkUGF0aCA9IHBhdGguY29uY2F0KHByb3BlcnR5KTtcblxuICAgIGlmIChoYXNJZ25vcmVkUGF0aHMgJiYgaWdub3JlZFBhdGhzLmluZGV4T2YobmVzdGVkUGF0aC5qb2luKCcuJykpID49IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICghaXNTZXJpYWxpemFibGUobmVzdGVkVmFsdWUpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXlQYXRoOiBuZXN0ZWRQYXRoLmpvaW4oJy4nKSxcbiAgICAgICAgdmFsdWU6IG5lc3RlZFZhbHVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmVzdGVkVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShuZXN0ZWRWYWx1ZSwgbmVzdGVkUGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocyk7XG5cbiAgICAgIGlmIChmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSkge1xuICAgICAgICByZXR1cm4gZm91bmROZXN0ZWRTZXJpYWxpemFibGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtaWRkbGV3YXJlIHRoYXQsIGFmdGVyIGV2ZXJ5IHN0YXRlIGNoYW5nZSwgY2hlY2tzIGlmIHRoZSBuZXdcclxuICogc3RhdGUgaXMgc2VyaWFsaXphYmxlLiBJZiBhIG5vbi1zZXJpYWxpemFibGUgdmFsdWUgaXMgZm91bmQgd2l0aGluIHRoZVxyXG4gKiBzdGF0ZSwgYW4gZXJyb3IgaXMgcHJpbnRlZCB0byB0aGUgY29uc29sZS5cclxuICpcclxuICogQHBhcmFtIG9wdGlvbnMgTWlkZGxld2FyZSBvcHRpb25zLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRpc1NlcmlhbGl6YWIgPSBfb3B0aW9ucy5pc1NlcmlhbGl6YWJsZSxcbiAgICAgIGlzU2VyaWFsaXphYmxlID0gX29wdGlvbnMkaXNTZXJpYWxpemFiID09PSB2b2lkIDAgPyBpc1BsYWluIDogX29wdGlvbnMkaXNTZXJpYWxpemFiLFxuICAgICAgZ2V0RW50cmllcyA9IF9vcHRpb25zLmdldEVudHJpZXMsXG4gICAgICBfb3B0aW9ucyRpZ25vcmVkQWN0aW8gPSBfb3B0aW9ucy5pZ25vcmVkQWN0aW9ucyxcbiAgICAgIGlnbm9yZWRBY3Rpb25zID0gX29wdGlvbnMkaWdub3JlZEFjdGlvID09PSB2b2lkIDAgPyBbXSA6IF9vcHRpb25zJGlnbm9yZWRBY3RpbyxcbiAgICAgIF9vcHRpb25zJGlnbm9yZWRBY3RpbzIgPSBfb3B0aW9ucy5pZ25vcmVkQWN0aW9uUGF0aHMsXG4gICAgICBpZ25vcmVkQWN0aW9uUGF0aHMgPSBfb3B0aW9ucyRpZ25vcmVkQWN0aW8yID09PSB2b2lkIDAgPyBbJ21ldGEuYXJnJ10gOiBfb3B0aW9ucyRpZ25vcmVkQWN0aW8yLFxuICAgICAgX29wdGlvbnMkaWdub3JlZFBhdGhzID0gX29wdGlvbnMuaWdub3JlZFBhdGhzLFxuICAgICAgaWdub3JlZFBhdGhzID0gX29wdGlvbnMkaWdub3JlZFBhdGhzID09PSB2b2lkIDAgPyBbXSA6IF9vcHRpb25zJGlnbm9yZWRQYXRocyxcbiAgICAgIF9vcHRpb25zJHdhcm5BZnRlciA9IF9vcHRpb25zLndhcm5BZnRlcixcbiAgICAgIHdhcm5BZnRlciA9IF9vcHRpb25zJHdhcm5BZnRlciA9PT0gdm9pZCAwID8gMzIgOiBfb3B0aW9ucyR3YXJuQWZ0ZXI7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmVBUEkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChpZ25vcmVkQWN0aW9ucy5sZW5ndGggJiYgaWdub3JlZEFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgIT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgJ1NlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZScpO1xuICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKGFjdGlvbiwgW10sIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkQWN0aW9uUGF0aHMpO1xuXG4gICAgICAgICAgaWYgKGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBrZXlQYXRoID0gZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZS5rZXlQYXRoLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZS52YWx1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBIG5vbi1zZXJpYWxpemFibGUgdmFsdWUgd2FzIGRldGVjdGVkIGluIGFuIGFjdGlvbiwgaW4gdGhlIHBhdGg6IGBcIiArIGtleVBhdGggKyBcImAuIFZhbHVlOlwiLCB2YWx1ZSwgJ1xcblRha2UgYSBsb29rIGF0IHRoZSBsb2dpYyB0aGF0IGRpc3BhdGNoZWQgdGhpcyBhY3Rpb246ICcsIGFjdGlvbiwgJ1xcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL2FjdGlvbnMjd2h5LXNob3VsZC10eXBlLWJlLWEtc3RyaW5nLW9yLWF0LWxlYXN0LXNlcmlhbGl6YWJsZS13aHktc2hvdWxkLW15LWFjdGlvbi10eXBlcy1iZS1jb25zdGFudHMpJywgJ1xcbihUbyBhbGxvdyBub24tc2VyaWFsaXphYmxlIHZhbHVlcyBzZWU6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvdXNhZ2UvdXNhZ2UtZ3VpZGUjd29ya2luZy13aXRoLW5vbi1zZXJpYWxpemFibGUtZGF0YSknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV4dChhY3Rpb24pO1xuICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlQVBJLmdldFN0YXRlKCk7XG4gICAgICAgICAgdmFyIGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShzdGF0ZSwgW10sIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMpO1xuXG4gICAgICAgICAgaWYgKGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS52YWx1ZTtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBIG5vbi1zZXJpYWxpemFibGUgdmFsdWUgd2FzIGRldGVjdGVkIGluIHRoZSBzdGF0ZSwgaW4gdGhlIHBhdGg6IGBcIiArIGtleVBhdGggKyBcImAuIFZhbHVlOlwiLCB2YWx1ZSwgXCJcXG5UYWtlIGEgbG9vayBhdCB0aGUgcmVkdWNlcihzKSBoYW5kbGluZyB0aGlzIGFjdGlvbiB0eXBlOiBcIiArIGFjdGlvbi50eXBlICsgXCIuXFxuKFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9mYXEvb3JnYW5pemluZy1zdGF0ZSNjYW4taS1wdXQtZnVuY3Rpb25zLXByb21pc2VzLW9yLW90aGVyLW5vbi1zZXJpYWxpemFibGUtaXRlbXMtaW4tbXktc3RvcmUtc3RhdGUpXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdib29sZWFuJztcbn1cblxuZnVuY3Rpb24gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpO1xuICB9O1xufVxuLyoqXHJcbiAqIFJldHVybnMgYW55IGFycmF5IGNvbnRhaW5pbmcgdGhlIGRlZmF1bHQgbWlkZGxld2FyZSBpbnN0YWxsZWQgYnlcclxuICogYGNvbmZpZ3VyZVN0b3JlKClgLiBVc2VmdWwgaWYgeW91IHdhbnQgdG8gY29uZmlndXJlIHlvdXIgc3RvcmUgd2l0aCBhIGN1c3RvbVxyXG4gKiBgbWlkZGxld2FyZWAgYXJyYXkgYnV0IHN0aWxsIGtlZXAgdGhlIGRlZmF1bHQgc2V0LlxyXG4gKlxyXG4gKiBAcmV0dXJuIFRoZSBkZWZhdWx0IG1pZGRsZXdhcmUgdXNlZCBieSBgY29uZmlndXJlU3RvcmUoKWAuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbmZ1bmN0aW9uIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyR0aHVuayA9IF9vcHRpb25zLnRodW5rLFxuICAgICAgdGh1bmsgPSBfb3B0aW9ucyR0aHVuayA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHRodW5rLFxuICAgICAgX29wdGlvbnMkaW1tdXRhYmxlQ2hlID0gX29wdGlvbnMuaW1tdXRhYmxlQ2hlY2ssXG4gICAgICBpbW11dGFibGVDaGVjayA9IF9vcHRpb25zJGltbXV0YWJsZUNoZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGltbXV0YWJsZUNoZSxcbiAgICAgIF9vcHRpb25zJHNlcmlhbGl6YWJsZSA9IF9vcHRpb25zLnNlcmlhbGl6YWJsZUNoZWNrLFxuICAgICAgc2VyaWFsaXphYmxlQ2hlY2sgPSBfb3B0aW9ucyRzZXJpYWxpemFibGUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzZXJpYWxpemFibGU7XG4gIHZhciBtaWRkbGV3YXJlQXJyYXkgPSBuZXcgTWlkZGxld2FyZUFycmF5KCk7XG5cbiAgaWYgKHRodW5rKSB7XG4gICAgaWYgKGlzQm9vbGVhbih0aHVuaykpIHtcbiAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKHRodW5rTWlkZGxld2FyZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKHRodW5rTWlkZGxld2FyZS53aXRoRXh0cmFBcmd1bWVudCh0aHVuay5leHRyYUFyZ3VtZW50KSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoaW1tdXRhYmxlQ2hlY2spIHtcbiAgICAgIC8qIFBST0RfU1RBUlRfUkVNT1ZFX1VNRCAqL1xuICAgICAgdmFyIGltbXV0YWJsZU9wdGlvbnMgPSB7fTtcblxuICAgICAgaWYgKCFpc0Jvb2xlYW4oaW1tdXRhYmxlQ2hlY2spKSB7XG4gICAgICAgIGltbXV0YWJsZU9wdGlvbnMgPSBpbW11dGFibGVDaGVjaztcbiAgICAgIH1cblxuICAgICAgbWlkZGxld2FyZUFycmF5LnVuc2hpZnQoY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKGltbXV0YWJsZU9wdGlvbnMpKTtcbiAgICAgIC8qIFBST0RfU1RPUF9SRU1PVkVfVU1EICovXG4gICAgfVxuXG4gICAgaWYgKHNlcmlhbGl6YWJsZUNoZWNrKSB7XG4gICAgICB2YXIgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHt9O1xuXG4gICAgICBpZiAoIWlzQm9vbGVhbihzZXJpYWxpemFibGVDaGVjaykpIHtcbiAgICAgICAgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHNlcmlhbGl6YWJsZUNoZWNrO1xuICAgICAgfVxuXG4gICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoc2VyaWFsaXphYmxlT3B0aW9ucykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaWRkbGV3YXJlQXJyYXk7XG59XG5cbnZhciBJU19QUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbi8qKlxyXG4gKiBBIGZyaWVuZGx5IGFic3RyYWN0aW9uIG92ZXIgdGhlIHN0YW5kYXJkIFJlZHV4IGBjcmVhdGVTdG9yZSgpYCBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIGNvbmZpZyBUaGUgc3RvcmUgY29uZmlndXJhdGlvbi5cclxuICogQHJldHVybnMgQSBjb25maWd1cmVkIFJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBjb25maWd1cmVTdG9yZShvcHRpb25zKSB7XG4gIHZhciBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUgPSBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlKCk7XG5cbiAgdmFyIF9yZWYgPSBvcHRpb25zIHx8IHt9LFxuICAgICAgX3JlZiRyZWR1Y2VyID0gX3JlZi5yZWR1Y2VyLFxuICAgICAgcmVkdWNlciA9IF9yZWYkcmVkdWNlciA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZiRyZWR1Y2VyLFxuICAgICAgX3JlZiRtaWRkbGV3YXJlID0gX3JlZi5taWRkbGV3YXJlLFxuICAgICAgbWlkZGxld2FyZSA9IF9yZWYkbWlkZGxld2FyZSA9PT0gdm9pZCAwID8gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKCkgOiBfcmVmJG1pZGRsZXdhcmUsXG4gICAgICBfcmVmJGRldlRvb2xzID0gX3JlZi5kZXZUb29scyxcbiAgICAgIGRldlRvb2xzID0gX3JlZiRkZXZUb29scyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkZGV2VG9vbHMsXG4gICAgICBfcmVmJHByZWxvYWRlZFN0YXRlID0gX3JlZi5wcmVsb2FkZWRTdGF0ZSxcbiAgICAgIHByZWxvYWRlZFN0YXRlID0gX3JlZiRwcmVsb2FkZWRTdGF0ZSA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZiRwcmVsb2FkZWRTdGF0ZSxcbiAgICAgIF9yZWYkZW5oYW5jZXJzID0gX3JlZi5lbmhhbmNlcnMsXG4gICAgICBlbmhhbmNlcnMgPSBfcmVmJGVuaGFuY2VycyA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZiRlbmhhbmNlcnM7XG5cbiAgdmFyIHJvb3RSZWR1Y2VyO1xuXG4gIGlmICh0eXBlb2YgcmVkdWNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJvb3RSZWR1Y2VyID0gcmVkdWNlcjtcbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHJlZHVjZXIpKSB7XG4gICAgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcInJlZHVjZXJcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCBvZiBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGNvbWJpbmVSZWR1Y2VycycpO1xuICB9XG5cbiAgdmFyIG1pZGRsZXdhcmVFbmhhbmNlciA9IGFwcGx5TWlkZGxld2FyZS5hcHBseSh2b2lkIDAsIHR5cGVvZiBtaWRkbGV3YXJlID09PSAnZnVuY3Rpb24nID8gbWlkZGxld2FyZShjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUpIDogbWlkZGxld2FyZSk7XG4gIHZhciBmaW5hbENvbXBvc2UgPSBjb21wb3NlO1xuXG4gIGlmIChkZXZUb29scykge1xuICAgIGZpbmFsQ29tcG9zZSA9IGNvbXBvc2VXaXRoRGV2VG9vbHMoX2V4dGVuZHMoe1xuICAgICAgLy8gRW5hYmxlIGNhcHR1cmUgb2Ygc3RhY2sgdHJhY2VzIGZvciBkaXNwYXRjaGVkIFJlZHV4IGFjdGlvbnNcbiAgICAgIHRyYWNlOiAhSVNfUFJPRFVDVElPTlxuICAgIH0sIHR5cGVvZiBkZXZUb29scyA9PT0gJ29iamVjdCcgJiYgZGV2VG9vbHMpKTtcbiAgfVxuXG4gIHZhciBzdG9yZUVuaGFuY2VycyA9IFttaWRkbGV3YXJlRW5oYW5jZXJdO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGVuaGFuY2VycykpIHtcbiAgICBzdG9yZUVuaGFuY2VycyA9IFttaWRkbGV3YXJlRW5oYW5jZXJdLmNvbmNhdChlbmhhbmNlcnMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmhhbmNlcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzdG9yZUVuaGFuY2VycyA9IGVuaGFuY2VycyhzdG9yZUVuaGFuY2Vycyk7XG4gIH1cblxuICB2YXIgY29tcG9zZWRFbmhhbmNlciA9IGZpbmFsQ29tcG9zZS5hcHBseSh2b2lkIDAsIHN0b3JlRW5oYW5jZXJzKTtcbiAgcmV0dXJuIGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgY29tcG9zZWRFbmhhbmNlcik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFjdGlvbih0eXBlLCBwcmVwYXJlQWN0aW9uKSB7XG4gIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoKSB7XG4gICAgaWYgKHByZXBhcmVBY3Rpb24pIHtcbiAgICAgIHZhciBwcmVwYXJlZCA9IHByZXBhcmVBY3Rpb24uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICBpZiAoIXByZXBhcmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncHJlcGFyZUFjdGlvbiBkaWQgbm90IHJldHVybiBhbiBvYmplY3QnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgcGF5bG9hZDogcHJlcGFyZWQucGF5bG9hZFxuICAgICAgfSwgJ21ldGEnIGluIHByZXBhcmVkICYmIHtcbiAgICAgICAgbWV0YTogcHJlcGFyZWQubWV0YVxuICAgICAgfSwge30sICdlcnJvcicgaW4gcHJlcGFyZWQgJiYge1xuICAgICAgICBlcnJvcjogcHJlcGFyZWQuZXJyb3JcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgcGF5bG9hZDogYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdXG4gICAgfTtcbiAgfVxuXG4gIGFjdGlvbkNyZWF0b3IudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiXCIgKyB0eXBlO1xuICB9O1xuXG4gIGFjdGlvbkNyZWF0b3IudHlwZSA9IHR5cGU7XG5cbiAgYWN0aW9uQ3JlYXRvci5tYXRjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICByZXR1cm4gYWN0aW9uLnR5cGUgPT09IHR5cGU7XG4gIH07XG5cbiAgcmV0dXJuIGFjdGlvbkNyZWF0b3I7XG59XG5mdW5jdGlvbiBpc0ZTQShhY3Rpb24pIHtcbiAgcmV0dXJuIGlzUGxhaW5PYmplY3QoYWN0aW9uKSAmJiB0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICdzdHJpbmcnICYmIE9iamVjdC5rZXlzKGFjdGlvbikuZXZlcnkoaXNWYWxpZEtleSk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XG4gIHJldHVybiBbJ3R5cGUnLCAncGF5bG9hZCcsICdlcnJvcicsICdtZXRhJ10uaW5kZXhPZihrZXkpID4gLTE7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgYWN0aW9uIHR5cGUgb2YgdGhlIGFjdGlvbnMgY3JlYXRlZCBieSB0aGUgcGFzc2VkXHJcbiAqIGBjcmVhdGVBY3Rpb24oKWAtZ2VuZXJhdGVkIGFjdGlvbiBjcmVhdG9yIChhcmJpdHJhcnkgYWN0aW9uIGNyZWF0b3JzXHJcbiAqIGFyZSBub3Qgc3VwcG9ydGVkKS5cclxuICpcclxuICogQHBhcmFtIGFjdGlvbiBUaGUgYWN0aW9uIGNyZWF0b3Igd2hvc2UgYWN0aW9uIHR5cGUgdG8gZ2V0LlxyXG4gKiBAcmV0dXJucyBUaGUgYWN0aW9uIHR5cGUgdXNlZCBieSB0aGUgYWN0aW9uIGNyZWF0b3IuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cblxuZnVuY3Rpb24gZ2V0VHlwZShhY3Rpb25DcmVhdG9yKSB7XG4gIHJldHVybiBcIlwiICsgYWN0aW9uQ3JlYXRvcjtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2soYnVpbGRlckNhbGxiYWNrKSB7XG4gIHZhciBhY3Rpb25zTWFwID0ge307XG4gIHZhciBhY3Rpb25NYXRjaGVycyA9IFtdO1xuICB2YXIgZGVmYXVsdENhc2VSZWR1Y2VyO1xuICB2YXIgYnVpbGRlciA9IHtcbiAgICBhZGRDYXNlOiBmdW5jdGlvbiBhZGRDYXNlKHR5cGVPckFjdGlvbkNyZWF0b3IsIHJlZHVjZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIC8qXHJcbiAgICAgICAgIHRvIGtlZXAgdGhlIGRlZmluaXRpb24gYnkgdGhlIHVzZXIgaW4gbGluZSB3aXRoIGFjdHVhbCBiZWhhdmlvcixcclxuICAgICAgICAgd2UgZW5mb3JjZSBgYWRkQ2FzZWAgdG8gYWx3YXlzIGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYWRkTWF0Y2hlcmBcclxuICAgICAgICAgYXMgbWF0Y2hpbmcgY2FzZXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbWF0Y2hlcnNcclxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGFjdGlvbk1hdGNoZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGRNYXRjaGVyYCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYGJ1aWxkZXIuYWRkQ2FzZWAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09ICdzdHJpbmcnID8gdHlwZU9yQWN0aW9uQ3JlYXRvciA6IHR5cGVPckFjdGlvbkNyZWF0b3IudHlwZTtcblxuICAgICAgaWYgKHR5cGUgaW4gYWN0aW9uc01hcCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FkZENhc2UgY2Fubm90IGJlIGNhbGxlZCB3aXRoIHR3byByZWR1Y2VycyBmb3IgdGhlIHNhbWUgYWN0aW9uIHR5cGUnKTtcbiAgICAgIH1cblxuICAgICAgYWN0aW9uc01hcFt0eXBlXSA9IHJlZHVjZXI7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9LFxuICAgIGFkZE1hdGNoZXI6IGZ1bmN0aW9uIGFkZE1hdGNoZXIobWF0Y2hlciwgcmVkdWNlcikge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRlZmF1bHRDYXNlUmVkdWNlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYGJ1aWxkZXIuYWRkTWF0Y2hlcmAgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGJlZm9yZSBjYWxsaW5nIGBidWlsZGVyLmFkZERlZmF1bHRDYXNlYCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGFjdGlvbk1hdGNoZXJzLnB1c2goe1xuICAgICAgICBtYXRjaGVyOiBtYXRjaGVyLFxuICAgICAgICByZWR1Y2VyOiByZWR1Y2VyXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBidWlsZGVyO1xuICAgIH0sXG4gICAgYWRkRGVmYXVsdENhc2U6IGZ1bmN0aW9uIGFkZERlZmF1bHRDYXNlKHJlZHVjZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BidWlsZGVyLmFkZERlZmF1bHRDYXNlYCBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRlZmF1bHRDYXNlUmVkdWNlciA9IHJlZHVjZXI7XG4gICAgICByZXR1cm4gYnVpbGRlcjtcbiAgICB9XG4gIH07XG4gIGJ1aWxkZXJDYWxsYmFjayhidWlsZGVyKTtcbiAgcmV0dXJuIFthY3Rpb25zTWFwLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIG1hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyKSB7XG4gIGlmIChhY3Rpb25NYXRjaGVycyA9PT0gdm9pZCAwKSB7XG4gICAgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcbiAgfVxuXG4gIHZhciBfcmVmID0gdHlwZW9mIG1hcE9yQnVpbGRlckNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sobWFwT3JCdWlsZGVyQ2FsbGJhY2spIDogW21hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXSxcbiAgICAgIGFjdGlvbnNNYXAgPSBfcmVmWzBdLFxuICAgICAgZmluYWxBY3Rpb25NYXRjaGVycyA9IF9yZWZbMV0sXG4gICAgICBmaW5hbERlZmF1bHRDYXNlUmVkdWNlciA9IF9yZWZbMl07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIH1cblxuICAgIHZhciBjYXNlUmVkdWNlcnMgPSBbYWN0aW9uc01hcFthY3Rpb24udHlwZV1dLmNvbmNhdChmaW5hbEFjdGlvbk1hdGNoZXJzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgIHZhciBtYXRjaGVyID0gX3JlZjIubWF0Y2hlcjtcbiAgICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XG4gICAgfSkubWFwKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgdmFyIHJlZHVjZXIgPSBfcmVmMy5yZWR1Y2VyO1xuICAgICAgcmV0dXJuIHJlZHVjZXI7XG4gICAgfSkpO1xuXG4gICAgaWYgKGNhc2VSZWR1Y2Vycy5maWx0ZXIoZnVuY3Rpb24gKGNyKSB7XG4gICAgICByZXR1cm4gISFjcjtcbiAgICB9KS5sZW5ndGggPT09IDApIHtcbiAgICAgIGNhc2VSZWR1Y2VycyA9IFtmaW5hbERlZmF1bHRDYXNlUmVkdWNlcl07XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhc2VSZWR1Y2Vycy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzU3RhdGUsIGNhc2VSZWR1Y2VyKSB7XG4gICAgICBpZiAoY2FzZVJlZHVjZXIpIHtcbiAgICAgICAgaWYgKGlzRHJhZnQocHJldmlvdXNTdGF0ZSkpIHtcbiAgICAgICAgICAvLyBJZiBpdCdzIGFscmVhZHkgYSBkcmFmdCwgd2UgbXVzdCBhbHJlYWR5IGJlIGluc2lkZSBhIGBjcmVhdGVOZXh0U3RhdGVgIGNhbGwsXG4gICAgICAgICAgLy8gbGlrZWx5IGJlY2F1c2UgdGhpcyBpcyBiZWluZyB3cmFwcGVkIGluIGBjcmVhdGVSZWR1Y2VyYCwgYGNyZWF0ZVNsaWNlYCwgb3IgbmVzdGVkXG4gICAgICAgICAgLy8gaW5zaWRlIGFuIGV4aXN0aW5nIGRyYWZ0LiBJdCdzIHNhZmUgdG8ganVzdCBwYXNzIHRoZSBkcmFmdCB0byB0aGUgbXV0YXRvci5cbiAgICAgICAgICB2YXIgZHJhZnQgPSBwcmV2aW91c1N0YXRlOyAvLyBXZSBjYW4gYXNzdW1lIHRoaXMgaXMgYWxyZWFkeSBhIGRyYWZ0XG5cbiAgICAgICAgICB2YXIgcmVzdWx0ID0gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzRHJhZnRhYmxlKHByZXZpb3VzU3RhdGUpKSB7XG4gICAgICAgICAgLy8gSWYgc3RhdGUgaXMgbm90IGRyYWZ0YWJsZSAoZXg6IGEgcHJpbWl0aXZlLCBzdWNoIGFzIDApLCB3ZSB3YW50IHRvIGRpcmVjdGx5XG4gICAgICAgICAgLy8gcmV0dXJuIHRoZSBjYXNlUmVkdWNlciBmdW5jIGFuZCBub3Qgd3JhcCBpdCB3aXRoIHByb2R1Y2UuXG4gICAgICAgICAgdmFyIF9yZXN1bHQgPSBjYXNlUmVkdWNlcihwcmV2aW91c1N0YXRlLCBhY3Rpb24pO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBfcmVzdWx0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0EgY2FzZSByZWR1Y2VyIG9uIGEgbm9uLWRyYWZ0YWJsZSB2YWx1ZSBtdXN0IG5vdCByZXR1cm4gdW5kZWZpbmVkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIF9yZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZSBjcmVhdGVOZXh0U3RhdGUoKSBwcm9kdWNlcyBhbiBJbW11dGFibGU8RHJhZnQ8Uz4+IHJhdGhlclxuICAgICAgICAgIC8vIHRoYW4gYW4gSW1tdXRhYmxlPFM+LCBhbmQgVHlwZVNjcmlwdCBjYW5ub3QgZmluZCBvdXQgaG93IHRvIHJlY29uY2lsZVxuICAgICAgICAgIC8vIHRoZXNlIHR3byB0eXBlcy5cbiAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlKHByZXZpb3VzU3RhdGUsIGZ1bmN0aW9uIChkcmFmdCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xuICAgIH0sIHN0YXRlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZSQxKHNsaWNlLCBhY3Rpb25LZXkpIHtcbiAgcmV0dXJuIHNsaWNlICsgXCIvXCIgKyBhY3Rpb25LZXk7XG59XG4vKipcclxuICogQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYW4gaW5pdGlhbCBzdGF0ZSwgYW4gb2JqZWN0IGZ1bGwgb2YgcmVkdWNlclxyXG4gKiBmdW5jdGlvbnMsIGFuZCBhIFwic2xpY2UgbmFtZVwiLCBhbmQgYXV0b21hdGljYWxseSBnZW5lcmF0ZXNcclxuICogYWN0aW9uIGNyZWF0b3JzIGFuZCBhY3Rpb24gdHlwZXMgdGhhdCBjb3JyZXNwb25kIHRvIHRoZVxyXG4gKiByZWR1Y2VycyBhbmQgc3RhdGUuXHJcbiAqXHJcbiAqIFRoZSBgcmVkdWNlcmAgYXJndW1lbnQgaXMgcGFzc2VkIHRvIGBjcmVhdGVSZWR1Y2VyKClgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZVNsaWNlKG9wdGlvbnMpIHtcbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICBpbml0aWFsU3RhdGUgPSBvcHRpb25zLmluaXRpYWxTdGF0ZTtcblxuICBpZiAoIW5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BuYW1lYCBpcyBhIHJlcXVpcmVkIG9wdGlvbiBmb3IgY3JlYXRlU2xpY2UnKTtcbiAgfVxuXG4gIHZhciByZWR1Y2VycyA9IG9wdGlvbnMucmVkdWNlcnMgfHwge307XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb3B0aW9ucy5leHRyYVJlZHVjZXJzID09PSAndW5kZWZpbmVkJyA/IFtdIDogdHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gJ2Z1bmN0aW9uJyA/IGV4ZWN1dGVSZWR1Y2VyQnVpbGRlckNhbGxiYWNrKG9wdGlvbnMuZXh0cmFSZWR1Y2VycykgOiBbb3B0aW9ucy5leHRyYVJlZHVjZXJzXSxcbiAgICAgIF9yZWYkID0gX3JlZlswXSxcbiAgICAgIGV4dHJhUmVkdWNlcnMgPSBfcmVmJCA9PT0gdm9pZCAwID8ge30gOiBfcmVmJCxcbiAgICAgIF9yZWYkMiA9IF9yZWZbMV0sXG4gICAgICBhY3Rpb25NYXRjaGVycyA9IF9yZWYkMiA9PT0gdm9pZCAwID8gW10gOiBfcmVmJDIsXG4gICAgICBfcmVmJDMgPSBfcmVmWzJdLFxuICAgICAgZGVmYXVsdENhc2VSZWR1Y2VyID0gX3JlZiQzID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJDM7XG5cbiAgdmFyIHJlZHVjZXJOYW1lcyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lID0ge307XG4gIHZhciBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSA9IHt9O1xuICB2YXIgYWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgcmVkdWNlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHJlZHVjZXJOYW1lKSB7XG4gICAgdmFyIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlID0gcmVkdWNlcnNbcmVkdWNlck5hbWVdO1xuICAgIHZhciB0eXBlID0gZ2V0VHlwZSQxKG5hbWUsIHJlZHVjZXJOYW1lKTtcbiAgICB2YXIgY2FzZVJlZHVjZXI7XG4gICAgdmFyIHByZXBhcmVDYWxsYmFjaztcblxuICAgIGlmICgncmVkdWNlcicgaW4gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUpIHtcbiAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmUucmVkdWNlcjtcbiAgICAgIHByZXBhcmVDYWxsYmFjayA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnByZXBhcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhc2VSZWR1Y2VyID0gbWF5YmVSZWR1Y2VyV2l0aFByZXBhcmU7XG4gICAgfVxuXG4gICAgc2xpY2VDYXNlUmVkdWNlcnNCeU5hbWVbcmVkdWNlck5hbWVdID0gY2FzZVJlZHVjZXI7XG4gICAgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGVbdHlwZV0gPSBjYXNlUmVkdWNlcjtcbiAgICBhY3Rpb25DcmVhdG9yc1tyZWR1Y2VyTmFtZV0gPSBwcmVwYXJlQ2FsbGJhY2sgPyBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUNhbGxiYWNrKSA6IGNyZWF0ZUFjdGlvbih0eXBlKTtcbiAgfSk7XG5cbiAgdmFyIGZpbmFsQ2FzZVJlZHVjZXJzID0gX2V4dGVuZHMoe30sIGV4dHJhUmVkdWNlcnMsIHt9LCBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZSk7XG5cbiAgdmFyIHJlZHVjZXIgPSBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgZmluYWxDYXNlUmVkdWNlcnMsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgcmVkdWNlcjogcmVkdWNlcixcbiAgICBhY3Rpb25zOiBhY3Rpb25DcmVhdG9ycyxcbiAgICBjYXNlUmVkdWNlcnM6IHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICBpZHM6IFtdLFxuICAgIGVudGl0aWVzOiB7fVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpIHtcbiAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKGFkZGl0aW9uYWxTdGF0ZSkge1xuICAgIGlmIChhZGRpdGlvbmFsU3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgYWRkaXRpb25hbFN0YXRlID0ge307XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCksIGFkZGl0aW9uYWxTdGF0ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldEluaXRpYWxTdGF0ZTogZ2V0SW5pdGlhbFN0YXRlXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XG4gIGZ1bmN0aW9uIGdldFNlbGVjdG9ycyhzZWxlY3RTdGF0ZSkge1xuICAgIHZhciBzZWxlY3RJZHMgPSBmdW5jdGlvbiBzZWxlY3RJZHMoc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5pZHM7XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RFbnRpdGllcyA9IGZ1bmN0aW9uIHNlbGVjdEVudGl0aWVzKHN0YXRlKSB7XG4gICAgICByZXR1cm4gc3RhdGUuZW50aXRpZXM7XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RBbGwgPSBjcmVhdGVTZWxlY3RvcihzZWxlY3RJZHMsIHNlbGVjdEVudGl0aWVzLCBmdW5jdGlvbiAoaWRzLCBlbnRpdGllcykge1xuICAgICAgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHJldHVybiBlbnRpdGllc1tpZF07XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHZhciBzZWxlY3RJZCA9IGZ1bmN0aW9uIHNlbGVjdElkKF8sIGlkKSB7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RCeUlkID0gZnVuY3Rpb24gc2VsZWN0QnlJZChlbnRpdGllcywgaWQpIHtcbiAgICAgIHJldHVybiBlbnRpdGllc1tpZF07XG4gICAgfTtcblxuICAgIHZhciBzZWxlY3RUb3RhbCA9IGNyZWF0ZVNlbGVjdG9yKHNlbGVjdElkcywgZnVuY3Rpb24gKGlkcykge1xuICAgICAgcmV0dXJuIGlkcy5sZW5ndGg7XG4gICAgfSk7XG5cbiAgICBpZiAoIXNlbGVjdFN0YXRlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZWxlY3RJZHM6IHNlbGVjdElkcyxcbiAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEVudGl0aWVzLFxuICAgICAgICBzZWxlY3RBbGw6IHNlbGVjdEFsbCxcbiAgICAgICAgc2VsZWN0VG90YWw6IHNlbGVjdFRvdGFsLFxuICAgICAgICBzZWxlY3RCeUlkOiBjcmVhdGVTZWxlY3RvcihzZWxlY3RFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBzZWxlY3RHbG9iYWxpemVkRW50aXRpZXMgPSBjcmVhdGVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0RW50aXRpZXMpO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RJZHM6IGNyZWF0ZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RJZHMpLFxuICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyxcbiAgICAgIHNlbGVjdEFsbDogY3JlYXRlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdEFsbCksXG4gICAgICBzZWxlY3RUb3RhbDogY3JlYXRlU2VsZWN0b3Ioc2VsZWN0U3RhdGUsIHNlbGVjdFRvdGFsKSxcbiAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZVNlbGVjdG9yKHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0U2VsZWN0b3JzOiBnZXRTZWxlY3RvcnNcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2luZ2xlQXJndW1lbnRTdGF0ZU9wZXJhdG9yKG11dGF0b3IpIHtcbiAgdmFyIG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcihmdW5jdGlvbiAoXywgc3RhdGUpIHtcbiAgICByZXR1cm4gbXV0YXRvcihzdGF0ZSk7XG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gb3BlcmF0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIG9wZXJhdG9yKHN0YXRlLCB1bmRlZmluZWQpO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlU3RhdGVPcGVyYXRvcihtdXRhdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUsIGFyZykge1xuICAgIGZ1bmN0aW9uIGlzUGF5bG9hZEFjdGlvbkFyZ3VtZW50KGFyZykge1xuICAgICAgcmV0dXJuIGlzRlNBKGFyZyk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bk11dGF0b3IgPSBmdW5jdGlvbiBydW5NdXRhdG9yKGRyYWZ0KSB7XG4gICAgICBpZiAoaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnKSkge1xuICAgICAgICBtdXRhdG9yKGFyZy5wYXlsb2FkLCBkcmFmdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdXRhdG9yKGFyZywgZHJhZnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoaXNEcmFmdChzdGF0ZSkpIHtcbiAgICAgIC8vIHdlIG11c3QgYWxyZWFkeSBiZSBpbnNpZGUgYSBgY3JlYXRlTmV4dFN0YXRlYCBjYWxsLCBsaWtlbHkgYmVjYXVzZVxuICAgICAgLy8gdGhpcyBpcyBiZWluZyB3cmFwcGVkIGluIGBjcmVhdGVSZWR1Y2VyYCBvciBgY3JlYXRlU2xpY2VgLlxuICAgICAgLy8gSXQncyBzYWZlIHRvIGp1c3QgcGFzcyB0aGUgZHJhZnQgdG8gdGhlIG11dGF0b3IuXG4gICAgICBydW5NdXRhdG9yKHN0YXRlKTsgLy8gc2luY2UgaXQncyBhIGRyYWZ0LCB3ZSdsbCBqdXN0IHJldHVybiBpdFxuXG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEB0cy1pZ25vcmUgY3JlYXRlTmV4dFN0YXRlKCkgcHJvZHVjZXMgYW4gSW1tdXRhYmxlPERyYWZ0PFM+PiByYXRoZXJcbiAgICAgIC8vIHRoYW4gYW4gSW1tdXRhYmxlPFM+LCBhbmQgVHlwZVNjcmlwdCBjYW5ub3QgZmluZCBvdXQgaG93IHRvIHJlY29uY2lsZVxuICAgICAgLy8gdGhlc2UgdHdvIHR5cGVzLlxuICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZShzdGF0ZSwgcnVuTXV0YXRvcik7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpIHtcbiAgdmFyIGtleSA9IHNlbGVjdElkKGVudGl0eSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1RoZSBlbnRpdHkgcGFzc2VkIHRvIHRoZSBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uIHJldHVybmVkIHVuZGVmaW5lZC4nLCAnWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uJywgJ1RoZSBlbnRpdHkgdGhhdCB3YXMgcGFzc2VkOicsIGVudGl0eSwgJ1RoZSBgc2VsZWN0SWRgIGltcGxlbWVudGF0aW9uOicsIHNlbGVjdElkLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcmV0dXJuIGtleTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpIHtcbiAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XG5cbiAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcbiAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkoZW50aXRpZXMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGVudGl0aWVzKSkge1xuICAgICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBlbnRpdGllcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVudGl0eSA9IF9yZWY7XG4gICAgICBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEFsbE11dGFibHkoZW50aXRpZXMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGVudGl0aWVzKSkge1xuICAgICAgZW50aXRpZXMgPSBPYmplY3QudmFsdWVzKGVudGl0aWVzKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5pZHMgPSBbXTtcbiAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xuICAgIGFkZE1hbnlNdXRhYmx5KGVudGl0aWVzLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVPbmVNdXRhYmx5KGtleSwgc3RhdGUpIHtcbiAgICByZXR1cm4gcmVtb3ZlTWFueU11dGFibHkoW2tleV0sIHN0YXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU1hbnlNdXRhYmx5KGtleXMsIHN0YXRlKSB7XG4gICAgdmFyIGRpZE11dGF0ZSA9IGZhbHNlO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICAgIGRlbGV0ZSBzdGF0ZS5lbnRpdGllc1trZXldO1xuICAgICAgICBkaWRNdXRhdGUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGRpZE11dGF0ZSkge1xuICAgICAgc3RhdGUuaWRzID0gc3RhdGUuaWRzLmZpbHRlcihmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIGlkIGluIHN0YXRlLmVudGl0aWVzO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQWxsTXV0YWJseShzdGF0ZSkge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUsIHtcbiAgICAgIGlkczogW10sXG4gICAgICBlbnRpdGllczoge31cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRha2VOZXdLZXkoa2V5cywgdXBkYXRlLCBzdGF0ZSkge1xuICAgIHZhciBvcmlnaW5hbCA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbCwgdXBkYXRlLmNoYW5nZXMpO1xuICAgIHZhciBuZXdLZXkgPSBzZWxlY3RJZFZhbHVlKHVwZGF0ZWQsIHNlbGVjdElkKTtcbiAgICB2YXIgaGFzTmV3S2V5ID0gbmV3S2V5ICE9PSB1cGRhdGUuaWQ7XG5cbiAgICBpZiAoaGFzTmV3S2V5KSB7XG4gICAgICBrZXlzW3VwZGF0ZS5pZF0gPSBuZXdLZXk7XG4gICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcbiAgICB9XG5cbiAgICBzdGF0ZS5lbnRpdGllc1tuZXdLZXldID0gdXBkYXRlZDtcbiAgICByZXR1cm4gaGFzTmV3S2V5O1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xuICAgIHZhciBuZXdLZXlzID0ge307XG4gICAgdmFyIHVwZGF0ZXNQZXJFbnRpdHkgPSB7fTtcbiAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgICAgLy8gT25seSBhcHBseSB1cGRhdGVzIHRvIGVudGl0aWVzIHRoYXQgY3VycmVudGx5IGV4aXN0XG4gICAgICBpZiAodXBkYXRlLmlkIGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBtdWx0aXBsZSB1cGRhdGVzIHRvIG9uZSBlbnRpdHksIG1lcmdlIHRoZW0gdG9nZXRoZXJcbiAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xuICAgICAgICAgIGlkOiB1cGRhdGUuaWQsXG4gICAgICAgICAgLy8gU3ByZWFkcyBpZ25vcmUgZmFsc3kgdmFsdWVzLCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgdGhlcmUgaXNuJ3RcbiAgICAgICAgICAvLyBhbiBleGlzdGluZyB1cGRhdGUgYWxyZWFkeSBhdCB0aGlzIGtleVxuICAgICAgICAgIGNoYW5nZXM6IF9leHRlbmRzKHt9LCB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0gPyB1cGRhdGVzUGVyRW50aXR5W3VwZGF0ZS5pZF0uY2hhbmdlcyA6IG51bGwsIHt9LCB1cGRhdGUuY2hhbmdlcylcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVzID0gT2JqZWN0LnZhbHVlcyh1cGRhdGVzUGVyRW50aXR5KTtcbiAgICB2YXIgZGlkTXV0YXRlRW50aXRpZXMgPSB1cGRhdGVzLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcbiAgICAgIHZhciBkaWRNdXRhdGVJZHMgPSB1cGRhdGVzLmZpbHRlcihmdW5jdGlvbiAodXBkYXRlKSB7XG4gICAgICAgIHJldHVybiB0YWtlTmV3S2V5KG5ld0tleXMsIHVwZGF0ZSwgc3RhdGUpO1xuICAgICAgfSkubGVuZ3RoID4gMDtcblxuICAgICAgaWYgKGRpZE11dGF0ZUlkcykge1xuICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgIHJldHVybiBuZXdLZXlzW2lkXSB8fCBpZDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShlbnRpdGllcywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICAgIH1cblxuICAgIHZhciBhZGRlZCA9IFtdO1xuICAgIHZhciB1cGRhdGVkID0gW107XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gZW50aXRpZXMsIF9pc0FycmF5MiA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yMiksIF9pMiA9IDAsIF9pdGVyYXRvcjIgPSBfaXNBcnJheTIgPyBfaXRlcmF0b3IyIDogX2l0ZXJhdG9yMltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICBpZiAoX2lzQXJyYXkyKSB7XG4gICAgICAgIGlmIChfaTIgPj0gX2l0ZXJhdG9yMi5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmMiA9IF9pdGVyYXRvcjJbX2kyKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kyID0gX2l0ZXJhdG9yMi5uZXh0KCk7XG4gICAgICAgIGlmIChfaTIuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYyID0gX2kyLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW50aXR5ID0gX3JlZjI7XG4gICAgICB2YXIgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xuXG4gICAgICBpZiAoaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgdXBkYXRlZC5wdXNoKHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgY2hhbmdlczogZW50aXR5XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZWQsIHN0YXRlKTtcbiAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZW1vdmVBbGw6IGNyZWF0ZVNpbmdsZUFyZ3VtZW50U3RhdGVPcGVyYXRvcihyZW1vdmVBbGxNdXRhYmx5KSxcbiAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXG4gICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxuICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcbiAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcbiAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXG4gICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSksXG4gICAgcmVtb3ZlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU9uZU11dGFibHkpLFxuICAgIHJlbW92ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlTWFueU11dGFibHkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydCkge1xuICB2YXIgX2NyZWF0ZVVuc29ydGVkU3RhdGVBID0gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpLFxuICAgICAgcmVtb3ZlT25lID0gX2NyZWF0ZVVuc29ydGVkU3RhdGVBLnJlbW92ZU9uZSxcbiAgICAgIHJlbW92ZU1hbnkgPSBfY3JlYXRlVW5zb3J0ZWRTdGF0ZUEucmVtb3ZlTWFueSxcbiAgICAgIHJlbW92ZUFsbCA9IF9jcmVhdGVVbnNvcnRlZFN0YXRlQS5yZW1vdmVBbGw7XG5cbiAgZnVuY3Rpb24gYWRkT25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIGFkZE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRNYW55TXV0YWJseShuZXdNb2RlbHMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5ld01vZGVscykpIHtcbiAgICAgIG5ld01vZGVscyA9IE9iamVjdC52YWx1ZXMobmV3TW9kZWxzKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZWxzID0gbmV3TW9kZWxzLmZpbHRlcihmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgIHJldHVybiAhKHNlbGVjdElkVmFsdWUobW9kZWwsIHNlbGVjdElkKSBpbiBzdGF0ZS5lbnRpdGllcyk7XG4gICAgfSk7XG5cbiAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShtb2RlbHMsIHN0YXRlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZGVscykpIHtcbiAgICAgIG1vZGVscyA9IE9iamVjdC52YWx1ZXMobW9kZWxzKTtcbiAgICB9XG5cbiAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xuICAgIHN0YXRlLmlkcyA9IFtdO1xuICAgIGFkZE1hbnlNdXRhYmx5KG1vZGVscywgc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0YWtlVXBkYXRlZE1vZGVsKG1vZGVscywgdXBkYXRlLCBzdGF0ZSkge1xuICAgIGlmICghKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgb3JpZ2luYWwgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xuICAgIHZhciB1cGRhdGVkID0gT2JqZWN0LmFzc2lnbih7fSwgb3JpZ2luYWwsIHVwZGF0ZS5jaGFuZ2VzKTtcbiAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XG4gICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XG4gICAgbW9kZWxzLnB1c2godXBkYXRlZCk7XG4gICAgcmV0dXJuIG5ld0tleSAhPT0gdXBkYXRlLmlkO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcbiAgICB2YXIgbW9kZWxzID0gW107XG4gICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcbiAgICAgIHJldHVybiB0YWtlVXBkYXRlZE1vZGVsKG1vZGVscywgdXBkYXRlLCBzdGF0ZSk7XG4gICAgfSk7XG5cbiAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBzZXJ0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XG4gICAgcmV0dXJuIHVwc2VydE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cHNlcnRNYW55TXV0YWJseShlbnRpdGllcywgc3RhdGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xuICAgIH1cblxuICAgIHZhciBhZGRlZCA9IFtdO1xuICAgIHZhciB1cGRhdGVkID0gW107XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBlbnRpdGllcywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVudGl0eSA9IF9yZWY7XG4gICAgICB2YXIgaWQgPSBzZWxlY3RJZFZhbHVlKGVudGl0eSwgc2VsZWN0SWQpO1xuXG4gICAgICBpZiAoaWQgaW4gc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgdXBkYXRlZC5wdXNoKHtcbiAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgY2hhbmdlczogZW50aXR5XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZWQsIHN0YXRlKTtcbiAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXJlQXJyYXlzRXF1YWwoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoICYmIGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYVtpXSA9PT0gYltpXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2UobW9kZWxzLCBzdGF0ZSkge1xuICAgIG1vZGVscy5zb3J0KHNvcnQpOyAvLyBJbnNlcnQvb3ZlcndyaXRlIGFsbCBuZXcvdXBkYXRlZFxuXG4gICAgbW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKG1vZGVsKSB7XG4gICAgICBzdGF0ZS5lbnRpdGllc1tzZWxlY3RJZChtb2RlbCldID0gbW9kZWw7XG4gICAgfSk7XG4gICAgdmFyIGFsbEVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhzdGF0ZS5lbnRpdGllcyk7XG4gICAgYWxsRW50aXRpZXMuc29ydChzb3J0KTtcbiAgICB2YXIgbmV3U29ydGVkSWRzID0gYWxsRW50aXRpZXMubWFwKHNlbGVjdElkKTtcbiAgICB2YXIgaWRzID0gc3RhdGUuaWRzO1xuXG4gICAgaWYgKCFhcmVBcnJheXNFcXVhbChpZHMsIG5ld1NvcnRlZElkcykpIHtcbiAgICAgIHN0YXRlLmlkcyA9IG5ld1NvcnRlZElkcztcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlbW92ZU9uZTogcmVtb3ZlT25lLFxuICAgIHJlbW92ZU1hbnk6IHJlbW92ZU1hbnksXG4gICAgcmVtb3ZlQWxsOiByZW1vdmVBbGwsXG4gICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxuICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcbiAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXG4gICAgc2V0QWxsOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldEFsbE11dGFibHkpLFxuICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxuICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxuICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpXG4gIH07XG59XG5cbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9uc1xyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbnRpdHlBZGFwdGVyKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfc29ydENvbXBhcmVyJHNlbGVjdEkgPSBfZXh0ZW5kcyh7XG4gICAgc29ydENvbXBhcmVyOiBmYWxzZSxcbiAgICBzZWxlY3RJZDogZnVuY3Rpb24gc2VsZWN0SWQoaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5pZDtcbiAgICB9XG4gIH0sIG9wdGlvbnMpLFxuICAgICAgc2VsZWN0SWQgPSBfc29ydENvbXBhcmVyJHNlbGVjdEkuc2VsZWN0SWQsXG4gICAgICBzb3J0Q29tcGFyZXIgPSBfc29ydENvbXBhcmVyJHNlbGVjdEkuc29ydENvbXBhcmVyO1xuXG4gIHZhciBzdGF0ZUZhY3RvcnkgPSBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCk7XG4gIHZhciBzZWxlY3RvcnNGYWN0b3J5ID0gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpO1xuICB2YXIgc3RhdGVBZGFwdGVyID0gc29ydENvbXBhcmVyID8gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0Q29tcGFyZXIpIDogY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIHNlbGVjdElkOiBzZWxlY3RJZCxcbiAgICBzb3J0Q29tcGFyZXI6IHNvcnRDb21wYXJlclxuICB9LCBzdGF0ZUZhY3RvcnksIHt9LCBzZWxlY3RvcnNGYWN0b3J5LCB7fSwgc3RhdGVBZGFwdGVyKTtcbn1cblxuLy8gQSB0eXBlIG9mIHByb21pc2UtbGlrZSB0aGF0IHJlc29sdmVzIHN5bmNocm9ub3VzbHkgYW5kIHN1cHBvcnRzIG9ubHkgb25lIG9ic2VydmVyXG5cbmNvbnN0IF9pdGVyYXRvclN5bWJvbCA9IC8qI19fUFVSRV9fKi8gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiA/IChTeW1ib2wuaXRlcmF0b3IgfHwgKFN5bWJvbC5pdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5pdGVyYXRvclwiKSkpIDogXCJAQGl0ZXJhdG9yXCI7XG5cbmNvbnN0IF9hc3luY0l0ZXJhdG9yU3ltYm9sID0gLyojX19QVVJFX18qLyB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiID8gKFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IChTeW1ib2wuYXN5bmNJdGVyYXRvciA9IFN5bWJvbChcIlN5bWJvbC5hc3luY0l0ZXJhdG9yXCIpKSkgOiBcIkBAYXN5bmNJdGVyYXRvclwiO1xuXG4vLyBBc3luY2hyb25vdXNseSBjYWxsIGEgZnVuY3Rpb24gYW5kIHNlbmQgZXJyb3JzIHRvIHJlY292ZXJ5IGNvbnRpbnVhdGlvblxuZnVuY3Rpb24gX2NhdGNoKGJvZHksIHJlY292ZXIpIHtcblx0dHJ5IHtcblx0XHR2YXIgcmVzdWx0ID0gYm9keSgpO1xuXHR9IGNhdGNoKGUpIHtcblx0XHRyZXR1cm4gcmVjb3ZlcihlKTtcblx0fVxuXHRpZiAocmVzdWx0ICYmIHJlc3VsdC50aGVuKSB7XG5cdFx0cmV0dXJuIHJlc3VsdC50aGVuKHZvaWQgMCwgcmVjb3Zlcik7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gQm9ycm93ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWkvbmFub2lkL2Jsb2IvMy4wLjIvbm9uLXNlY3VyZS9pbmRleC5qc1xuLy8gVGhpcyBhbHBoYWJldCB1c2VzIGBBLVphLXowLTlfLWAgc3ltYm9scy4gQSBnZW5ldGljIGFsZ29yaXRobSBoZWxwZWRcbi8vIG9wdGltaXplIHRoZSBnemlwIGNvbXByZXNzaW9uIGZvciB0aGlzIGFscGhhYmV0LlxudmFyIHVybEFscGhhYmV0ID0gJ01vZHVsZVN5bWJoYXNPd25Qci0wMTIzNDU2Nzg5QUJDREVGR0hOUlZmZ2N0aVV2el9LcVlUSmtMeHBaWElqUVcnO1xuLyoqXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXG5cbnZhciBuYW5vaWQgPSBmdW5jdGlvbiBuYW5vaWQoc2l6ZSkge1xuICBpZiAoc2l6ZSA9PT0gdm9pZCAwKSB7XG4gICAgc2l6ZSA9IDIxO1xuICB9XG5cbiAgdmFyIGlkID0gJyc7IC8vIEEgY29tcGFjdCBhbHRlcm5hdGl2ZSBmb3IgYGZvciAodmFyIGkgPSAwOyBpIDwgc3RlcDsgaSsrKWAuXG5cbiAgdmFyIGkgPSBzaXplO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICAvLyBgfCAwYCBpcyBtb3JlIGNvbXBhY3QgYW5kIGZhc3RlciB0aGFuIGBNYXRoLmZsb29yKClgLlxuICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xuICB9XG5cbiAgcmV0dXJuIGlkO1xufTtcblxudmFyIGNvbW1vblByb3BlcnRpZXMgPSBbJ25hbWUnLCAnbWVzc2FnZScsICdzdGFjaycsICdjb2RlJ107XG5cbnZhciBSZWplY3RXaXRoVmFsdWUgPSBmdW5jdGlvbiBSZWplY3RXaXRoVmFsdWUodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xufTsgLy8gUmV3b3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3NlcmlhbGl6ZS1lcnJvclxuXG5cbnZhciBtaW5pU2VyaWFsaXplRXJyb3IgPSBmdW5jdGlvbiBtaW5pU2VyaWFsaXplRXJyb3IodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICB2YXIgc2ltcGxlRXJyb3IgPSB7fTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGNvbW1vblByb3BlcnRpZXMsIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IpLCBfaSA9IDAsIF9pdGVyYXRvciA9IF9pc0FycmF5ID8gX2l0ZXJhdG9yIDogX2l0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgaWYgKF9pc0FycmF5KSB7XG4gICAgICAgIGlmIChfaSA+PSBfaXRlcmF0b3IubGVuZ3RoKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pdGVyYXRvcltfaSsrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pID0gX2l0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKF9pLmRvbmUpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2kudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcm9wZXJ0eSA9IF9yZWY7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWVbcHJvcGVydHldID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaW1wbGVFcnJvcltwcm9wZXJ0eV0gPSB2YWx1ZVtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpbXBsZUVycm9yO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlOiBTdHJpbmcodmFsdWUpXG4gIH07XG59O1xuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB0eXBlUHJlZml4XHJcbiAqIEBwYXJhbSBwYXlsb2FkQ3JlYXRvclxyXG4gKiBAcGFyYW0gb3B0aW9uc1xyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1RodW5rKHR5cGVQcmVmaXgsIHBheWxvYWRDcmVhdG9yLCBvcHRpb25zKSB7XG4gIHZhciBmdWxmaWxsZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArICcvZnVsZmlsbGVkJywgZnVuY3Rpb24gKHJlc3VsdCwgcmVxdWVzdElkLCBhcmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF5bG9hZDogcmVzdWx0LFxuICAgICAgbWV0YToge1xuICAgICAgICBhcmc6IGFyZyxcbiAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWRcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgdmFyIHBlbmRpbmcgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArICcvcGVuZGluZycsIGZ1bmN0aW9uIChyZXF1ZXN0SWQsIGFyZykge1xuICAgIHJldHVybiB7XG4gICAgICBwYXlsb2FkOiB1bmRlZmluZWQsXG4gICAgICBtZXRhOiB7XG4gICAgICAgIGFyZzogYXJnLFxuICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZFxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICB2YXIgcmVqZWN0ZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArICcvcmVqZWN0ZWQnLCBmdW5jdGlvbiAoZXJyb3IsIHJlcXVlc3RJZCwgYXJnLCBwYXlsb2FkKSB7XG4gICAgdmFyIGFib3J0ZWQgPSAhIWVycm9yICYmIGVycm9yLm5hbWUgPT09ICdBYm9ydEVycm9yJztcbiAgICB2YXIgY29uZGl0aW9uID0gISFlcnJvciAmJiBlcnJvci5uYW1lID09PSAnQ29uZGl0aW9uRXJyb3InO1xuICAgIHJldHVybiB7XG4gICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgZXJyb3I6IG1pbmlTZXJpYWxpemVFcnJvcihlcnJvciB8fCAnUmVqZWN0ZWQnKSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgYXJnOiBhcmcsXG4gICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgICBhYm9ydGVkOiBhYm9ydGVkLFxuICAgICAgICBjb25kaXRpb246IGNvbmRpdGlvblxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICB2YXIgZGlzcGxheWVkV2FybmluZyA9IGZhbHNlO1xuICB2YXIgQUMgPSB0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSAndW5kZWZpbmVkJyA/IEFib3J0Q29udHJvbGxlciA6XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIF9jbGFzcygpIHtcbiAgICAgIHRoaXMuc2lnbmFsID0ge1xuICAgICAgICBhYm9ydGVkOiBmYWxzZSxcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICAgICAgICBkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbiBkaXNwYXRjaEV2ZW50KCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgb25hYm9ydDogZnVuY3Rpb24gb25hYm9ydCgpIHt9LFxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKCkge31cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IF9jbGFzcy5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uYWJvcnQgPSBmdW5jdGlvbiBhYm9ydCgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICghZGlzcGxheWVkV2FybmluZykge1xuICAgICAgICAgIGRpc3BsYXllZFdhcm5pbmcgPSB0cnVlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbyhcIlRoaXMgcGxhdGZvcm0gZG9lcyBub3QgaW1wbGVtZW50IEFib3J0Q29udHJvbGxlci4gXFxuSWYgeW91IHdhbnQgdG8gdXNlIHRoZSBBYm9ydENvbnRyb2xsZXIgdG8gcmVhY3QgdG8gYGFib3J0YCBldmVudHMsIHBsZWFzZSBjb25zaWRlciBpbXBvcnRpbmcgYSBwb2x5ZmlsbCBsaWtlICdhYm9ydGNvbnRyb2xsZXItcG9seWZpbGwvZGlzdC9hYm9ydGNvbnRyb2xsZXItcG9seWZpbGwtb25seScuXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBfY2xhc3M7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBhY3Rpb25DcmVhdG9yKGFyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYSkge1xuICAgICAgdmFyIHJlcXVlc3RJZCA9IG5hbm9pZCgpO1xuICAgICAgdmFyIGFib3J0Q29udHJvbGxlciA9IG5ldyBBQygpO1xuICAgICAgdmFyIGFib3J0UmVhc29uO1xuICAgICAgdmFyIGFib3J0ZWRQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xuICAgICAgICByZXR1cm4gYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KHtcbiAgICAgICAgICAgIG5hbWU6ICdBYm9ydEVycm9yJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGFib3J0UmVhc29uIHx8ICdBYm9ydGVkJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgdmFyIHN0YXJ0ZWQgPSBmYWxzZTtcblxuICAgICAgZnVuY3Rpb24gYWJvcnQocmVhc29uKSB7XG4gICAgICAgIGlmIChzdGFydGVkKSB7XG4gICAgICAgICAgYWJvcnRSZWFzb24gPSByZWFzb247XG4gICAgICAgICAgYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHByb21pc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIF90ZW1wMyA9IGZ1bmN0aW9uIF90ZW1wMyhfcmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoX2V4aXQyKSByZXR1cm4gX3Jlc3VsdDtcbiAgICAgICAgICAgIC8vIFdlIGRpc3BhdGNoIHRoZSByZXN1bHQgYWN0aW9uIF9hZnRlcl8gdGhlIGNhdGNoLCB0byBhdm9pZCBoYXZpbmcgYW55IGVycm9yc1xuICAgICAgICAgICAgLy8gaGVyZSBnZXQgc3dhbGxvd2VkIGJ5IHRoZSB0cnkvY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgICAvLyBwZXIgaHR0cHM6Ly90d2l0dGVyLmNvbS9kYW5fYWJyYW1vdi9zdGF0dXMvNzcwOTE0MjIxNjM4OTQyNzIwXG4gICAgICAgICAgICAvLyBhbmQgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy90dXRvcmlhbHMvYWR2YW5jZWQtdHV0b3JpYWwjYXN5bmMtZXJyb3ItaGFuZGxpbmctbG9naWMtaW4tdGh1bmtzXG4gICAgICAgICAgICB2YXIgc2tpcERpc3BhdGNoID0gb3B0aW9ucyAmJiAhb3B0aW9ucy5kaXNwYXRjaENvbmRpdGlvblJlamVjdGlvbiAmJiByZWplY3RlZC5tYXRjaChmaW5hbEFjdGlvbikgJiYgZmluYWxBY3Rpb24ubWV0YS5jb25kaXRpb247XG5cbiAgICAgICAgICAgIGlmICghc2tpcERpc3BhdGNoKSB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKGZpbmFsQWN0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZpbmFsQWN0aW9uO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICB2YXIgX2V4aXQyID0gZmFsc2U7XG4gICAgICAgICAgdmFyIGZpbmFsQWN0aW9uO1xuXG4gICAgICAgICAgdmFyIF90ZW1wNCA9IF9jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNvbmRpdGlvbiAmJiBvcHRpb25zLmNvbmRpdGlvbihhcmcsIHtcbiAgICAgICAgICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgICAgICAgICAgICBleHRyYTogZXh0cmFcbiAgICAgICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICAgICAgICAgICAgICB0aHJvdyB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ0NvbmRpdGlvbkVycm9yJyxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnQWJvcnRlZCBkdWUgdG8gY29uZGl0aW9uIGNhbGxiYWNrIHJldHVybmluZyBmYWxzZS4nXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgZGlzcGF0Y2gocGVuZGluZyhyZXF1ZXN0SWQsIGFyZykpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShQcm9taXNlLnJhY2UoW2Fib3J0ZWRQcm9taXNlLCBQcm9taXNlLnJlc29sdmUocGF5bG9hZENyZWF0b3IoYXJnLCB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICAgICAgICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxuICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXG4gICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gICAgICAgICAgICAgIHJlamVjdFdpdGhWYWx1ZTogZnVuY3Rpb24gcmVqZWN0V2l0aFZhbHVlKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWplY3RXaXRoVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBSZWplY3RXaXRoVmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0ZWQobnVsbCwgcmVxdWVzdElkLCBhcmcsIHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gZnVsZmlsbGVkKHJlc3VsdCwgcmVxdWVzdElkLCBhcmcpO1xuICAgICAgICAgICAgfSldKSkudGhlbihmdW5jdGlvbiAoX1Byb21pc2UkcmFjZSkge1xuICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IF9Qcm9taXNlJHJhY2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBmaW5hbEFjdGlvbiA9IHJlamVjdGVkKGVyciwgcmVxdWVzdElkLCBhcmcpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShfdGVtcDQgJiYgX3RlbXA0LnRoZW4gPyBfdGVtcDQudGhlbihfdGVtcDMpIDogX3RlbXAzKF90ZW1wNCkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgICB9KCk7XG5cbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb21pc2UsIHtcbiAgICAgICAgYWJvcnQ6IGFib3J0XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWN0aW9uQ3JlYXRvciwge1xuICAgIHBlbmRpbmc6IHBlbmRpbmcsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHR5cGVQcmVmaXg6IHR5cGVQcmVmaXhcbiAgfSk7XG59XG4vKipcclxuICogQHB1YmxpY1xyXG4gKi9cblxuZnVuY3Rpb24gdW53cmFwUmVzdWx0KHJldHVybmVkKSB7XG4gIGlmICgnZXJyb3InIGluIHJldHVybmVkKSB7XG4gICAgdGhyb3cgcmV0dXJuZWQuZXJyb3I7XG4gIH1cblxuICByZXR1cm4gcmV0dXJuZWQucGF5bG9hZDtcbn1cblxuLy8gd2UgYXNzdW1lIFJUSyB3aWxsIGJlIHVzZWQgd2l0aCBSZWFjdCBOYXRpdmUgYW5kIG90aGVyIFByb3h5LWxlc3Ncbi8vIGVudmlyb25tZW50cy4gIEluIGFkZGl0aW9uLCB0aGF0J3MgaG93IEltbWVyIDQgYmVoYXZlZCwgYW5kIHNpbmNlXG4vLyB3ZSB3YW50IHRvIHNoaXAgdGhpcyBpbiBhbiBSVEsgbWlub3IsIHdlIHNob3VsZCBrZWVwIHRoZSBzYW1lIGJlaGF2aW9yLlxuXG5lbmFibGVFUzUoKTtcblxuZXhwb3J0IHsgTWlkZGxld2FyZUFycmF5LCBjb25maWd1cmVTdG9yZSwgY3JlYXRlQWN0aW9uLCBjcmVhdGVBc3luY1RodW5rLCBjcmVhdGVFbnRpdHlBZGFwdGVyLCBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUsIGNyZWF0ZVJlZHVjZXIsIGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSwgY3JlYXRlU2xpY2UsIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSwgZ2V0RGVmYXVsdE1pZGRsZXdhcmUsIGdldFR5cGUsIGlzSW1tdXRhYmxlRGVmYXVsdCwgaXNQbGFpbiwgbmFub2lkLCB1bndyYXBSZXN1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4LXRvb2xraXQuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IFN3YWwgZnJvbSAnc3dlZXRhbGVydDInO1xuXG5leHBvcnQgY29uc3QgcG9wdXBNZXNzYWdlcyA9IHtcbiAgYXN5bmMgZmFpbChtZXNzYWdlKSB7XG4gICAgYXdhaXQgU3dhbC5maXJlKHsgaWNvbjogJ2Vycm9yJywgdGV4dDogbWVzc2FnZSB9KTtcbiAgfSxcbiAgYXN5bmMgc3VjY2VzcyhtZXNzYWdlKSB7XG4gICAgYXdhaXQgU3dhbC5maXJlKHsgaWNvbjogJ3N1Y2Nlc3MnLCB0ZXh0OiBtZXNzYWdlLCB0aW1lcjogMTAwMCB9KTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0VGFnU3RyaW5nVG9UYWdzID0gKHRhZ1N0cmluZykgPT4gdGFnU3RyaW5nLnNwbGl0KCcjJykubWFwKCh0YWcpID0+IHRhZy50cmltKCkpLmZpbHRlcigodikgPT4gdik7XG5leHBvcnQgY29uc3QgY29udmVydFRhZ3NUb1RhZ1N0cmluZyA9ICh0YWdzKSA9PiB0YWdzLm1hcCgodGFnKSA9PiBgIyR7dGFnfWApLmpvaW4oJyAnKTtcbiIsImV4cG9ydCBjb25zdCB1dGlsRnVuY3Rpb25zID0ge1xuICBnZXRDdXJyZW50RGF0ZSgpIHtcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG5cbiAgICBjb25zdCB5ZWFyID0gdG9kYXkuZ2V0RnVsbFllYXIoKTtcbiAgICBjb25zdCBtb250aCA9ICh0b2RheS5nZXRNb250aCgpICsgMSk7XG4gICAgY29uc3QgZGF5ID0gdG9kYXkuZ2V0RGF0ZSgpO1xuXG4gICAgcmV0dXJuIGAke3llYXJ9LSR7bW9udGh9LSR7ZGF5fWA7XG4gIH0sXG5cbiAgZ2V0VG90YWxEYXkoZGF0ZSkge1xuICAgIGNvbnN0IFt5ZWFyLCBtb250aCwgZGF5XSA9IGRhdGUuc3BsaXQoJy0nKS5tYXAoKHYpID0+IE51bWJlcih2KSk7XG5cbiAgICByZXR1cm4gKHllYXIgKiAxMiAqIDMwKSArIChtb250aCAqIDMwKSArIGRheTtcbiAgfSxcbn07XG5cbmNvbnN0IGxheWVyTGltaXRNYXAgPSB7XG4gIDE6IDEsXG4gIDI6IDMsXG4gIDM6IDcsXG4gIDQ6IDE1LFxuICA1OiAzMCxcbiAgNjogNjAsXG4gIDc6IDEyMCxcbn07XG5cbmNvbnN0IGZpbHRlclRvZGF5c1F1aXogPSAocXVpenplcykgPT4ge1xuICBjb25zdCBjdXJyZW50RGF0ZSA9IHV0aWxGdW5jdGlvbnMuZ2V0Q3VycmVudERhdGUoKTtcbiAgY29uc3QgY3VycmVudFRvdGFsRGF5ID0gdXRpbEZ1bmN0aW9ucy5nZXRUb3RhbERheShjdXJyZW50RGF0ZSk7XG5cbiAgcmV0dXJuIHF1aXp6ZXMuZmlsdGVyKChxdWl6KSA9PiB7XG4gICAgY29uc3QgeyBsYXllcjogcXVpekxheWVyLCBsYXN0U29sdmVkIH0gPSBxdWl6O1xuICAgIGNvbnN0IGxhc3RTb2x2ZWRUb3RhbERheSA9IHV0aWxGdW5jdGlvbnMuZ2V0VG90YWxEYXkobGFzdFNvbHZlZCk7XG4gICAgY29uc3QgZGF0ZURpZmZlcmVuY2UgPSBjdXJyZW50VG90YWxEYXkgLSBsYXN0U29sdmVkVG90YWxEYXk7XG5cbiAgICBjb25zdCBiYXNlTGF5ZXJzID0gWzEsIDIsIDMsIDQsIDUsIDYsIDddO1xuICAgIHJldHVybiBiYXNlTGF5ZXJzLnNvbWUoKGJhc2VMYXllcikgPT4ge1xuICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IHF1aXpMYXllciA8PSBiYXNlTGF5ZXIgJiYgZGF0ZURpZmZlcmVuY2UgPj0gbGF5ZXJMaW1pdE1hcFtiYXNlTGF5ZXJdO1xuICAgICAgcmV0dXJuIHZhbGlkYXRpb247XG4gICAgfSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZmlsdGVyVG9kYXlzUXVpejtcbiIsImV4cG9ydCBjb25zdCBVUkwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwJztcbi8vIGV4cG9ydCBjb25zdCBVUkwgPSAnaHR0cHM6Ly9zZWxmLXF1aXouaGVyb2t1YXBwLmNvbSc7XG5cbi8vIFRPRE86IOygnOqxsFxuY29uc3QgeHh4ID0gJ3h4eCc7XG5leHBvcnQgZGVmYXVsdCB4eHg7XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5pbXBvcnQgeyBVUkwgfSBmcm9tICcuLi9jb25maWcnO1xuXG5jb25zdCBnZXRIZWFkZXJzID0gKCkgPT4gKHtcbiAgaGVhZGVyczoge1xuICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKX1gLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXN5bmMgbG9naW4odXNlcklkLCB1c2VyUHcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5wb3N0KGAke1VSTH0vYXV0aC9sb2dpbmAsIHsgdXNlcklkLCB1c2VyUHcgfSk7XG4gICAgICBjb25zdCB7IHRva2VuIH0gPSBkYXRhO1xuXG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcblxuICBhc3luYyBnZXRVc2VyTmFtZSgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCBheGlvcy5nZXQoYCR7VVJMfS9hdXRoYCwgZ2V0SGVhZGVycygpKTtcbiAgICAgIGNvbnN0IHsgdXNlcjogdXNlck5hbWUgfSA9IGRhdGE7XG5cbiAgICAgIHJldHVybiB1c2VyTmFtZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LFxuXG4gIGFzeW5jIGFkZFF1aXoocXVlc3Rpb24sIGFuc3dlciwgdGFncykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBib2R5ID0geyBxdWVzdGlvbiwgYW5zd2VyLCB0YWdzIH07XG4gICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLnBvc3QoYCR7VVJMfS9xdWl6YCwgYm9keSwgZ2V0SGVhZGVycygpKTtcbiAgICAgIGNvbnN0IHsgbmV3UXVpeiB9ID0gZGF0YTtcblxuICAgICAgcmV0dXJuIG5ld1F1aXo7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcblxuICBhc3luYyBnZXRRdWl6emVzKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLmdldChgJHtVUkx9L3F1aXpgLCBnZXRIZWFkZXJzKCkpO1xuICAgICAgY29uc3QgeyBxdWl6emVzIH0gPSBkYXRhO1xuXG4gICAgICByZXR1cm4gcXVpenplcztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSxcblxuICBhc3luYyBlZGl0UXVpeihxdWl6SWQsIHF1ZXN0aW9uLCBhbnN3ZXIsIHRhZ3MpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgcXVpeklkLCBxdWVzdGlvbiwgYW5zd2VyLCB0YWdzLFxuICAgICAgfTtcbiAgICAgIGF3YWl0IGF4aW9zLnBhdGNoKGAke1VSTH0vcXVpei9lZGl0YCwgYm9keSwgZ2V0SGVhZGVycygpKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgYXN5bmMgZGVsZXRlUXVpeihxdWl6SWQpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgYXhpb3MuZGVsZXRlKGAke1VSTH0vcXVpei8ke3F1aXpJZH1gLCBnZXRIZWFkZXJzKCkpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcblxuICBhc3luYyBwYXNzUXVpeihxdWl6SWQpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgYXhpb3MucGF0Y2goYCR7VVJMfS9xdWl6L3Bhc3NgLCB7IHF1aXpJZCB9LCBnZXRIZWFkZXJzKCkpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcblxuICBhc3luYyBmYWlsUXVpeihxdWl6SWQpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgYXhpb3MucGF0Y2goYCR7VVJMfS9xdWl6L2ZhaWxgLCB7IHF1aXpJZCB9LCBnZXRIZWFkZXJzKCkpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBjcmVhdGVTbGljZSB9IGZyb20gJ0ByZWR1eGpzL3Rvb2xraXQnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VGFnU3RyaW5nVG9UYWdzIH0gZnJvbSAnLi91dGlsJztcblxuaW1wb3J0IGZpbHRlclRvZGF5c1F1aXogZnJvbSAnLi9hbGdvcml0aG0nO1xuXG5pbXBvcnQgYXBpIGZyb20gJy4vYXBpcy9hcGknO1xuXG5leHBvcnQgY29uc3QgeyByZWR1Y2VyLCBhY3Rpb25zIH0gPSBjcmVhdGVTbGljZSh7XG4gIG5hbWU6ICdzZWxmLXF1aXonLFxuICBpbml0aWFsU3RhdGU6IHtcbiAgICB1c2VyOiB7XG4gICAgICBuYW1lOiAnJyxcbiAgICB9LFxuICAgIGxvZ2luOiB7XG4gICAgICBpZDogJycsXG4gICAgICBwdzogJycsXG4gICAgfSxcbiAgICB0b2tlbjogbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJyksXG4gICAgcXVpenplczogW10sXG4gICAgcXVpekZvcm06IHtcbiAgICAgIHF1ZXN0aW9uOiAnJyxcbiAgICAgIGFuc3dlcjogJycsXG4gICAgICB0YWdTdHJpbmc6ICcnLFxuICAgIH0sXG4gICAgbW9kYWw6IHtcbiAgICAgIG92ZXJsYXk6IGZhbHNlLFxuICAgICAgYWRkaW5nOiBmYWxzZSxcbiAgICAgIGFyY2hpdmU6IHt9LFxuICAgICAgZWRpdHRpbmc6IGZhbHNlLFxuICAgICAgdG9kYXlzOiBmYWxzZSxcbiAgICB9LFxuICAgIHRvZGF5czoge1xuICAgICAgYW5zd2VyT246IGZhbHNlLFxuICAgICAgcXVpenplczogW10sXG4gICAgfSxcbiAgfSxcbiAgcmVkdWNlcnM6IHtcbiAgICBzZXRVc2VyTmFtZShzdGF0ZSwgeyBwYXlsb2FkIH0pIHtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB1c2VyOiB7IC4uLnN0YXRlLnVzZXIsIG5hbWU6IHBheWxvYWQgfSB9O1xuICAgIH0sXG4gICAgc2V0TG9naW5JZChzdGF0ZSwgeyBwYXlsb2FkIH0pIHtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBsb2dpbjogeyAuLi5zdGF0ZS5sb2dpbiwgaWQ6IHBheWxvYWQgfSB9O1xuICAgIH0sXG4gICAgc2V0TG9naW5QdyhzdGF0ZSwgeyBwYXlsb2FkIH0pIHtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBsb2dpbjogeyAuLi5zdGF0ZS5sb2dpbiwgcHc6IHBheWxvYWQgfSB9O1xuICAgIH0sXG4gICAgc2V0VG9rZW4oc3RhdGUsIHsgcGF5bG9hZCB9KSB7XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdG9rZW46IHBheWxvYWQgfTtcbiAgICB9LFxuICAgIHNldFF1aXp6ZXMoc3RhdGUsIHsgcGF5bG9hZCB9KSB7XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgcXVpenplczogcGF5bG9hZCB9O1xuICAgIH0sXG4gICAgYWRkUXVpeihzdGF0ZSwgeyBwYXlsb2FkIH0pIHtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBxdWl6emVzOiBbLi4uc3RhdGUucXVpenplcywgcGF5bG9hZF0gfTtcbiAgICB9LFxuICAgIHJlbW92ZVF1aXooc3RhdGUsIHsgcGF5bG9hZDogX2lkIH0pIHtcbiAgICAgIGNvbnN0IGZpbHRlcmVkUXVpenplcyA9IHN0YXRlLnF1aXp6ZXMuZmlsdGVyKChxdWl6KSA9PiBxdWl6Ll9pZCAhPT0gX2lkKTtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBxdWl6emVzOiBmaWx0ZXJlZFF1aXp6ZXMgfTtcbiAgICB9LFxuICAgIGVkaXRRdWl6KHN0YXRlLCB7IHBheWxvYWQgfSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBfaWQsIHF1ZXN0aW9uLCBhbnN3ZXIsIHRhZ1N0cmluZyxcbiAgICAgIH0gPSBwYXlsb2FkO1xuICAgICAgY29uc3QgdGFncyA9IGNvbnZlcnRUYWdTdHJpbmdUb1RhZ3ModGFnU3RyaW5nKTtcblxuICAgICAgY29uc3QgaW5kZXggPSBzdGF0ZS5xdWl6emVzLmZpbmRJbmRleCgocXVpeikgPT4gcXVpei5faWQgPT09IF9pZCk7XG4gICAgICBjb25zdCBjb3B5ID0gWy4uLnN0YXRlLnF1aXp6ZXNdO1xuXG4gICAgICBjb3B5W2luZGV4XSA9IHtcbiAgICAgICAgLi4uY29weVtpbmRleF0sIHF1ZXN0aW9uLCBhbnN3ZXIsIHRhZ3MsXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgcXVpenplczogY29weSB9O1xuICAgIH0sXG4gICAgc2V0UXVpekZvcm0oc3RhdGUsIHsgcGF5bG9hZCB9KSB7XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgcXVpekZvcm06IHsgLi4uc3RhdGUucXVpekZvcm0sIC4uLnBheWxvYWQgfSB9O1xuICAgIH0sXG4gICAgc2V0T3ZlcmxheShzdGF0ZSwgeyBwYXlsb2FkIH0pIHtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBtb2RhbDogeyAuLi5zdGF0ZS5tb2RhbCwgb3ZlcmxheTogcGF5bG9hZCB9IH07XG4gICAgfSxcbiAgICBzZXRBZGRpbmdNb2RhbChzdGF0ZSwgeyBwYXlsb2FkIH0pIHtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBtb2RhbDogeyAuLi5zdGF0ZS5tb2RhbCwgYWRkaW5nOiBwYXlsb2FkIH0gfTtcbiAgICB9LFxuICAgIHJlc2V0UXVpekZvcm0oc3RhdGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBxdWl6Rm9ybToge1xuICAgICAgICAgIC4uLnN0YXRlLnF1aXpGb3JtLFxuICAgICAgICAgIHF1ZXN0aW9uOiAnJyxcbiAgICAgICAgICBhbnN3ZXI6ICcnLFxuICAgICAgICAgIHRhZ1N0cmluZzogJycsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG4gICAgc2V0QXJjaGl2ZVF1aXpNb2RhbChzdGF0ZSwgeyBwYXlsb2FkIH0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBtb2RhbDoge1xuICAgICAgICAgIC4uLnN0YXRlLm1vZGFsLFxuICAgICAgICAgIGFyY2hpdmU6IHsgLi4ucGF5bG9hZCB9LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICAgIHNldEVkaXR0aW5nTW9kYWwoc3RhdGUsIHsgcGF5bG9hZCB9KSB7XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbW9kYWw6IHsgLi4uc3RhdGUubW9kYWwsIGVkaXR0aW5nOiBwYXlsb2FkIH0gfTtcbiAgICB9LFxuICAgIGNsb3NlQWxsTW9kYWwoc3RhdGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBtb2RhbDoge1xuICAgICAgICAgIC4uLnN0YXRlLm1vZGFsLFxuICAgICAgICAgIGFyY2hpdmU6IHt9LFxuICAgICAgICAgIGFkZGluZzogZmFsc2UsXG4gICAgICAgICAgb3ZlcmxheTogZmFsc2UsXG4gICAgICAgICAgZWRpdHRpbmc6IGZhbHNlLFxuICAgICAgICAgIHRvZGF5czogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIHF1aXpGb3JtOiB7XG4gICAgICAgICAgLi4uc3RhdGUucXVpekZvcm0sXG4gICAgICAgICAgcXVlc3Rpb246ICcnLFxuICAgICAgICAgIGFuc3dlcjogJycsXG4gICAgICAgICAgdGFnU3RyaW5nOiAnJyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZXRUb2RheXNRdWl6TW9kYWwoc3RhdGUsIHsgcGF5bG9hZCB9KSB7XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgbW9kYWw6IHsgLi4uc3RhdGUubW9kYWwsIHRvZGF5czogcGF5bG9hZCB9IH07XG4gICAgfSxcbiAgICBzZXRUb2RheXNBbnN3ZXJPbihzdGF0ZSwgeyBwYXlsb2FkIH0pIHtcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB0b2RheXM6IHsgLi4uc3RhdGUudG9kYXlzLCBhbnN3ZXJPbjogcGF5bG9hZCB9IH07XG4gICAgfSxcbiAgICBzZXRUb2RheXNRdWl6emVzKHN0YXRlLCB7IHBheWxvYWQgfSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRvZGF5czoge1xuICAgICAgICAgIC4uLnN0YXRlLnRvZGF5cyxcbiAgICAgICAgICBxdWl6emVzOiBbLi4ucGF5bG9hZF0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG4gICAgcmVtb3ZlVG9kYXlzUXVpeihzdGF0ZSwgeyBwYXlsb2FkOiBxdWl6SWQgfSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRvZGF5czoge1xuICAgICAgICAgIC4uLnN0YXRlLnRvZGF5cyxcbiAgICAgICAgICBxdWl6emVzOiBzdGF0ZS50b2RheXMucXVpenplcy5maWx0ZXIoKHF1aXopID0+IHF1aXouX2lkICE9PSBxdWl6SWQpLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCB7XG4gIHNldFVzZXJOYW1lLFxuICBzZXRMb2dpbklkLFxuICBzZXRMb2dpblB3LFxuICBzZXRUb2tlbixcbiAgc2V0UXVpenplcyxcbiAgYWRkUXVpeixcbiAgcmVtb3ZlUXVpeixcbiAgZWRpdFF1aXosXG4gIHNldFF1aXpGb3JtLFxuICBzZXRPdmVybGF5LFxuICBzZXRBZGRpbmdNb2RhbCxcbiAgcmVzZXRRdWl6Rm9ybSxcbiAgc2V0QXJjaGl2ZVF1aXpNb2RhbCxcbiAgc2V0RWRpdHRpbmdNb2RhbCxcbiAgY2xvc2VBbGxNb2RhbCxcbiAgc2V0VG9kYXlzUXVpek1vZGFsLFxuICBzZXRUb2RheXNBbnN3ZXJPbixcbiAgc2V0VG9kYXlzUXVpenplcyxcbiAgcmVtb3ZlVG9kYXlzUXVpeixcbn0gPSBhY3Rpb25zO1xuXG5leHBvcnQgY29uc3QgbG9hZFF1aXp6ZXMgPSAoKSA9PiBhc3luYyAoZGlzcGF0Y2gpID0+IHtcbiAgY29uc3QgcXVpenplcyA9IGF3YWl0IGFwaS5nZXRRdWl6emVzKCk7XG5cbiAgZGlzcGF0Y2goc2V0UXVpenplcyhxdWl6emVzKSk7XG4gIGRpc3BhdGNoKHNldFRvZGF5c1F1aXp6ZXMoZmlsdGVyVG9kYXlzUXVpeihxdWl6emVzKSkpO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvYWRVc2VyTmFtZSA9ICgpID0+IGFzeW5jIChkaXNwYXRjaCkgPT4ge1xuICBjb25zdCB1c2VyTmFtZSA9IGF3YWl0IGFwaS5nZXRVc2VyTmFtZSgpO1xuICBkaXNwYXRjaChzZXRVc2VyTmFtZSh1c2VyTmFtZSkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVkdWNlcjtcbiIsImltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlIH0gZnJvbSAnQHJlZHV4anMvdG9vbGtpdCc7XG5pbXBvcnQgc2VsZlF1aXpSZWR1Y2VyIGZyb20gJy4vc2xpY2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjb25maWd1cmVTdG9yZSh7XG4gIHJlZHVjZXI6IHtcbiAgICBzZWxmUXVpelJlZHVjZXIsXG4gIH0sXG59KTtcbiIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGNyZWF0ZUNvbnRleHQgZnJvbSAnbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3RpbnktaW52YXJpYW50JztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkQ29udGV4dChuYW1lKSB7XG4gIHZhciBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG52YXIgaGlzdG9yeUNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyLUhpc3RvcnlcIik7XG5cbi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcblxudmFyIGNyZWF0ZU5hbWVkQ29udGV4dCQxID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBjb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dCQxKFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCh0aGlzLnN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKSxcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5zdGF0aWNDb250ZXh0XG4gICAgICB9XG4gICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgaW5pdGlhbEVudHJpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIExpZmVjeWNsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShMaWZlY3ljbGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGlmZWN5Y2xlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlKSB0aGlzLnByb3BzLm9uVXBkYXRlLmNhbGwodGhpcywgdGhpcywgcHJldlByb3BzKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTGlmZWN5Y2xlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheSBmcm9tIGEgc2NyZWVuLlxuICovXG5cbmZ1bmN0aW9uIFByb21wdChfcmVmKSB7XG4gIHZhciBtZXNzYWdlID0gX3JlZi5tZXNzYWdlLFxuICAgICAgX3JlZiR3aGVuID0gX3JlZi53aGVuLFxuICAgICAgd2hlbiA9IF9yZWYkd2hlbiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkd2hlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIXdoZW4gfHwgY29udGV4dC5zdGF0aWNDb250ZXh0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWV0aG9kID0gY29udGV4dC5oaXN0b3J5LmJsb2NrO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3RvcnksXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBjb250ZXh0LnN0YXRpY0NvbnRleHQ7XG4gICAgdmFyIG1ldGhvZCA9IHB1c2ggPyBoaXN0b3J5LnB1c2ggOiBoaXN0b3J5LnJlcGxhY2U7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29tcHV0ZWRNYXRjaCA/IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGdlbmVyYXRlUGF0aCh0bywgY29tcHV0ZWRNYXRjaC5wYXJhbXMpIDogX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICBwYXRobmFtZTogZ2VuZXJhdGVQYXRoKHRvLnBhdGhuYW1lLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICB9KSA6IHRvKTsgLy8gV2hlbiByZW5kZXJpbmcgaW4gYSBzdGF0aWMgY29udGV4dCxcbiAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cblxuICAgIGlmIChzdGF0aWNDb250ZXh0KSB7XG4gICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KCkge1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG5cbiAgICAgICAgaWYgKCFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgICAgICAgIGtleTogcHJldkxvY2F0aW9uLmtleVxuICAgICAgICB9KSkpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG86IHRvXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUkMSA9IHt9O1xudmFyIGNhY2hlTGltaXQkMSA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQkMSA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoJDEocGF0aCwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgcGF0aENhY2hlID0gY2FjaGUkMVtjYWNoZUtleV0gfHwgKGNhY2hlJDFbY2FjaGVLZXldID0ge30pO1xuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHJlZ2V4cDogcmVnZXhwLFxuICAgIGtleXM6IGtleXNcbiAgfTtcblxuICBpZiAoY2FjaGVDb3VudCQxIDwgY2FjaGVMaW1pdCQxKSB7XG4gICAgcGF0aENhY2hlW3BhdGhdID0gcmVzdWx0O1xuICAgIGNhY2hlQ291bnQkMSsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoLlxuICovXG5cblxuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBwYXRoOiBvcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG4gIHZhciBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcbiAgcmV0dXJuIHBhdGhzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlZCwgcGF0aCkge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICB2YXIgX2NvbXBpbGVQYXRoID0gY29tcGlsZVBhdGgkMShwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZVxuICAgIH0pLFxuICAgICAgICByZWdleHAgPSBfY29tcGlsZVBhdGgucmVnZXhwLFxuICAgICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgICB2YXIgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgICB2YWx1ZXMgPSBtYXRjaC5zbGljZSgxKTtcbiAgICB2YXIgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG4gICAgaWYgKGV4YWN0ICYmICFpc0V4YWN0KSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsXG4gICAgICAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgICAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG1lbW8sIGtleSwgaW5kZXgpIHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICB2YXIgdmFsdWUgPSBjaGlsZHJlbihwcm9wcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodmFsdWUgIT09IHVuZGVmaW5lZCwgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArIChcIjxSb3V0ZVwiICsgKHBhdGggPyBcIiBwYXRoPVxcXCJcIiArIHBhdGggKyBcIlxcXCJcIiA6IFwiXCIpICsgXCI+LCBidXQgeW91IFwiKSArIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxuXG52YXIgUm91dGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb3BzXG4gICAgICB9LCBwcm9wcy5tYXRjaCA/IGNoaWxkcmVuID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IGNoaWxkcmVuIDogY29tcG9uZW50ID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhpc3Rvcnk6IGhpc3RvcnksXG4gICAgICBzdGF0aWNDb250ZXh0OiBjb250ZXh0XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBTdGF0aWNSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICByZXR1cm4gX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3dpdGNoLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxTd2l0Y2g+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgdmFyIGVsZW1lbnQsIG1hdGNoOyAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAvLyB0byB0cmlnZ2VyIGFuIHVubW91bnQvcmVtb3VudCBmb3IgdHdvIDxSb3V0ZT5zIHRoYXQgcmVuZGVyIHRoZSBzYW1lXG4gICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG5cbiAgICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goX3RoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChlbGVtZW50LCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgY29tcHV0ZWRNYXRjaDogbWF0Y2hcbiAgICAgIH0pIDogbnVsbDtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG5cbmZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IFwid2l0aFJvdXRlcihcIiArIChDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUpICsgXCIpXCI7XG5cbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBbXCJ3cmFwcGVkQ29tcG9uZW50UmVmXCJdKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFwiICsgZGlzcGxheU5hbWUgKyBcIiAvPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEJyb3dzZXJSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyXG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIYXNoSGlzdG9yeShfdGhpcy5wcm9wcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEhhc2hSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIYXNoUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBoYXNoVHlwZTogUHJvcFR5cGVzLm9uZU9mKFtcImhhc2hiYW5nXCIsIFwibm9zbGFzaFwiLCBcInNsYXNoXCJdKVxuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIHJlc29sdmVUb0xvY2F0aW9uID0gZnVuY3Rpb24gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcImZ1bmN0aW9uXCIgPyB0byhjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xudmFyIG5vcm1hbGl6ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiBub3JtYWxpemVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pIDogdG87XG59O1xuXG52YXIgZm9yd2FyZFJlZlNoaW0gPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiA9IGZvcndhcmRSZWZTaGltO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG52YXIgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgbmF2aWdhdGUgPSBfcmVmLm5hdmlnYXRlLFxuICAgICAgX29uQ2xpY2sgPSBfcmVmLm9uQ2xpY2ssXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiaW5uZXJSZWZcIiwgXCJuYXZpZ2F0ZVwiLCBcIm9uQ2xpY2tcIl0pO1xuXG4gIHZhciB0YXJnZXQgPSByZXN0LnRhcmdldDtcblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChfb25DbGljaykgX29uQ2xpY2soZXZlbnQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhyb3cgZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBpZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gIH1cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuXG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeTtcbiAgICB2YXIgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKSwgY29udGV4dC5sb2NhdGlvbik7XG4gICAgdmFyIGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgIGhyZWY6IGhyZWYsXG4gICAgICBuYXZpZ2F0ZTogZnVuY3Rpb24gbmF2aWdhdGUoKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbiA9IHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9XG4gICAgfSk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKTtcbiAgfSk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmZ1bmNdKTtcbiAgdmFyIHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBjdXJyZW50OiBQcm9wVHlwZXMuYW55XG4gIH0pXSk7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbiAgTGluay5wcm9wVHlwZXMgPSB7XG4gICAgaW5uZXJSZWY6IHJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgZm9yd2FyZFJlZlNoaW0kMSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiQxID0gUmVhY3QuZm9yd2FyZFJlZjtcblxuaWYgKHR5cGVvZiBmb3J3YXJkUmVmJDEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZm9yd2FyZFJlZiQxID0gZm9yd2FyZFJlZlNoaW0kMTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc25hbWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGNsYXNzbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaTtcbiAgfSkuam9pbihcIiBcIik7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxudmFyIE5hdkxpbmsgPSBmb3J3YXJkUmVmJDEoZnVuY3Rpb24gKF9yZWYsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZiRhcmlhQ3VycmVudCA9IF9yZWZbXCJhcmlhLWN1cnJlbnRcIl0sXG4gICAgICBhcmlhQ3VycmVudCA9IF9yZWYkYXJpYUN1cnJlbnQgPT09IHZvaWQgMCA/IFwicGFnZVwiIDogX3JlZiRhcmlhQ3VycmVudCxcbiAgICAgIF9yZWYkYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9PT0gdm9pZCAwID8gXCJhY3RpdmVcIiA6IF9yZWYkYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgaXNBY3RpdmVQcm9wID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGxvY2F0aW9uUHJvcCA9IF9yZWYubG9jYXRpb24sXG4gICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgc3R5bGVQcm9wID0gX3JlZi5zdHlsZSxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJhcmlhLWN1cnJlbnRcIiwgXCJhY3RpdmVDbGFzc05hbWVcIiwgXCJhY3RpdmVTdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcImV4YWN0XCIsIFwiaXNBY3RpdmVcIiwgXCJsb2NhdGlvblwiLCBcInNlbnNpdGl2ZVwiLCBcInN0cmljdFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwge30sIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b0xvY2F0aW9uXG4gICAgfSwgcmVzdCk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0kMSAhPT0gZm9yd2FyZFJlZiQxKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdFxuICB9KTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluayB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLWRvbS5qcy5tYXBcbiIsIi8qXG5cbkJhc2VkIG9mZiBnbGFtb3IncyBTdHlsZVNoZWV0LCB0aGFua3MgU3VuaWwg4p2k77iPXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnXG5cbmxldCBzdHlsZVNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoeyBrZXk6ICcnLCBjb250YWluZXI6IGRvY3VtZW50LmhlYWQgfSlcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0aW9ucy5rZXkpO1xuXG4gIGlmIChvcHRpb25zLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdGlvbnMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChvcHRpb25zKSB7XG4gICAgdGhpcy5pc1NwZWVkeSA9IG9wdGlvbnMuc3BlZWR5ID09PSB1bmRlZmluZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIDogb3B0aW9ucy5zcGVlZHk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICAgIHRoaXMubm9uY2UgPSBvcHRpb25zLm5vbmNlOyAvLyBrZXkgaXMgdGhlIHZhbHVlIG9mIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlLCBpdCdzIHVzZWQgdG8gaWRlbnRpZnkgZGlmZmVyZW50IHNoZWV0c1xuXG4gICAgdGhpcy5rZXkgPSBvcHRpb25zLmtleTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xuICAgIHRoaXMuYmVmb3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB2YXIgX3RhZyA9IGNyZWF0ZVN0eWxlRWxlbWVudCh0aGlzKTtcblxuICAgICAgdmFyIGJlZm9yZTtcblxuICAgICAgaWYgKHRoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYmVmb3JlID0gdGhpcy5iZWZvcmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWZvcmUgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUoX3RhZywgYmVmb3JlKTtcbiAgICAgIHRoaXMudGFncy5wdXNoKF90YWcpO1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKHRhZyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIHRoaXMgaXMgYSByZWFsbHkgaG90IHBhdGhcbiAgICAgICAgLy8gd2UgY2hlY2sgdGhlIHNlY29uZCBjaGFyYWN0ZXIgZmlyc3QgYmVjYXVzZSBoYXZpbmcgXCJpXCJcbiAgICAgICAgLy8gYXMgdGhlIHNlY29uZCBjaGFyYWN0ZXIgd2lsbCBoYXBwZW4gbGVzcyBvZnRlbiB0aGFuXG4gICAgICAgIC8vIGhhdmluZyBcIkBcIiBhcyB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gICAgICAgIHZhciBpc0ltcG9ydFJ1bGUgPSBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNSAmJiBydWxlLmNoYXJDb2RlQXQoMCkgPT09IDY0OyAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG5cbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShydWxlLCAvLyB3ZSBuZWVkIHRvIGluc2VydCBAaW1wb3J0IHJ1bGVzIGJlZm9yZSBhbnl0aGluZyBlbHNlXG4gICAgICAgIC8vIG90aGVyd2lzZSB0aGVyZSB3aWxsIGJlIGFuIGVycm9yXG4gICAgICAgIC8vIHRlY2huaWNhbGx5IHRoaXMgbWVhbnMgdGhhdCB0aGUgQGltcG9ydCBydWxlcyB3aWxsXG4gICAgICAgIC8vIF91c3VhbGx5Xyhub3QgYWx3YXlzIHNpbmNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIHN0eWxlIHRhZ3MpXG4gICAgICAgIC8vIGJlIHRoZSBmaXJzdCBvbmVzIGluIHByb2QgYW5kIGdlbmVyYWxseSBsYXRlciBpbiBkZXZcbiAgICAgICAgLy8gdGhpcyBzaG91bGRuJ3QgcmVhbGx5IG1hdHRlciBpbiB0aGUgcmVhbCB3b3JsZCB0aG91Z2hcbiAgICAgICAgLy8gQGltcG9ydCBpcyBnZW5lcmFsbHkgb25seSB1c2VkIGZvciBmb250IGZhY2VzIGZyb20gZ29vZ2xlIGZvbnRzIGFuZCBldGMuXG4gICAgICAgIC8vIHNvIHdoaWxlIHRoaXMgY291bGQgYmUgdGVjaG5pY2FsbHkgY29ycmVjdCB0aGVuIGl0IHdvdWxkIGJlIHNsb3dlciBhbmQgbGFyZ2VyXG4gICAgICAgIC8vIGZvciBhIHRpbnkgYml0IG9mIGNvcnJlY3RuZXNzIHRoYXQgd29uJ3QgbWF0dGVyIGluIHRoZSByZWFsIHdvcmxkXG4gICAgICAgIGlzSW1wb3J0UnVsZSA/IDAgOiBzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoZXJlIHdhcyBhIHByb2JsZW0gaW5zZXJ0aW5nIHRoZSBmb2xsb3dpbmcgcnVsZTogXFxcIlwiICsgcnVsZSArIFwiXFxcIlwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgIH1cblxuICAgIHRoaXMuY3RyKys7XG4gIH07XG5cbiAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWcpO1xuICAgIH0pO1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZXhwb3J0IHsgU3R5bGVTaGVldCB9O1xuIiwiZnVuY3Rpb24gc3R5bGlzX21pbiAoVykge1xuICBmdW5jdGlvbiBNKGQsIGMsIGUsIGgsIGEpIHtcbiAgICBmb3IgKHZhciBtID0gMCwgYiA9IDAsIHYgPSAwLCBuID0gMCwgcSwgZywgeCA9IDAsIEsgPSAwLCBrLCB1ID0gayA9IHEgPSAwLCBsID0gMCwgciA9IDAsIEkgPSAwLCB0ID0gMCwgQiA9IGUubGVuZ3RoLCBKID0gQiAtIDEsIHksIGYgPSAnJywgcCA9ICcnLCBGID0gJycsIEcgPSAnJywgQzsgbCA8IEI7KSB7XG4gICAgICBnID0gZS5jaGFyQ29kZUF0KGwpO1xuICAgICAgbCA9PT0gSiAmJiAwICE9PSBiICsgbiArIHYgKyBtICYmICgwICE9PSBiICYmIChnID0gNDcgPT09IGIgPyAxMCA6IDQ3KSwgbiA9IHYgPSBtID0gMCwgQisrLCBKKyspO1xuXG4gICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICBpZiAobCA9PT0gSiAmJiAoMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKSwgMCA8IGYudHJpbSgpLmxlbmd0aCkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBmICs9IGUuY2hhckF0KGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGcgPSA1OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgZiA9IGYudHJpbSgpO1xuICAgICAgICAgICAgcSA9IGYuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGsgPSAxO1xuXG4gICAgICAgICAgICBmb3IgKHQgPSArK2w7IGwgPCBCOykge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1ID0gbCArIDE7IHUgPCBKOyArK3UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNoYXJDb2RlQXQodSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQyID09PSBnICYmIDQyID09PSBlLmNoYXJDb2RlQXQodSAtIDEpICYmIGwgKyAyICE9PSB1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQ3ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1O1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgZm9yICg7IGwrKyA8IEogJiYgZS5jaGFyQ29kZUF0KGwpICE9PSBnOykge1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0gaykgYnJlYWs7XG4gICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgayA9IGUuc3Vic3RyaW5nKHQsIGwpO1xuICAgICAgICAgICAgMCA9PT0gcSAmJiAocSA9IChmID0gZi5yZXBsYWNlKGNhLCAnJykudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgICAgICAgICAgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKTtcbiAgICAgICAgICAgICAgICBnID0gZi5jaGFyQ29kZUF0KDEpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICByID0gYztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBPO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIHIsIGssIGcsIGEgKyAxKTtcbiAgICAgICAgICAgICAgICB0ID0gay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgMCA8IEEgJiYgKHIgPSBYKE8sIGYsIEkpLCBDID0gSCgzLCBrLCByLCBjLCBELCB6LCB0LCBnLCBhLCBoKSwgZiA9IHIuam9pbignJyksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAodCA9IChrID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSAwLCBrID0gJycpKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8IHQpIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZGEsIGVhKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGZhLCAnJDEgJDInKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBrID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoJ0AnICsgaywgMykgPyAnQC13ZWJraXQtJyArIGsgKyAnQCcgKyBrIDogJ0AnICsgaztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgaywgMTEyID09PSBoICYmIChrID0gKHAgKz0gaywgJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgayA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgayA9IE0oYywgWChjLCBmLCBJKSwgaywgaCwgYSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGICs9IGs7XG4gICAgICAgICAgICBrID0gSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBmID0gKDAgPCByID8gZi5yZXBsYWNlKE4sICcnKSA6IGYpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBmLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gdSAmJiAocSA9IGYuY2hhckNvZGVBdCgwKSwgNDUgPT09IHEgfHwgOTYgPCBxICYmIDEyMyA+IHEpICYmICh0ID0gKGYgPSBmLnJlcGxhY2UoJyAnLCAnOicpKS5sZW5ndGgpLCAwIDwgQSAmJiB2b2lkIDAgIT09IChDID0gSCgxLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCkpICYmIDAgPT09ICh0ID0gKGYgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZiA9ICdcXHgwMFxceDAwJyksIHEgPSBmLmNoYXJDb2RlQXQoMCksIGcgPSBmLmNoYXJDb2RlQXQoMSksIHEpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgaWYgKDEwNSA9PT0gZyB8fCA5OSA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgRyArPSBmICsgZS5jaGFyQXQobCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZi5jaGFyQ29kZUF0KHQgLSAxKSAmJiAocCArPSBQKGYsIHEsIGcsIGYuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgNDcgPT09IGIgPyBiID0gMCA6IDAgPT09IDEgKyBxICYmIDEwNyAhPT0gaCAmJiAwIDwgZi5sZW5ndGggJiYgKHIgPSAxLCBmICs9ICdcXHgwMCcpO1xuICAgICAgICAgIDAgPCBBICogWSAmJiBIKDAsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKTtcbiAgICAgICAgICB6ID0gMTtcbiAgICAgICAgICBEKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgICAgIHorKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHorKztcbiAgICAgICAgICB5ID0gZS5jaGFyQXQobCk7XG5cbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgbSArIGIpIHN3aXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgIHkgPSAnJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBnICYmICh5ID0gJyAnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFwwJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXGYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcdic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHIgPSBJID0gMSwgeSA9ICdcXGYnICsgeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSArIEUgJiYgMCA8IHUpIHN3aXRjaCAobCAtIHUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAxMTIgPT09IHggJiYgNTggPT09IGUuY2hhckNvZGVBdChsIC0gMykgJiYgKEUgPSB4KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIDExMSA9PT0gSyAmJiAoRSA9IEspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHUgPSBsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gJiYgKHIgPSAxLCB5ICs9ICdcXHInKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBiICYmIChuID0gbiA9PT0gZyA/IDAgOiAwID09PSBuID8gZyA6IG4pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0rKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgdi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBxKSBzd2l0Y2ggKDIgKiB4ICsgMyAqIEspIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHYrKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICsgdSArIGsgJiYgKGsgPSAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICBpZiAoISgwIDwgbiArIG0gKyB2KSkgc3dpdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZyArIDMgKiBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjM1OlxuICAgICAgICAgICAgICAgICAgICAgIGIgPSA0NztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgICAgICAgICAgICB0ID0gbCwgYiA9IDQyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICA0NyA9PT0gZyAmJiA0MiA9PT0geCAmJiB0ICsgMiAhPT0gbCAmJiAoMzMgPT09IGUuY2hhckNvZGVBdCh0ICsgMikgJiYgKHAgKz0gZS5zdWJzdHJpbmcodCwgbCArIDEpKSwgeSA9ICcnLCBiID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAwID09PSBiICYmIChmICs9IHkpO1xuICAgICAgfVxuXG4gICAgICBLID0geDtcbiAgICAgIHggPSBnO1xuICAgICAgbCsrO1xuICAgIH1cblxuICAgIHQgPSBwLmxlbmd0aDtcblxuICAgIGlmICgwIDwgdCkge1xuICAgICAgciA9IGM7XG4gICAgICBpZiAoMCA8IEEgJiYgKEMgPSBIKDIsIHAsIHIsIGQsIEQsIHosIHQsIGgsIGEsIGgpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHAgPSBDKS5sZW5ndGgpKSByZXR1cm4gRyArIHAgKyBGO1xuICAgICAgcCA9IHIuam9pbignLCcpICsgJ3snICsgcCArICd9JztcblxuICAgICAgaWYgKDAgIT09IHcgKiBFKSB7XG4gICAgICAgIDIgIT09IHcgfHwgTChwLCAyKSB8fCAoRSA9IDApO1xuXG4gICAgICAgIHN3aXRjaCAoRSkge1xuICAgICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShoYSwgJzotbW96LSQxJykgKyBwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoUSwgJzo6LXdlYmtpdC1pbnB1dC0kMScpICsgcC5yZXBsYWNlKFEsICc6Oi1tb3otJDEnKSArIHAucmVwbGFjZShRLCAnOi1tcy1pbnB1dC0kMScpICsgcDtcbiAgICAgICAgfVxuXG4gICAgICAgIEUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBHICsgcCArIEY7XG4gIH1cblxuICBmdW5jdGlvbiBYKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMudHJpbSgpLnNwbGl0KGlhKTtcbiAgICBjID0gaDtcbiAgICB2YXIgYSA9IGgubGVuZ3RoLFxuICAgICAgICBtID0gZC5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICAgIGZvciAoZCA9IDAgPT09IG0gPyAnJyA6IGRbMF0gKyAnICc7IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBjW2JdID0gWihkLCBjW2JdLCBlKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHYgPSBiID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbTsgKytuKSB7XG4gICAgICAgICAgICBjW3YrK10gPSBaKGRbbl0gKyAnICcsIGhbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gWihkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgMzMgPiBoICYmIChoID0gKGMgPSBjLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBzd2l0Y2ggKGgpIHtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHJldHVybiBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcmV0dXJuIGQudHJpbSgpICsgYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgwIDwgMSAqIGUgJiYgMCA8IGMuaW5kZXhPZignXFxmJykpIHJldHVybiBjLnJlcGxhY2UoRiwgKDU4ID09PSBkLmNoYXJDb2RlQXQoMCkgPyAnJyA6ICckMScpICsgZC50cmltKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkICsgYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFAoZCwgYywgZSwgaCkge1xuICAgIHZhciBhID0gZCArICc7JyxcbiAgICAgICAgbSA9IDIgKiBjICsgMyAqIGUgKyA0ICogaDtcblxuICAgIGlmICg5NDQgPT09IG0pIHtcbiAgICAgIGQgPSBhLmluZGV4T2YoJzonLCA5KSArIDE7XG4gICAgICB2YXIgYiA9IGEuc3Vic3RyaW5nKGQsIGEubGVuZ3RoIC0gMSkudHJpbSgpO1xuICAgICAgYiA9IGEuc3Vic3RyaW5nKDAsIGQpLnRyaW0oKSArIGIgKyAnOyc7XG4gICAgICByZXR1cm4gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoYiwgMSkgPyAnLXdlYmtpdC0nICsgYiArIGIgOiBiO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIUwoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA5NyA9PT0gYS5jaGFyQ29kZUF0KDEwKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTUxOlxuICAgICAgICByZXR1cm4gMTE2ID09PSBhLmNoYXJDb2RlQXQoMykgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSAxMDA5OlxuICAgICAgICBpZiAoMTAwICE9PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2OTpcbiAgICAgIGNhc2UgOTQyOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk3ODpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMTk6XG4gICAgICBjYXNlIDk4MzpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA4ODM6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDgpKSByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuICAgICAgICBpZiAoMCA8IGEuaW5kZXhPZignaW1hZ2Utc2V0KCcsIDExKSkgcmV0dXJuIGEucmVwbGFjZShqYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtJyArIGEucmVwbGFjZSgnLWdyb3cnLCAnJykgKyAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnZ3JvdycsICdwb3NpdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5NjQ6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAyMzpcbiAgICAgICAgaWYgKDk5ICE9PSBhLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuICAgICAgICBiID0gYS5zdWJzdHJpbmcoYS5pbmRleE9mKCc6JywgMTUpKS5yZXBsYWNlKCdmbGV4LScsICcnKS5yZXBsYWNlKCdzcGFjZS1iZXR3ZWVuJywgJ2p1c3RpZnknKTtcbiAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC1wYWNrJyArIGIgKyAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1wYWNrJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBrYS50ZXN0KGEpID8gYS5yZXBsYWNlKGFhLCAnOi13ZWJraXQtJykgKyBhLnJlcGxhY2UoYWEsICc6LW1vei0nKSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDFlMzpcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKDEzKS50cmltKCk7XG4gICAgICAgIGMgPSBiLmluZGV4T2YoJy0nKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQoYykpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGItcmwnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICdscicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDE3OlxuICAgICAgICBpZiAoLTEgPT09IGEuaW5kZXhPZignc3RpY2t5JywgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgYyA9IChhID0gZCkubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChjKSA/IGEuc3Vic3RyaW5nKDAsIGMpIDogYSkuc3Vic3RyaW5nKGQuaW5kZXhPZignOicsIDcpICsgMSkudHJpbSgpO1xuXG4gICAgICAgIHN3aXRjaCAobSA9IGIuY2hhckNvZGVBdCgwKSArIChiLmNoYXJDb2RlQXQoNykgfCAwKSkge1xuICAgICAgICAgIGNhc2UgMjAzOlxuICAgICAgICAgICAgaWYgKDExMSA+IGIuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyAoMTAyIDwgbSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gnKSArICc7JyArIGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy1tcy0nICsgYiArICdib3gnKSArICc7JyArIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSArICc7JztcblxuICAgICAgY2FzZSA5Mzg6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDUpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg2KSkge1xuICAgICAgICAgIGNhc2UgMTA1OlxuICAgICAgICAgICAgcmV0dXJuIGIgPSBhLnJlcGxhY2UoJy1pdGVtcycsICcnKSwgJy13ZWJraXQtJyArIGEgKyAnLXdlYmtpdC1ib3gtJyArIGIgKyAnLW1zLWZsZXgtJyArIGIgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtaXRlbS0nICsgYS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1saW5lLXBhY2snICsgYS5yZXBsYWNlKCdhbGlnbi1jb250ZW50JywgJycpLnJlcGxhY2UoYmEsICcnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTczOlxuICAgICAgY2FzZSA5ODk6XG4gICAgICAgIGlmICg0NSAhPT0gYS5jaGFyQ29kZUF0KDMpIHx8IDEyMiA9PT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5MzE6XG4gICAgICBjYXNlIDk1MzpcbiAgICAgICAgaWYgKCEwID09PSBsYS50ZXN0KGQpKSByZXR1cm4gMTE1ID09PSAoYiA9IGQuc3Vic3RyaW5nKGQuaW5kZXhPZignOicpICsgMSkpLmNoYXJDb2RlQXQoMCkgPyBQKGQucmVwbGFjZSgnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBjLCBlLCBoKS5yZXBsYWNlKCc6ZmlsbC1hdmFpbGFibGUnLCAnOnN0cmV0Y2gnKSA6IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyBhLnJlcGxhY2UoYiwgJy1tb3otJyArIGIucmVwbGFjZSgnZmlsbC0nLCAnJykpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTYyOlxuICAgICAgICBpZiAoYSA9ICctd2Via2l0LScgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy1tcy0nICsgYSA6ICcnKSArIGEsIDIxMSA9PT0gZSArIGggJiYgMTA1ID09PSBhLmNoYXJDb2RlQXQoMTMpICYmIDAgPCBhLmluZGV4T2YoJ3RyYW5zZm9ybScsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZignOycsIDI3KSArIDEpLnJlcGxhY2UobWEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBmdW5jdGlvbiBMKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQuaW5kZXhPZigxID09PSBjID8gJzonIDogJ3snKSxcbiAgICAgICAgaCA9IGQuc3Vic3RyaW5nKDAsIDMgIT09IGMgPyBlIDogMTApO1xuICAgIGUgPSBkLnN1YnN0cmluZyhlICsgMSwgZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gUigyICE9PSBjID8gaCA6IGgucmVwbGFjZShuYSwgJyQxJyksIGUsIGMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoZCwgYykge1xuICAgIHZhciBlID0gUChjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZSAhPT0gYyArICc7JyA/IGUucmVwbGFjZShvYSwgJyBvciAoJDEpJykuc3Vic3RyaW5nKDQpIDogJygnICsgYyArICcpJztcbiAgfVxuXG4gIGZ1bmN0aW9uIEgoZCwgYywgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkge1xuICAgIGZvciAodmFyIGcgPSAwLCB4ID0gYywgdzsgZyA8IEE7ICsrZykge1xuICAgICAgc3dpdGNoICh3ID0gU1tnXS5jYWxsKEIsIGQsIHgsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB4ID0gdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoeCAhPT0gYykgcmV0dXJuIHg7XG4gIH1cblxuICBmdW5jdGlvbiBUKGQpIHtcbiAgICBzd2l0Y2ggKGQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgICBBID0gUy5sZW5ndGggPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBkKSBTW0ErK10gPSBkO2Vsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlb2YgZCkgZm9yICh2YXIgYyA9IDAsIGUgPSBkLmxlbmd0aDsgYyA8IGU7ICsrYykge1xuICAgICAgICAgIFQoZFtjXSk7XG4gICAgICAgIH0gZWxzZSBZID0gISFkIHwgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gVDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFUoZCkge1xuICAgIGQgPSBkLnByZWZpeDtcbiAgICB2b2lkIDAgIT09IGQgJiYgKFIgPSBudWxsLCBkID8gJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgUiA9IGQpIDogdyA9IDApO1xuICAgIHJldHVybiBVO1xuICB9XG5cbiAgZnVuY3Rpb24gQihkLCBjKSB7XG4gICAgdmFyIGUgPSBkO1xuICAgIDMzID4gZS5jaGFyQ29kZUF0KDApICYmIChlID0gZS50cmltKCkpO1xuICAgIFYgPSBlO1xuICAgIGUgPSBbVl07XG5cbiAgICBpZiAoMCA8IEEpIHtcbiAgICAgIHZhciBoID0gSCgtMSwgYywgZSwgZSwgRCwgeiwgMCwgMCwgMCwgMCk7XG4gICAgICB2b2lkIDAgIT09IGggJiYgJ3N0cmluZycgPT09IHR5cGVvZiBoICYmIChjID0gaCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBNKE8sIGUsIGMsIDAsIDApO1xuICAgIDAgPCBBICYmIChoID0gSCgtMiwgYSwgZSwgZSwgRCwgeiwgYS5sZW5ndGgsIDAsIDAsIDApLCB2b2lkIDAgIT09IGggJiYgKGEgPSBoKSk7XG4gICAgViA9ICcnO1xuICAgIEUgPSAwO1xuICAgIHogPSBEID0gMTtcbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIHZhciBjYSA9IC9eXFwwKy9nLFxuICAgICAgTiA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgYWEgPSAvOiAqL2csXG4gICAgICBrYSA9IC96b298Z3JhLyxcbiAgICAgIG1hID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgaWEgPSAvLFxccis/L2csXG4gICAgICBGID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICBmYSA9IC9AKGtcXHcrKVxccyooXFxTKilcXHMqLyxcbiAgICAgIFEgPSAvOjoocGxhY2UpL2csXG4gICAgICBoYSA9IC86KHJlYWQtb25seSkvZyxcbiAgICAgIEcgPSAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sXG4gICAgICBkYSA9IC9cXChcXHMqKC4qKVxccypcXCkvZyxcbiAgICAgIG9hID0gLyhbXFxzXFxTXSo/KTsvZyxcbiAgICAgIGJhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBuYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIGxhID0gL3N0cmV0Y2h8OlxccypcXHcrXFwtKD86Y29udGV8YXZhaWwpLyxcbiAgICAgIGphID0gLyhbXi1dKShpbWFnZS1zZXRcXCgpLyxcbiAgICAgIHogPSAxLFxuICAgICAgRCA9IDEsXG4gICAgICBFID0gMCxcbiAgICAgIHcgPSAxLFxuICAgICAgTyA9IFtdLFxuICAgICAgUyA9IFtdLFxuICAgICAgQSA9IDAsXG4gICAgICBSID0gbnVsbCxcbiAgICAgIFkgPSAwLFxuICAgICAgViA9ICcnO1xuICBCLnVzZSA9IFQ7XG4gIEIuc2V0ID0gVTtcbiAgdm9pZCAwICE9PSBXICYmIFUoVyk7XG4gIHJldHVybiBCO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsaXNfbWluO1xuIiwiaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcbmltcG9ydCBTdHlsaXMgZnJvbSAnQGVtb3Rpb24vc3R5bGlzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RoeXN1bHRhbi9zdHlsaXMuanMvdHJlZS9tYXN0ZXIvcGx1Z2lucy9ydWxlLXNoZWV0XG4vLyBpbmxpbmVkIHRvIGF2b2lkIHVtZCB3cmFwcGVyIGFuZCBwZWVyRGVwIHdhcm5pbmdzL2luc3RhbGxpbmcgc3R5bGlzXG4vLyBzaW5jZSB3ZSB1c2Ugc3R5bGlzIGFmdGVyIGNsb3N1cmUgY29tcGlsZXJcbnZhciBkZWxpbWl0ZXIgPSAnLyp8Ki8nO1xudmFyIG5lZWRsZSA9IGRlbGltaXRlciArICd9JztcblxuZnVuY3Rpb24gdG9TaGVldChibG9jaykge1xuICBpZiAoYmxvY2spIHtcbiAgICBTaGVldC5jdXJyZW50Lmluc2VydChibG9jayArICd9Jyk7XG4gIH1cbn1cblxudmFyIFNoZWV0ID0ge1xuICBjdXJyZW50OiBudWxsXG59O1xudmFyIHJ1bGVTaGVldCA9IGZ1bmN0aW9uIHJ1bGVTaGVldChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBucywgZGVwdGgsIGF0KSB7XG4gIHN3aXRjaCAoY29udGV4dCkge1xuICAgIC8vIHByb3BlcnR5XG4gICAgY2FzZSAxOlxuICAgICAge1xuICAgICAgICBzd2l0Y2ggKGNvbnRlbnQuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIEBpbXBvcnRcbiAgICAgICAgICAgICAgU2hlZXQuY3VycmVudC5pbnNlcnQoY29udGVudCArICc7Jyk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjaGFyY29kZSBmb3IgbFxuXG4gICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIGNoYXJjb2RlIGZvciBiXG4gICAgICAgICAgICAgIC8vIHRoaXMgaWdub3JlcyBsYWJlbFxuICAgICAgICAgICAgICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDIpID09PSA5OCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgLy8gc2VsZWN0b3JcblxuICAgIGNhc2UgMjpcbiAgICAgIHtcbiAgICAgICAgaWYgKG5zID09PSAwKSByZXR1cm4gY29udGVudCArIGRlbGltaXRlcjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgLy8gYXQtcnVsZVxuXG4gICAgY2FzZSAzOlxuICAgICAge1xuICAgICAgICBzd2l0Y2ggKG5zKSB7XG4gICAgICAgICAgLy8gQGZvbnQtZmFjZSwgQHBhZ2VcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgU2hlZXQuY3VycmVudC5pbnNlcnQoc2VsZWN0b3JzWzBdICsgY29udGVudCk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJldHVybiBjb250ZW50ICsgKGF0ID09PSAwID8gZGVsaW1pdGVyIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICBjYXNlIC0yOlxuICAgICAge1xuICAgICAgICBjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KTtcbiAgICAgIH1cbiAgfVxufTtcblxudmFyIGNyZWF0ZUNhY2hlID0gZnVuY3Rpb24gY3JlYXRlQ2FjaGUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zID0ge307XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleSB8fCAnY3NzJztcbiAgdmFyIHN0eWxpc09wdGlvbnM7XG5cbiAgaWYgKG9wdGlvbnMucHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXNPcHRpb25zID0ge1xuICAgICAgcHJlZml4OiBvcHRpb25zLnByZWZpeFxuICAgIH07XG4gIH1cblxuICB2YXIgc3R5bGlzID0gbmV3IFN0eWxpcyhzdHlsaXNPcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307IC8vICRGbG93Rml4TWVcblxuICB2YXIgY29udGFpbmVyO1xuXG4gIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb24tXCIgKyBrZXkgKyBcIl1cIik7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBhdHRyaWIgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZW1vdGlvbi1cIiArIGtleSk7IC8vICRGbG93Rml4TWVcblxuICAgICAgYXR0cmliLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaW5zZXJ0ZWRbaWRdID0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBjb250YWluZXIpIHtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9pbnNlcnQ7XG5cbiAge1xuICAgIHN0eWxpcy51c2Uob3B0aW9ucy5zdHlsaXNQbHVnaW5zKShydWxlU2hlZXQpO1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIGluc2VydChzZWxlY3Rvciwgc2VyaWFsaXplZCwgc2hlZXQsIHNob3VsZENhY2hlKSB7XG4gICAgICB2YXIgbmFtZSA9IHNlcmlhbGl6ZWQubmFtZTtcbiAgICAgIFNoZWV0LmN1cnJlbnQgPSBzaGVldDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgbWFwID0gc2VyaWFsaXplZC5tYXA7XG4gICAgICAgIFNoZWV0LmN1cnJlbnQgPSB7XG4gICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUgKyBtYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3R5bGlzKHNlbGVjdG9yLCBzZXJpYWxpemVkLnN0eWxlcyk7XG5cbiAgICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgICBjYWNoZS5pbnNlcnRlZFtuYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gaHR0cHM6Ly9lc2JlbmNoLmNvbS9iZW5jaC81YmY3MzcxYTRjZDdlNjAwOWVmNjFkMGFcbiAgICB2YXIgY29tbWVudFN0YXJ0ID0gL1xcL1xcKi9nO1xuICAgIHZhciBjb21tZW50RW5kID0gL1xcKlxcLy9nO1xuICAgIHN0eWxpcy51c2UoZnVuY3Rpb24gKGNvbnRleHQsIGNvbnRlbnQpIHtcbiAgICAgIHN3aXRjaCAoY29udGV4dCkge1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHdoaWxlIChjb21tZW50U3RhcnQudGVzdChjb250ZW50KSkge1xuICAgICAgICAgICAgICBjb21tZW50RW5kLmxhc3RJbmRleCA9IGNvbW1lbnRTdGFydC5sYXN0SW5kZXg7XG5cbiAgICAgICAgICAgICAgaWYgKGNvbW1lbnRFbmQudGVzdChjb250ZW50KSkge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRTdGFydC5sYXN0SW5kZXggPSBjb21tZW50RW5kLmxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignWW91ciBzdHlsZXMgaGF2ZSBhbiB1bnRlcm1pbmF0ZWQgY29tbWVudCAoXCIvKlwiIHdpdGhvdXQgY29ycmVzcG9uZGluZyBcIiovXCIpLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb21tZW50U3RhcnQubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBzdHlsaXMudXNlKGZ1bmN0aW9uIChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMpIHtcbiAgICAgIHN3aXRjaCAoY29udGV4dCkge1xuICAgICAgICBjYXNlIC0xOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBmbGFnID0gJ2Vtb3Rpb24tZGlzYWJsZS1zZXJ2ZXItcmVuZGVyaW5nLXVuc2FmZS1zZWxlY3Rvci13YXJuaW5nLXBsZWFzZS1kby1ub3QtdXNlLXRoaXMtdGhlLXdhcm5pbmctZXhpc3RzLWZvci1hLXJlYXNvbic7XG4gICAgICAgICAgICB2YXIgdW5zYWZlUHNldWRvQ2xhc3NlcyA9IGNvbnRlbnQubWF0Y2goLyg6Zmlyc3R8Om50aHw6bnRoLWxhc3QpLWNoaWxkL2cpO1xuXG4gICAgICAgICAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3NlcyAmJiBjYWNoZS5jb21wYXQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgdW5zYWZlUHNldWRvQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uICh1bnNhZmVQc2V1ZG9DbGFzcykge1xuICAgICAgICAgICAgICAgIHZhciBpZ25vcmVSZWdFeHAgPSBuZXcgUmVnRXhwKHVuc2FmZVBzZXVkb0NsYXNzICsgXCIuKlxcXFwvXFxcXCogXCIgKyBmbGFnICsgXCIgXFxcXCpcXFxcL1wiKTtcbiAgICAgICAgICAgICAgICB2YXIgaWdub3JlID0gaWdub3JlUmVnRXhwLnRlc3QoY29udGVudCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodW5zYWZlUHNldWRvQ2xhc3MgJiYgIWlnbm9yZSkge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSBwc2V1ZG8gY2xhc3MgXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3MgKyBcIlxcXCIgaXMgcG90ZW50aWFsbHkgdW5zYWZlIHdoZW4gZG9pbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBUcnkgY2hhbmdpbmcgaXQgdG8gXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3Muc3BsaXQoJy1jaGlsZCcpWzBdICsgXCItb2YtdHlwZVxcXCIuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IHtcbiAgICBrZXk6IGtleSxcbiAgICBzaGVldDogbmV3IFN0eWxlU2hlZXQoe1xuICAgICAga2V5OiBrZXksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgICAgc3BlZWR5OiBvcHRpb25zLnNwZWVkeVxuICAgIH0pLFxuICAgIG5vbmNlOiBvcHRpb25zLm5vbmNlLFxuICAgIGluc2VydGVkOiBpbnNlcnRlZCxcbiAgICByZWdpc3RlcmVkOiB7fSxcbiAgICBpbnNlcnQ6IF9pbnNlcnRcbiAgfTtcbiAgcmV0dXJuIGNhY2hlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ2FjaGU7XG4iLCJ2YXIgaXNCcm93c2VyID0gXCJvYmplY3RcIiAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9ICcnO1xuICBjbGFzc05hbWVzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgaWYgKHJlZ2lzdGVyZWRbY2xhc3NOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZWdpc3RlcmVkU3R5bGVzLnB1c2gocmVnaXN0ZXJlZFtjbGFzc05hbWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmF3Q2xhc3NOYW1lICs9IGNsYXNzTmFtZSArIFwiIFwiO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByYXdDbGFzc05hbWU7XG59XG52YXIgaW5zZXJ0U3R5bGVzID0gZnVuY3Rpb24gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZykge1xuICB2YXIgY2xhc3NOYW1lID0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgaWYgKCAvLyB3ZSBvbmx5IG5lZWQgdG8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgaWYgdGhlXG4gIC8vIGNsYXNzIG5hbWUgY291bGQgYmUgdXNlZCBmdXJ0aGVyIGRvd25cbiAgLy8gdGhlIHRyZWUgYnV0IGlmIGl0J3MgYSBzdHJpbmcgdGFnLCB3ZSBrbm93IGl0IHdvbid0XG4gIC8vIHNvIHdlIGRvbid0IGhhdmUgdG8gYWRkIGl0IHRvIHJlZ2lzdGVyZWQgY2FjaGUuXG4gIC8vIHRoaXMgaW1wcm92ZXMgbWVtb3J5IHVzYWdlIHNpbmNlIHdlIGNhbiBhdm9pZCBzdG9yaW5nIHRoZSB3aG9sZSBzdHlsZSBzdHJpbmdcbiAgKGlzU3RyaW5nVGFnID09PSBmYWxzZSB8fCAvLyB3ZSBuZWVkIHRvIGFsd2F5cyBzdG9yZSBpdCBpZiB3ZSdyZSBpbiBjb21wYXQgbW9kZSBhbmRcbiAgLy8gaW4gbm9kZSBzaW5jZSBlbW90aW9uLXNlcnZlciByZWxpZXMgb24gd2hldGhlciBhIHN0eWxlIGlzIGluXG4gIC8vIHRoZSByZWdpc3RlcmVkIGNhY2hlIHRvIGtub3cgd2hldGhlciBhIHN0eWxlIGlzIGdsb2JhbCBvciBub3RcbiAgLy8gYWxzbywgbm90ZSB0aGF0IHRoaXMgY2hlY2sgd2lsbCBiZSBkZWFkIGNvZGUgZWxpbWluYXRlZCBpbiB0aGUgYnJvd3NlclxuICBpc0Jyb3dzZXIgPT09IGZhbHNlICYmIGNhY2hlLmNvbXBhdCAhPT0gdW5kZWZpbmVkKSAmJiBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9IHNlcmlhbGl6ZWQuc3R5bGVzO1xuICB9XG5cbiAgaWYgKGNhY2hlLmluc2VydGVkW3NlcmlhbGl6ZWQubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBjdXJyZW50ID0gc2VyaWFsaXplZDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBtYXliZVN0eWxlcyA9IGNhY2hlLmluc2VydChcIi5cIiArIGNsYXNzTmFtZSwgY3VycmVudCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuXG4gICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgIH0gd2hpbGUgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcyB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qc1xuLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVyL2Jsb2IvNjFhMDUzMGYyODI3N2YyZTg1MGJmYzM5NjAwY2U2MWQwMmI1MThkZS9zcmMvTXVybXVySGFzaDIuY3BwI0wzNy1MODZcbmZ1bmN0aW9uIG11cm11cjIoc3RyKSB7XG4gIC8vICdtJyBhbmQgJ3InIGFyZSBtaXhpbmcgY29uc3RhbnRzIGdlbmVyYXRlZCBvZmZsaW5lLlxuICAvLyBUaGV5J3JlIG5vdCByZWFsbHkgJ21hZ2ljJywgdGhleSBqdXN0IGhhcHBlbiB0byB3b3JrIHdlbGwuXG4gIC8vIGNvbnN0IG0gPSAweDViZDFlOTk1O1xuICAvLyBjb25zdCByID0gMjQ7XG4gIC8vIEluaXRpYWxpemUgdGhlIGhhc2hcbiAgdmFyIGggPSAwOyAvLyBNaXggNCBieXRlcyBhdCBhIHRpbWUgaW50byB0aGUgaGFzaFxuXG4gIHZhciBrLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSBzdHIubGVuZ3RoO1xuXG4gIGZvciAoOyBsZW4gPj0gNDsgKytpLCBsZW4gLT0gNCkge1xuICAgIGsgPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDggfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAyNDtcbiAgICBrID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgICBrIF49XG4gICAgLyogayA+Pj4gcjogKi9cbiAgICBrID4+PiAyNDtcbiAgICBoID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KSBeXG4gICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gSGFuZGxlIHRoZSBsYXN0IGZldyBieXRlcyBvZiB0aGUgaW5wdXQgYXJyYXlcblxuXG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAzOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDIpICYgMHhmZikgPDwgMTY7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4O1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgICBoID1cbiAgICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gRG8gYSBmZXcgZmluYWwgbWl4ZXMgb2YgdGhlIGhhc2ggdG8gZW5zdXJlIHRoZSBsYXN0IGZld1xuICAvLyBieXRlcyBhcmUgd2VsbC1pbmNvcnBvcmF0ZWQuXG5cblxuICBoIF49IGggPj4+IDEzO1xuICBoID1cbiAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICByZXR1cm4gKChoIF4gaCA+Pj4gMTUpID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cjI7XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyhhdHRyfGNhbGN8Y291bnRlcnM/fHVybClcXCgvO1xuICB2YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnY291bnRlcicsICdvcGVuLXF1b3RlJywgJ2Nsb3NlLXF1b3RlJywgJ25vLW9wZW4tcXVvdGUnLCAnbm8tY2xvc2UtcXVvdGUnLCAnaW5pdGlhbCcsICdpbmhlcml0JywgJ3Vuc2V0J107XG4gIHZhciBvbGRQcm9jZXNzU3R5bGVWYWx1ZSA9IHByb2Nlc3NTdHlsZVZhbHVlO1xuICB2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbiAgdmFyIGh5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuICB2YXIgaHlwaGVuYXRlZENhY2hlID0ge307XG5cbiAgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBjb250ZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID09PSAtMSAmJiAhY29udGVudFZhbHVlUGF0dGVybi50ZXN0KHZhbHVlKSAmJiAodmFsdWUuY2hhckF0KDApICE9PSB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgfHwgdmFsdWUuY2hhckF0KDApICE9PSAnXCInICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gXCInXCIpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3Ugc2VlbSB0byBiZSB1c2luZyBhIHZhbHVlIGZvciAnY29udGVudCcgd2l0aG91dCBxdW90ZXMsIHRyeSByZXBsYWNpbmcgaXQgd2l0aCBgY29udGVudDogJ1xcXCJcIiArIHZhbHVlICsgXCJcXFwiJ2BcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByb2Nlc3NlZCA9IG9sZFByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpO1xuXG4gICAgaWYgKHByb2Nlc3NlZCAhPT0gJycgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiBrZXkuaW5kZXhPZignLScpICE9PSAtMSAmJiBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVXNpbmcga2ViYWItY2FzZSBmb3IgY3NzIHByb3BlcnRpZXMgaW4gb2JqZWN0cyBpcyBub3Qgc3VwcG9ydGVkLiBEaWQgeW91IG1lYW4gXCIgKyBrZXkucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKS5yZXBsYWNlKGh5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChzdHIsIF9jaGFyKSB7XG4gICAgICAgIHJldHVybiBfY2hhci50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSkgKyBcIj9cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZDtcbiAgfTtcbn1cblxudmFyIHNob3VsZFdhcm5BYm91dEludGVycG9sYXRpbmdDbGFzc05hbWVGcm9tQ3NzID0gdHJ1ZTtcblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbiwgY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbikge1xuICBpZiAoaW50ZXJwb2xhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKGludGVycG9sYXRpb24uX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi50b1N0cmluZygpID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBiYWJlbC1wbHVnaW4tZW1vdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIGludGVycG9sYXRpb24pIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uYW5pbSA9PT0gMSkge1xuICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgIG5hbWU6IGludGVycG9sYXRpb24ubmFtZSxcbiAgICAgICAgICAgIHN0eWxlczogaW50ZXJwb2xhdGlvbi5zdHlsZXMsXG4gICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBpbnRlcnBvbGF0aW9uLm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBuZXh0ID0gaW50ZXJwb2xhdGlvbi5uZXh0O1xuXG4gICAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbm90IHRoZSBtb3N0IGVmZmljaWVudCB0aGluZyBldmVyIGJ1dCB0aGlzIGlzIGEgcHJldHR5IHJhcmUgY2FzZVxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlIHdpbGwgYmUgdmVyeSBmZXcgaXRlcmF0aW9ucyBvZiB0aGlzIGdlbmVyYWxseVxuICAgICAgICAgICAgd2hpbGUgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogbmV4dC5uYW1lLFxuICAgICAgICAgICAgICAgIHN0eWxlczogbmV4dC5zdHlsZXMsXG4gICAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlcyA9IGludGVycG9sYXRpb24uc3R5bGVzICsgXCI7XCI7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gaW50ZXJwb2xhdGlvbi5tYXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKG1lcmdlZFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXNDdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGludGVycG9sYXRpb24obWVyZ2VkUHJvcHMpO1xuICAgICAgICAgIGN1cnNvciA9IHByZXZpb3VzQ3Vyc29yO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCByZXN1bHQsIGNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGdW5jdGlvbnMgdGhhdCBhcmUgaW50ZXJwb2xhdGVkIGluIGNzcyBjYWxscyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxcbicgKyAnSWYgeW91IHdhbnQgdG8gaGF2ZSBhIGNzcyBjYWxsIGJhc2VkIG9uIHByb3BzLCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjc3MgY2FsbCBsaWtlIHRoaXNcXG4nICsgJ2xldCBkeW5hbWljU3R5bGUgPSAocHJvcHMpID0+IGNzc2Bjb2xvcjogJHtwcm9wcy5jb2xvcn1gXFxuJyArICdJdCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IHdpdGggcHJvcHMgb3IgaW50ZXJwb2xhdGVkIGluIGEgc3R5bGVkIGNhbGwgbGlrZSB0aGlzXFxuJyArIFwibGV0IFNvbWVDb21wb25lbnQgPSBzdHlsZWQoJ2RpdicpYCR7ZHluYW1pY1N0eWxlfWBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZWQgPSBpbnRlcnBvbGF0aW9uLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgdmFyIGZha2VWYXJOYW1lID0gXCJhbmltYXRpb25cIiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICAgIG1hdGNoZWQucHVzaChcImNvbnN0IFwiICsgZmFrZVZhck5hbWUgKyBcIiA9IGtleWZyYW1lc2BcIiArIHAyLnJlcGxhY2UoL15Aa2V5ZnJhbWVzIGFuaW1hdGlvbi1cXHcrLywgJycpICsgXCJgXCIpO1xuICAgICAgICAgIHJldHVybiBcIiR7XCIgKyBmYWtlVmFyTmFtZSArIFwifVwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdga2V5ZnJhbWVzYCBvdXRwdXQgZ290IGludGVycG9sYXRlZCBpbnRvIHBsYWluIHN0cmluZywgcGxlYXNlIHdyYXAgaXQgd2l0aCBgY3NzYC5cXG5cXG4nICsgJ0luc3RlYWQgb2YgZG9pbmcgdGhpczpcXG5cXG4nICsgW10uY29uY2F0KG1hdGNoZWQsIFtcImBcIiArIHJlcGxhY2VkICsgXCJgXCJdKS5qb2luKCdcXG4nKSArICdcXG5cXG5Zb3Ugc2hvdWxkIHdyYXAgaXQgd2l0aCBgY3NzYCBsaWtlIHRoaXM6XFxuXFxuJyArIChcImNzc2BcIiArIHJlcGxhY2VkICsgXCJgXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfSAvLyBmaW5hbGl6ZSBzdHJpbmcgdmFsdWVzIChyZWd1bGFyIHN0cmluZ3MgYW5kIGZ1bmN0aW9ucyBpbnRlcnBvbGF0ZWQgaW50byBjc3MgY2FsbHMpXG5cblxuICBpZiAocmVnaXN0ZXJlZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uICYmIHNob3VsZFdhcm5BYm91dEludGVycG9sYXRpbmdDbGFzc05hbWVGcm9tQ3NzICYmIGNhY2hlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5lcnJvcignSW50ZXJwb2xhdGluZyBhIGNsYXNzTmFtZSBmcm9tIGNzc2BgIGlzIG5vdCByZWNvbW1lbmRlZCBhbmQgd2lsbCBjYXVzZSBwcm9ibGVtcyB3aXRoIGNvbXBvc2l0aW9uLlxcbicgKyAnSW50ZXJwb2xhdGluZyBhIGNsYXNzTmFtZSBmcm9tIGNzc2BgIHdpbGwgYmUgY29tcGxldGVseSB1bnN1cHBvcnRlZCBpbiBhIGZ1dHVyZSBtYWpvciB2ZXJzaW9uIG9mIEVtb3Rpb24nKTtcbiAgICBzaG91bGRXYXJuQWJvdXRJbnRlcnBvbGF0aW5nQ2xhc3NOYW1lRnJvbUNzcyA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlZCAhPT0gdW5kZWZpbmVkICYmICFjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uID8gY2FjaGVkIDogaW50ZXJwb2xhdGlvbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqKSB7XG4gIHZhciBzdHJpbmcgPSAnJztcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0cmluZyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmpbaV0sIGZhbHNlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtfa2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWQgIT0gbnVsbCAmJiByZWdpc3RlcmVkW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIHJlZ2lzdGVyZWRbdmFsdWVdICsgXCJ9XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9rZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGJhYmVsLXBsdWdpbi1lbW90aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ3N0cmluZycgJiYgKHJlZ2lzdGVyZWQgPT0gbnVsbCB8fCByZWdpc3RlcmVkW3ZhbHVlWzBdXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2YWx1ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWVbX2ldKSkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWVbX2ldKSArIFwiO1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW50ZXJwb2xhdGVkID0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgdmFsdWUsIGZhbHNlKTtcblxuICAgICAgICAgIHN3aXRjaCAoX2tleSkge1xuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIGludGVycG9sYXRlZCArIFwiO1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBfa2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIGludGVycG9sYXRlZCArIFwifVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn1cblxudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbntdKylcXHMqOy9nO1xudmFyIHNvdXJjZU1hcFBhdHRlcm47XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHNvdXJjZU1hcFBhdHRlcm4gPSAvXFwvXFwqI1xcc3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247XFxTK1xccytcXCpcXC8vO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncywgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgfVxuXG4gICAgc3R5bGVzICs9IHN0cmluZ3NbMF07XG4gIH0gLy8gd2Ugc3RhcnQgYXQgMSBzaW5jZSB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIGZpcnN0IGFyZ1xuXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGFyZ3NbaV0sIHN0eWxlcy5jaGFyQ29kZUF0KHN0eWxlcy5sZW5ndGggLSAxKSA9PT0gNDYpO1xuXG4gICAgaWYgKHN0cmluZ01vZGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzICs9IHN0cmluZ3NbaV07XG4gICAgfVxuICB9XG5cbiAgdmFyIHNvdXJjZU1hcDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHN0eWxlcyA9IHN0eWxlcy5yZXBsYWNlKHNvdXJjZU1hcFBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgc291cmNlTWFwID0gbWF0Y2g7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gIH0gLy8gdXNpbmcgYSBnbG9iYWwgcmVnZXggd2l0aCAuZXhlYyBpcyBzdGF0ZWZ1bCBzbyBsYXN0SW5kZXggaGFzIHRvIGJlIHJlc2V0IGVhY2ggdGltZVxuXG5cbiAgbGFiZWxQYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuICB2YXIgbWF0Y2g7IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWI4MDljMmNmMjk0OTgwMGEwZjYxZmI1XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxhYmVsUGF0dGVybi5leGVjKHN0eWxlcykpICE9PSBudWxsKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gJy0nICsgLy8gJEZsb3dGaXhNZSB3ZSBrbm93IGl0J3Mgbm90IG51bGxcbiAgICBtYXRjaFsxXTtcbiAgfVxuXG4gIHZhciBuYW1lID0gaGFzaFN0cmluZyhzdHlsZXMpICsgaWRlbnRpZmllck5hbWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFNlcmlhbGl6ZWRTdHlsZXMgdHlwZSBkb2Vzbid0IGhhdmUgdG9TdHJpbmcgcHJvcGVydHkgKGFuZCB3ZSBkb24ndCB3YW50IHRvIGFkZCBpdClcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgbWFwOiBzb3VyY2VNYXAsXG4gICAgICBuZXh0OiBjdXJzb3IsXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIllvdSBoYXZlIHRyaWVkIHRvIHN0cmluZ2lmeSBvYmplY3QgcmV0dXJuZWQgZnJvbSBgY3NzYCBmdW5jdGlvbi4gSXQgaXNuJ3Qgc3VwcG9zZWQgdG8gYmUgdXNlZCBkaXJlY3RseSAoZS5nLiBhcyB2YWx1ZSBvZiB0aGUgYGNsYXNzTmFtZWAgcHJvcCksIGJ1dCByYXRoZXIgaGFuZGVkIHRvIGVtb3Rpb24gc28gaXQgY2FuIGhhbmRsZSBpdCAoZS5nLiBhcyB2YWx1ZSBvZiBgY3NzYCBwcm9wKS5cIjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogc3R5bGVzLFxuICAgIG5leHQ6IGN1cnNvclxuICB9O1xufTtcblxuZXhwb3J0IHsgc2VyaWFsaXplU3R5bGVzIH07XG4iLCJpbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplU3R5bGVzKGFyZ3MpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjc3M7XG4iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlJztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIGZvcndhcmRSZWYsIGNyZWF0ZUVsZW1lbnQsIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVDYWNoZSBmcm9tICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9zZXJpYWxpemUnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0JztcbmltcG9ydCBjc3MgZnJvbSAnQGVtb3Rpb24vY3NzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcblxudmFyIEVtb3Rpb25DYWNoZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCAvLyB3ZSdyZSBkb2luZyB0aGlzIHRvIGF2b2lkIHByZWNvbnN0cnVjdCdzIGRlYWQgY29kZSBlbGltaW5hdGlvbiBpbiB0aGlzIG9uZSBjYXNlXG4vLyBiZWNhdXNlIHRoaXMgbW9kdWxlIGlzIHByaW1hcmlseSBpbnRlbmRlZCBmb3IgdGhlIGJyb3dzZXIgYW5kIG5vZGVcbi8vIGJ1dCBpdCdzIGFsc28gcmVxdWlyZWQgaW4gcmVhY3QgbmF0aXZlIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cyBzb21ldGltZXNcbi8vIGFuZCB3ZSBjb3VsZCBoYXZlIGEgc3BlY2lhbCBidWlsZCBqdXN0IGZvciB0aGF0XG4vLyBidXQgdGhpcyBpcyBtdWNoIGVhc2llciBhbmQgdGhlIG5hdGl2ZSBwYWNrYWdlc1xuLy8gbWlnaHQgdXNlIGEgZGlmZmVyZW50IHRoZW1lIGNvbnRleHQgaW4gdGhlIGZ1dHVyZSBhbnl3YXlcbnR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBjcmVhdGVDYWNoZSgpIDogbnVsbCk7XG52YXIgVGhlbWVDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG52YXIgQ2FjaGVQcm92aWRlciA9IEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXI7XG5cbnZhciB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KEVtb3Rpb25DYWNoZUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjYWNoZSkge1xuICAgICAgcmV0dXJuIGZ1bmMocHJvcHMsIGNhY2hlLCByZWYpO1xuICAgIH0pO1xuICB9OyAvLyAkRmxvd0ZpeE1lXG5cblxuICByZXR1cm4gZm9yd2FyZFJlZihyZW5kZXIpO1xufTtcblxuLy8gdGh1cyB3ZSBvbmx5IG5lZWQgdG8gcmVwbGFjZSB3aGF0IGlzIGEgdmFsaWQgY2hhcmFjdGVyIGZvciBKUywgYnV0IG5vdCBmb3IgQ1NTXG5cbnZhciBzYW5pdGl6ZUlkZW50aWZpZXIgPSBmdW5jdGlvbiBzYW5pdGl6ZUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gaWRlbnRpZmllci5yZXBsYWNlKC9cXCQvZywgJy0nKTtcbn07XG5cbnZhciB0eXBlUHJvcE5hbWUgPSAnX19FTU9USU9OX1RZUEVfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgbGFiZWxQcm9wTmFtZSA9ICdfX0VNT1RJT05fTEFCRUxfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGNhY2hlLCBwcm9wcywgdGhlbWUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHRoZW1lID09PSBudWxsID8gcHJvcHMuY3NzIDogcHJvcHMuY3NzKHRoZW1lKTsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5uYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpIHtcbiAgICB2YXIgbGFiZWxGcm9tU3RhY2sgPSBwcm9wc1tsYWJlbFByb3BOYW1lXTtcblxuICAgIGlmIChsYWJlbEZyb21TdGFjaykge1xuICAgICAgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhbc2VyaWFsaXplZCwgJ2xhYmVsOicgKyBsYWJlbEZyb21TdGFjayArICc7J10pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBydWxlcyA9IGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKTtcbiAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywga2V5KSAmJiBrZXkgIT09ICdjc3MnICYmIGtleSAhPT0gdHlwZVByb3BOYW1lICYmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIHx8IGtleSAhPT0gbGFiZWxQcm9wTmFtZSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgbmV3UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICB2YXIgZWxlID0gY3JlYXRlRWxlbWVudCh0eXBlLCBuZXdQcm9wcyk7XG5cbiAgcmV0dXJuIGVsZTtcbn07XG5cbnZhciBFbW90aW9uID1cbi8qICNfX1BVUkVfXyAqL1xud2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlLCByZWYpIHtcbiAgLy8gdXNlIENvbnRleHQucmVhZCBmb3IgdGhlIHRoZW1lIHdoZW4gaXQncyBzdGFibGVcbiAgaWYgKHR5cGVvZiBwcm9wcy5jc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgcmV0dXJuIHJlbmRlcihjYWNoZSwgcHJvcHMsIHRoZW1lLCByZWYpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJlbmRlcihjYWNoZSwgcHJvcHMsIG51bGwsIHJlZik7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgRW1vdGlvbi5kaXNwbGF5TmFtZSA9ICdFbW90aW9uQ3NzUHJvcEludGVybmFsJztcbn0gLy8gJEZsb3dGaXhNZVxuXG5cbnZhciBqc3ggPSBmdW5jdGlvbiBqc3godHlwZSwgcHJvcHMpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgaWYgKHByb3BzID09IG51bGwgfHwgIWhhc093blByb3BlcnR5LmNhbGwocHJvcHMsICdjc3MnKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHByb3BzLmNzcyA9PT0gJ3N0cmluZycgJiYgLy8gY2hlY2sgaWYgdGhlcmUgaXMgYSBjc3MgZGVjbGFyYXRpb25cbiAgcHJvcHMuY3NzLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdHJpbmdzIGFyZSBub3QgYWxsb3dlZCBhcyBjc3MgcHJvcCB2YWx1ZXMsIHBsZWFzZSB3cmFwIGl0IGluIGEgY3NzIHRlbXBsYXRlIGxpdGVyYWwgZnJvbSAnQGVtb3Rpb24vY3NzJyBsaWtlIHRoaXM6IGNzc2BcIiArIHByb3BzLmNzcyArIFwiYFwiKTtcbiAgfVxuXG4gIHZhciBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gIHZhciBjcmVhdGVFbGVtZW50QXJnQXJyYXkgPSBuZXcgQXJyYXkoYXJnc0xlbmd0aCk7XG4gIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVswXSA9IEVtb3Rpb247XG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wc1t0eXBlUHJvcE5hbWVdID0gdHlwZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXG4gICAgaWYgKGVycm9yLnN0YWNrKSB7XG4gICAgICAvLyBjaHJvbWVcbiAgICAgIHZhciBtYXRjaCA9IGVycm9yLnN0YWNrLm1hdGNoKC9hdCAoPzpPYmplY3RcXC58KWpzeC4qXFxuXFxzK2F0IChbQS1aXVtBLVphLXokXSspIC8pO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIC8vIHNhZmFyaSBhbmQgZmlyZWZveFxuICAgICAgICBtYXRjaCA9IGVycm9yLnN0YWNrLm1hdGNoKC8uKlxcbihbQS1aXVtBLVphLXokXSspQC8pO1xuICAgICAgfVxuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbmV3UHJvcHNbbGFiZWxQcm9wTmFtZV0gPSBzYW5pdGl6ZUlkZW50aWZpZXIobWF0Y2hbMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVsxXSA9IG5ld1Byb3BzO1xuXG4gIGZvciAodmFyIGkgPSAyOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSB7XG4gICAgY3JlYXRlRWxlbWVudEFyZ0FycmF5W2ldID0gYXJnc1tpXTtcbiAgfSAvLyAkRmxvd0ZpeE1lXG5cblxuICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseShudWxsLCBjcmVhdGVFbGVtZW50QXJnQXJyYXkpO1xufTtcblxudmFyIHdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCA9IGZhbHNlO1xudmFyIEdsb2JhbCA9XG4vKiAjX19QVVJFX18gKi9cbndpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsICYmICggLy8gY2hlY2sgZm9yIGNsYXNzTmFtZSBhcyB3ZWxsIHNpbmNlIHRoZSB1c2VyIGlzXG4gIC8vIHByb2JhYmx5IHVzaW5nIHRoZSBjdXN0b20gY3JlYXRlRWxlbWVudCB3aGljaFxuICAvLyBtZWFucyBpdCB3aWxsIGJlIHR1cm5lZCBpbnRvIGEgY2xhc3NOYW1lIHByb3BcbiAgLy8gJEZsb3dGaXhNZSBJIGRvbid0IHJlYWxseSB3YW50IHRvIGFkZCBpdCB0byB0aGUgdHlwZSBzaW5jZSBpdCBzaG91bGRuJ3QgYmUgdXNlZFxuICBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHMuY3NzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyB0aGUgY3NzIHByb3Agb24gR2xvYmFsLCBkaWQgeW91IG1lYW4gdG8gdXNlIHRoZSBzdHlsZXMgcHJvcCBpbnN0ZWFkP1wiKTtcbiAgICB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcblxuICBpZiAodHlwZW9mIHN0eWxlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFRoZW1lQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhbc3R5bGVzKHRoZW1lKV0pO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoSW5uZXJHbG9iYWwsIHtcbiAgICAgICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICAgICAgY2FjaGU6IGNhY2hlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzdHlsZXNdKTtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoSW5uZXJHbG9iYWwsIHtcbiAgICBzZXJpYWxpemVkOiBzZXJpYWxpemVkLFxuICAgIGNhY2hlOiBjYWNoZVxuICB9KTtcbn0pO1xuXG4vLyBtYWludGFpbiBwbGFjZSBvdmVyIHJlcmVuZGVycy5cbi8vIGluaXRpYWwgcmVuZGVyIGZyb20gYnJvd3NlciwgaW5zZXJ0QmVmb3JlIGNvbnRleHQuc2hlZXQudGFnc1swXSBvciBpZiBhIHN0eWxlIGhhc24ndCBiZWVuIGluc2VydGVkIHRoZXJlIHlldCwgYXBwZW5kQ2hpbGRcbi8vIGluaXRpYWwgY2xpZW50LXNpZGUgcmVuZGVyIGZyb20gU1NSLCB1c2UgcGxhY2Ugb2YgaHlkcmF0aW5nIHRhZ1xudmFyIElubmVyR2xvYmFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKElubmVyR2xvYmFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBJbm5lckdsb2JhbChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHx8IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSW5uZXJHbG9iYWwucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc2hlZXQgPSBuZXcgU3R5bGVTaGVldCh7XG4gICAgICBrZXk6IHRoaXMucHJvcHMuY2FjaGUua2V5ICsgXCItZ2xvYmFsXCIsXG4gICAgICBub25jZTogdGhpcy5wcm9wcy5jYWNoZS5zaGVldC5ub25jZSxcbiAgICAgIGNvbnRhaW5lcjogdGhpcy5wcm9wcy5jYWNoZS5zaGVldC5jb250YWluZXJcbiAgICB9KTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbZGF0YS1lbW90aW9uLVwiICsgdGhpcy5wcm9wcy5jYWNoZS5rZXkgKyBcIj1cXFwiXCIgKyB0aGlzLnByb3BzLnNlcmlhbGl6ZWQubmFtZSArIFwiXFxcIl1cIik7XG5cbiAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5zaGVldC50YWdzLnB1c2gobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuY2FjaGUuc2hlZXQudGFncy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc2hlZXQuYmVmb3JlID0gdGhpcy5wcm9wcy5jYWNoZS5zaGVldC50YWdzWzBdO1xuICAgIH1cblxuICAgIHRoaXMuaW5zZXJ0U3R5bGVzKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAocHJldlByb3BzLnNlcmlhbGl6ZWQubmFtZSAhPT0gdGhpcy5wcm9wcy5zZXJpYWxpemVkLm5hbWUpIHtcbiAgICAgIHRoaXMuaW5zZXJ0U3R5bGVzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMkMSgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zZXJpYWxpemVkLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW5zZXJ0IGtleWZyYW1lc1xuICAgICAgaW5zZXJ0U3R5bGVzKHRoaXMucHJvcHMuY2FjaGUsIHRoaXMucHJvcHMuc2VyaWFsaXplZC5uZXh0LCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgdGhpcyBkb2Vzbid0IGV4aXN0IHRoZW4gaXQgd2lsbCBiZSBudWxsIHNvIHRoZSBzdHlsZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5zaGVldC50YWdzW3RoaXMuc2hlZXQudGFncy5sZW5ndGggLSAxXS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICB0aGlzLnNoZWV0LmJlZm9yZSA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLnNoZWV0LmZsdXNoKCk7XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5jYWNoZS5pbnNlcnQoXCJcIiwgdGhpcy5wcm9wcy5zZXJpYWxpemVkLCB0aGlzLnNoZWV0LCBmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5zaGVldC5mbHVzaCgpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gSW5uZXJHbG9iYWw7XG59KENvbXBvbmVudCk7XG5cbnZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gIHZhciBpbnNlcnRhYmxlID0gY3NzLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgdmFyIG5hbWUgPSBcImFuaW1hdGlvbi1cIiArIGluc2VydGFibGUubmFtZTsgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIG5hbWUgKyBcIntcIiArIGluc2VydGFibGUuc3R5bGVzICsgXCJ9XCIsXG4gICAgYW5pbTogMSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJfRU1PX1wiICsgdGhpcy5uYW1lICsgXCJfXCIgKyB0aGlzLnN0eWxlcyArIFwiX0VNT19cIjtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNscyA9ICcnO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgQ2xhc3NOYW1lcyA9IHdpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjb250ZXh0KSB7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KFRoZW1lQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgdmFyIGhhc1JlbmRlcmVkID0gZmFsc2U7XG5cbiAgICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjc3MgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjb250ZXh0LnJlZ2lzdGVyZWQpO1xuXG4gICAgICB7XG4gICAgICAgIGluc2VydFN0eWxlcyhjb250ZXh0LCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZXh0LmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICAgIH07XG5cbiAgICB2YXIgY3ggPSBmdW5jdGlvbiBjeCgpIHtcbiAgICAgIGlmIChoYXNSZW5kZXJlZCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY3ggY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZShjb250ZXh0LnJlZ2lzdGVyZWQsIGNzcywgY2xhc3NuYW1lcyhhcmdzKSk7XG4gICAgfTtcblxuICAgIHZhciBjb250ZW50ID0ge1xuICAgICAgY3NzOiBjc3MsXG4gICAgICBjeDogY3gsXG4gICAgICB0aGVtZTogdGhlbWVcbiAgICB9O1xuICAgIHZhciBlbGUgPSBwcm9wcy5jaGlsZHJlbihjb250ZW50KTtcbiAgICBoYXNSZW5kZXJlZCA9IHRydWU7XG5cbiAgICByZXR1cm4gZWxlO1xuICB9KTtcbn0pO1xuXG5leHBvcnQgeyBDYWNoZVByb3ZpZGVyLCBDbGFzc05hbWVzLCBHbG9iYWwsIFRoZW1lQ29udGV4dCwganN4LCBrZXlmcmFtZXMsIHdpdGhFbW90aW9uQ2FjaGUgfTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgeyBjbG9zZUFsbE1vZGFsIH0gZnJvbSAnLi4vc2xpY2UnO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIG92ZXJsYXk6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIGJhY2tncm91bmQ6ICcjMDAwMDAwNzAnLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT3ZlcmxheSgpIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gIGNvbnN0IGhhbmRsZU92ZXJsYXkgPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2goY2xvc2VBbGxNb2RhbCgpKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgb25DbGljaz17aGFuZGxlT3ZlcmxheX0gY3NzPXtzdHlsZXMub3ZlcmxheX0gLz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJ1dHRvbih7IHRpdGxlLCBvbkNsaWNrLCBlbW90aW9uIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXtvbkNsaWNrfSBjc3M9e2Vtb3Rpb259PlxuICAgICAge3RpdGxlfVxuICAgIDwvYnV0dG9uPlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7IHNldFRva2VuIH0gZnJvbSAnLi4vc2xpY2UnO1xuXG5pbXBvcnQgeyBwb3B1cE1lc3NhZ2VzIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbjoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHJpZ2h0OiAwLFxuICAgIHdpZHRoOiAnN3JlbScsXG4gICAgaGVpZ2h0OiAnM3JlbScsXG4gICAgZm9udFNpemU6ICcxcmVtJyxcbiAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgYmFja2dyb3VuZDogJ2xpbmVhci1ncmFkaWVudCg5MGRlZywjMjYzNDQzLCAjMzQ2NzlkKScsXG4gICAgYm9yZGVyOiAnbm9uZScsXG4gICAgYm9yZGVyUmFkaXVzOiAnMC42cmVtJyxcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICBtYXJnaW46ICcycmVtJyxcbiAgICBib3hTaGFkb3c6ICcwIDAgOHB4IDBweCAjZmZmZmZmJyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ2luRm9ybSgpIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuXG4gIGNvbnN0IGhhbmRsZUxvZ291dEJ1dHRvbkNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd0b2tlbicpO1xuICAgIGRpc3BhdGNoKHNldFRva2VuKG51bGwpKTtcblxuICAgIGF3YWl0IHBvcHVwTWVzc2FnZXMuc3VjY2Vzcygn66Gc6re47JWE7JuDIOuQmOyXiOyKteuLiOuLpC4nKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxCdXR0b25cbiAgICAgIHRpdGxlPVwi66Gc6re47JWE7JuDXCJcbiAgICAgIG9uQ2xpY2s9e2hhbmRsZUxvZ291dEJ1dHRvbkNsaWNrfVxuICAgICAgZW1vdGlvbj17c3R5bGVzLmJ1dHRvbn1cbiAgICAvPlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGV4dGFyZWEoe1xuICB2YWx1ZSwgb25DaGFuZ2UsIGVtb3Rpb24sIHBsYWNlaG9sZGVyID0gJycsIGRpc2FibGVkID0gJycsXG59KSB7XG4gIHJldHVybiAoXG4gICAgPHRleHRhcmVhXG4gICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICBjc3M9e3sgLi4uZW1vdGlvbiwgcmVzaXplOiAnbm9uZScgfX1cbiAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn1cbiAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAvPlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgeyBzZXRRdWl6Rm9ybSB9IGZyb20gJy4uL3NsaWNlJztcblxuaW1wb3J0IFRleHRhcmVhIGZyb20gJy4vVGV4dGFyZWEnO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHRpdGxlOiB7XG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIGZvbnRTaXplOiAnMS4zcmVtJyxcbiAgICBtYXJnaW5Ub3A6ICcxcmVtJyxcbiAgfSxcbiAgaW5wdXQ6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnOHJlbScsXG4gICAgZm9udFNpemU6ICcxcmVtJyxcbiAgICBwYWRkaW5nOiAnMC43cmVtJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBib3JkZXJSYWRpdXM6ICcwLjRyZW0nLFxuICB9LFxuICB0YWdzOiB7XG4gICAgaGVpZ2h0OiAnM3JlbScsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBRdWl6Rm9ybUlucHV0Q29udGFpbmVyKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHF1aXpGb3JtID0gdXNlU2VsZWN0b3IoKHsgc2VsZlF1aXpSZWR1Y2VyIH0pID0+IHNlbGZRdWl6UmVkdWNlci5xdWl6Rm9ybSk7XG4gIGNvbnN0IHsgcXVlc3Rpb24sIGFuc3dlciwgdGFnU3RyaW5nIH0gPSBxdWl6Rm9ybTtcblxuICBjb25zdCBoYW5kbGVJbnB1dENoYW5nZSA9IChwcm9wTmFtZSkgPT4gKGUpID0+IHtcbiAgICBjb25zdCBmb3JtU3RhdGUgPSB7fTtcbiAgICBmb3JtU3RhdGVbcHJvcE5hbWVdID0gZS50YXJnZXQudmFsdWU7XG5cbiAgICBkaXNwYXRjaChzZXRRdWl6Rm9ybShmb3JtU3RhdGUpKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2IGNzcz17c3R5bGVzLnRpdGxlfT7rrLjsoJw8L2Rpdj5cbiAgICAgIDxUZXh0YXJlYVxuICAgICAgICB2YWx1ZT17cXVlc3Rpb259XG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVJbnB1dENoYW5nZSgncXVlc3Rpb24nKX1cbiAgICAgICAgZW1vdGlvbj17c3R5bGVzLmlucHV0fVxuICAgICAgICBwbGFjZWhvbGRlcj1cIuusuOygnOulvCDsnoXroKXtlbTso7zshLjsmpQuXCJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNzcz17c3R5bGVzLnRpdGxlfT7soJXri7U8L2Rpdj5cbiAgICAgIDxUZXh0YXJlYVxuICAgICAgICB2YWx1ZT17YW5zd2VyfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2UoJ2Fuc3dlcicpfVxuICAgICAgICBlbW90aW9uPXtzdHlsZXMuaW5wdXR9XG4gICAgICAgIHBsYWNlaG9sZGVyPVwi7KCV64u17J2EIOyeheugpe2VtOyjvOyEuOyalC5cIlxuICAgICAgLz5cbiAgICAgIDxkaXYgY3NzPXtzdHlsZXMudGl0bGV9PiPtg5zqt7g8L2Rpdj5cbiAgICAgIDxUZXh0YXJlYVxuICAgICAgICB2YWx1ZT17dGFnU3RyaW5nfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlSW5wdXRDaGFuZ2UoJ3RhZ1N0cmluZycpfVxuICAgICAgICBlbW90aW9uPXt7IC4uLnN0eWxlcy5pbnB1dCwgLi4uc3R5bGVzLnRhZ3MgfX1cbiAgICAgICAgcGxhY2Vob2xkZXI9XCIj7Jik64qY7J2YICPrrLjsoJxcIlxuICAgICAgLz5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHsgYWRkUXVpeiwgcmVzZXRRdWl6Rm9ybSB9IGZyb20gJy4uL3NsaWNlJztcblxuaW1wb3J0IGFwaSBmcm9tICcuLi9hcGlzL2FwaSc7XG5cbmltcG9ydCB7IHBvcHVwTWVzc2FnZXMsIGNvbnZlcnRUYWdTdHJpbmdUb1RhZ3MgfSBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgYnV0dG9uOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBtYXJnaW5Ub3A6ICcycmVtJyxcbiAgICBoZWlnaHQ6ICczcmVtJyxcbiAgICBmb250U2l6ZTogJzEuNHJlbScsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGJhY2tncm91bmQ6ICcjMjQ0YTcyJyxcbiAgICBib3JkZXI6ICdub25lJyxcbiAgICBib3JkZXJSYWRpdXM6ICcwLjVyZW0nLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9naW5Gb3JtKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHF1aXpGb3JtID0gdXNlU2VsZWN0b3IoKHsgc2VsZlF1aXpSZWR1Y2VyIH0pID0+IHNlbGZRdWl6UmVkdWNlci5xdWl6Rm9ybSk7XG4gIGNvbnN0IHsgcXVlc3Rpb24sIGFuc3dlciwgdGFnU3RyaW5nIH0gPSBxdWl6Rm9ybTtcblxuICBjb25zdCBoYW5kbGVMb2dpbkJ1dHRvbkNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRhZ3MgPSBjb252ZXJ0VGFnU3RyaW5nVG9UYWdzKHRhZ1N0cmluZyk7XG4gICAgY29uc3QgbmV3UXVpeiA9IGF3YWl0IGFwaS5hZGRRdWl6KHF1ZXN0aW9uLCBhbnN3ZXIsIHRhZ3MpO1xuXG4gICAgaWYgKCFuZXdRdWl6KSB7XG4gICAgICBhd2FpdCBwb3B1cE1lc3NhZ2VzLmZhaWwoJ+yLpO2MqO2WiOyKteuLiOuLpC4g64uk7IucIOyLnOuPhO2VtOyjvOyEuOyalC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhd2FpdCBwb3B1cE1lc3NhZ2VzLnN1Y2Nlc3MoJ+y2lOqwgOuQmOyXiOyKteuLiOuLpC4nKTtcbiAgICBkaXNwYXRjaChhZGRRdWl6KG5ld1F1aXopKTtcbiAgICBkaXNwYXRjaChyZXNldFF1aXpGb3JtKCkpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEJ1dHRvblxuICAgICAgdGl0bGU9XCLtmZXsnbhcIlxuICAgICAgb25DbGljaz17aGFuZGxlTG9naW5CdXR0b25DbGlja31cbiAgICAgIGVtb3Rpb249e3N0eWxlcy5idXR0b259XG4gICAgLz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBRdWl6Rm9ybUlucHV0Q29udGFpbmVyIGZyb20gJy4vUXVpekZvcm1JbnB1dENvbnRhaW5lcic7XG5pbXBvcnQgUXVpekZvcm1CdXR0b25Db250YWluZXIgZnJvbSAnLi9RdWl6Rm9ybUJ1dHRvbkNvbnRhaW5lcic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbGF5b3V0OiB7XG4gICAgdG9wOiAnMTUlJyxcbiAgICBsZWZ0OiAnNTAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgMCknLFxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHdpZHRoOiAnNDByZW0nLFxuICAgIGhlaWdodDogJzQwcmVtJyxcbiAgICBib3JkZXJSYWRpdXM6ICcwLjVyZW0nLFxuICAgIGJhY2tncm91bmQ6ICd3aGl0ZScsXG4gICAgYm94U2hhZG93OiAnMCAwIDExcHggMHB4ICMyNDRhNzInLFxuICB9LFxuICB0aXRsZToge1xuICAgIGZvbnRTaXplOiAnMS41cmVtJyxcbiAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgYmFja2dyb3VuZDogJyMyNDRhNzInLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIHBhZGRpbmc6ICcwLjRyZW0gMXJlbScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgYm9yZGVyUmFkaXVzOiAnMC41cmVtIDAuNXJlbSAwIDAnLFxuICB9LFxuICBjb250YWluZXI6IHtcbiAgICBwYWRkaW5nOiAnMnJlbScsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBRdWl6Rm9ybSgpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17c3R5bGVzLmxheW91dH0+XG4gICAgICA8ZGl2IGNzcz17c3R5bGVzLnRpdGxlfT7rrLjsoJwg66eM65Ok6riwPC9kaXY+XG4gICAgICA8ZGl2IGNzcz17c3R5bGVzLmNvbnRhaW5lcn0+XG4gICAgICAgIDxRdWl6Rm9ybUlucHV0Q29udGFpbmVyIC8+XG4gICAgICAgIDxRdWl6Rm9ybUJ1dHRvbkNvbnRhaW5lciAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHsgc2V0VG9kYXlzQW5zd2VyT24sIHJlbW92ZVRvZGF5c1F1aXogfSBmcm9tICcuLi9zbGljZSc7XG5cbmltcG9ydCBhcGkgZnJvbSAnLi4vYXBpcy9hcGknO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vQnV0dG9uJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBsYXlvdXQ6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICBtYXJnaW5Ub3A6ICcycmVtJyxcbiAgfSxcbiAgYnVuZGxlOiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICB9LFxuICBidXR0b246IHtcbiAgICBtYXJnaW46ICcxcmVtIDAgMCAwLjJyZW0nLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGJhY2tncm91bmQ6ICcjMjQ0YTcyJyxcbiAgICBmb250U2l6ZTogJzFyZW0nLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICB3aWR0aDogJzhyZW0nLFxuICAgIGhlaWdodDogJzNyZW0nLFxuICAgIGJvcmRlcjogJ25vbmUnLFxuICAgIGJvcmRlclJhZGl1czogJzAuM3JlbScsXG4gICAgYm94U2hhZG93OiAnMCAwIDRweCAzcHggI2E5ZGZjMycsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUb2RheXNRdWl6KHsgcXVpeiB9KSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICBjb25zdCBoYW5kbGVTaG93QW5zd2VyQnV0dG9uID0gKCkgPT4ge1xuICAgIGRpc3BhdGNoKHNldFRvZGF5c0Fuc3dlck9uKHRydWUpKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVQYXNzQnV0dG9uID0gYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGFwaS5wYXNzUXVpeihxdWl6Ll9pZCk7XG4gICAgZGlzcGF0Y2gocmVtb3ZlVG9kYXlzUXVpeihxdWl6Ll9pZCkpO1xuICAgIGRpc3BhdGNoKHNldFRvZGF5c0Fuc3dlck9uKGZhbHNlKSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRmFpbEJ1dHRvbiA9IGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBhcGkuZmFpbFF1aXoocXVpei5faWQpO1xuICAgIGRpc3BhdGNoKHJlbW92ZVRvZGF5c1F1aXoocXVpei5faWQpKTtcbiAgICBkaXNwYXRjaChzZXRUb2RheXNBbnN3ZXJPbihmYWxzZSkpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkaXYgY3NzPXtzdHlsZXMubGF5b3V0fT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0aXRsZT1cIuygleuLtSDtmZXsnbjtlZjquLBcIlxuICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU2hvd0Fuc3dlckJ1dHRvbn1cbiAgICAgICAgICAgIGVtb3Rpb249e3N0eWxlcy5idXR0b259XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY3NzPXtzdHlsZXMuYnVuZGxlfT5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0aXRsZT1cIuyLpO2MqFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVGYWlsQnV0dG9ufVxuICAgICAgICAgICAgZW1vdGlvbj17eyAuLi5zdHlsZXMuYnV0dG9uLCBiYWNrZ3JvdW5kOiAnYmxhY2snIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICB0aXRsZT1cIu2GteqzvFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVQYXNzQnV0dG9ufVxuICAgICAgICAgICAgZW1vdGlvbj17eyAuLi5zdHlsZXMuYnV0dG9uLCBiYWNrZ3JvdW5kOiAnZ3JlZW4nIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBUb2RheXNRdWl6QnV0dG9uIGZyb20gJy4vVG9kYXlzUXVpekJ1dHRvbic7XG5pbXBvcnQgVGV4dGFyZWEgZnJvbSAnLi9UZXh0YXJlYSc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbGF5b3V0OiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgcmlnaHQ6ICcwJyxcbiAgICBib3R0b206ICcwJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzQ3cmVtJyxcbiAgICBvcGFjaXR5OiAnMC44JyxcbiAgICBiYWNrZ3JvdW5kOiAnIzAwMDAwMCcsXG4gIH0sXG4gIG1lc3NhZ2U6IHtcbiAgICBmb250U2l6ZTogJzJyZW0nLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICB3aWR0aDogJ21heC1jb250ZW50JyxcbiAgICBwYWRkaW5nOiAnMC41cmVtJyxcbiAgICBtYXJnaW46ICcyMHJlbSBhdXRvJyxcbiAgICBib3JkZXJCb3R0b206ICczcHggc29saWQgd2hpdGUnLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICB9LFxuICBxdWVzdGlvbjoge1xuICAgIGZvbnRTaXplOiAnMS44cmVtJyxcbiAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgbWFyZ2luQm90dG9tOiAnMnJlbScsXG4gICAgaGVpZ2h0OiAnMTByZW0nLFxuICB9LFxuICBhbnN3ZXI6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEycmVtJyxcbiAgICBiYWNrZ3JvdW5kOiAnd2hpdGUnLFxuICAgIGZvbnRTaXplOiAnMS4ycmVtJyxcbiAgICBtYXJnaW5Cb3R0b206ICcycmVtJyxcbiAgICByZXNpemU6ICdub25lJyxcbiAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICBib3JkZXI6ICczcHggc29saWQgd2hpdGUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICB9LFxuICBib3g6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzdyZW0nLFxuICAgIGZvbnRTaXplOiAnMS4ycmVtJyxcbiAgICBwYWRkaW5nOiAnMXJlbScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIH0sXG4gIGNvdW50OiB7XG4gICAgdGV4dEFsaWduOiAnZW5kJyxcbiAgICBtYXJnaW5Cb3R0b206ICcxcmVtJyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRvZGF5c1F1aXpFbXB0eSgpIHtcbiAgY29uc3QgZHVtbXlRdWl6ID0ge1xuICAgIHF1ZXN0aW9uOiAnXCLsmKTripjsnZgg66y47KCcXCLrnbzripQg7Ju5IOyWtO2UjOumrOy8gOydtOyFmOydhCDrp4zrk6Ag7J207Jyg64qUIOustOyXh+yduOyngCDshKTrqoXtlZjsi5zsmKQuJyxcbiAgICBhbnN3ZXI6ICfso7zquLDsoIHsnbgg67O17Iq17J2EIO2Gte2VtCDtlZnsirUg64ql66Wg7J2EIOuGkuydtOqzoOyekCBcIuyYpOuKmOydmCDrrLjsoJxcIuudvOuKlCDtlITroZzsoJ3tirjrpbwgJ1xuICAgICsgJ+ynhO2Wie2VmOqyjCDrkJjsl4jsirXri4jri6QuIFwi7Jik64qY7J2YIOusuOygnFwi64qUIOq3uOuCoOq3uOuCoCDrs7XsirXtlbTslbztlZjripQg7KeA7Iud65Ok7J2EIOunneqwgeqzoeyEoOydhCAnXG4gICAgKyAn7Yag64yA66GcIOyekOuPmeyggeycvOuhnCDrs7Tsl6zso7zslrQg7KO86riw7KCB7J24IOuzteyKteydhCDqsJXsmpTtlZjripQg7Ju5IOyWtO2UjOumrOy8gOydtOyFmOyeheuLiOuLpC4nLFxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkaXYgY3NzPXtzdHlsZXMubGF5b3V0fT5cbiAgICAgICAgPGRpdiBjc3M9e3N0eWxlcy5tZXNzYWdlfT7smKTripjsnZgg66qo65OgIOusuOygnOulvCDri6Qg7ZKA7JeI7Iq164uI64ukPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtzdHlsZXMuY291bnR9PuuCqOydgCDrrLjsoJw6IDA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtzdHlsZXMucXVlc3Rpb259PlEuIHtkdW1teVF1aXoucXVlc3Rpb259PC9kaXY+XG4gICAgICA8VGV4dGFyZWFcbiAgICAgICAgdmFsdWU9e2BBLiAke2R1bW15UXVpei5hbnN3ZXJ9YH1cbiAgICAgICAgZW1vdGlvbj17c3R5bGVzLmFuc3dlcn1cbiAgICAgICAgZGlzYWJsZWQ9XCJkaXNhYmxlZFwiXG4gICAgICAvPlxuICAgICAgPFRleHRhcmVhXG4gICAgICAgIGVtb3Rpb249e3N0eWxlcy5ib3h9XG4gICAgICAgIHBsYWNlaG9sZGVyPVwi7KCV64u17J2EIOyeheugpe2VmOyEuOyalC5cIlxuICAgICAgLz5cbiAgICAgIDxkaXY+7KCV64u17J2EIOyDneqwgeunjO2VmOuKlCDqsoPqs7wg7KeB7KCRIOq4gOuhnCDsnpHshLHtlZjsl6wg64GE7KeR7Ja064K064qUIOqyg+ydgCDri6TrpoXri4jri6QuIOyngeygkSDsnoXroKXtlZjsi6Ag65KkIOygleuLteydhCDtmZXsnbjtlZjsi5zquLgg7LaU7LKc65Oc66a964uI64ukLjwvZGl2PlxuICAgICAgPFRvZGF5c1F1aXpCdXR0b24gLz5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgVGV4dGFyZWEgZnJvbSAnLi9UZXh0YXJlYSc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgcXVlc3Rpb246IHtcbiAgICBmb250U2l6ZTogJzEuOHJlbScsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIG1hcmdpbkJvdHRvbTogJzJyZW0nLFxuICAgIGhlaWdodDogJzEwcmVtJyxcbiAgfSxcbiAgYW5zd2VyOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMnJlbScsXG4gICAgYmFja2dyb3VuZDogJ3doaXRlJyxcbiAgICBmb250U2l6ZTogJzEuMnJlbScsXG4gICAgbWFyZ2luQm90dG9tOiAnMnJlbScsXG4gICAgcmVzaXplOiAnbm9uZScsXG4gIH0sXG4gIG9uOiB7XG4gICAgY29sb3I6ICdibGFjaycsXG4gICAgYm9yZGVyOiAnM3B4IHNvbGlkIHdoaXRlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgfSxcbiAgb2ZmOiB7XG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgYm9yZGVyOiAnM3B4IGRhc2hlZCAjMjQ0YTcyJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgfSxcbiAgYm94OiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICc3cmVtJyxcbiAgICBmb250U2l6ZTogJzEuMnJlbScsXG4gICAgcGFkZGluZzogJzFyZW0nLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVG9kYXlzUXVpekl0ZW0oeyBxdWl6IH0pIHtcbiAgY29uc3QgeyBhbnN3ZXJPbiB9ID0gdXNlU2VsZWN0b3IoKHsgc2VsZlF1aXpSZWR1Y2VyIH0pID0+IHNlbGZRdWl6UmVkdWNlci50b2RheXMpO1xuXG4gIGNvbnN0IHsgcXVlc3Rpb24sIGFuc3dlciwgdGFncyB9ID0gcXVpejtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2IGNzcz17c3R5bGVzLnF1ZXN0aW9ufT5cbiAgICAgICAgUS4ge3F1ZXN0aW9ufVxuICAgICAgPC9kaXY+XG4gICAgICA8VGV4dGFyZWFcbiAgICAgICAgdmFsdWU9e2BBLiAke2Fuc3dlcn1gfVxuICAgICAgICBlbW90aW9uPXt7IC4uLnN0eWxlcy5hbnN3ZXIsIC4uLihhbnN3ZXJPbiA/IHN0eWxlcy5vbiA6IHN0eWxlcy5vZmYpIH19XG4gICAgICAgIGRpc2FibGVkPVwiZGlzYWJsZWRcIlxuICAgICAgLz5cbiAgICAgIDxUZXh0YXJlYVxuICAgICAgICBlbW90aW9uPXtzdHlsZXMuYm94fVxuICAgICAgICBwbGFjZWhvbGRlcj1cIuygleuLteydhCDsnoXroKXtlZjshLjsmpQuXCJcbiAgICAgIC8+XG4gICAgICA8ZGl2PuygleuLteydhCDsg53qsIHrp4ztlZjripQg6rKD6rO8IOyngeygkSDquIDroZwg7J6R7ISx7ZWY7JesIOuBhOynkeyWtOuCtOuKlCDqsoPsnYAg64uk66aF64uI64ukLiDsp4HsoJEg7J6F66Cl7ZWY7IugIOuSpCDsoJXri7XsnYQg7ZmV7J247ZWY7Iuc6ri4IOy2lOyynOuTnOumveuLiOuLpC48L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgVG9kYXlzUXVpekVtcHR5IGZyb20gJy4vVG9kYXlzUXVpekVtcHR5JztcbmltcG9ydCBUb2RheXNRdWl6SXRlbSBmcm9tICcuL1RvZGF5c1F1aXpJdGVtJztcbmltcG9ydCBUb2RheXNRdWl6QnV0dG9uIGZyb20gJy4vVG9kYXlzUXVpekJ1dHRvbic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbGF5b3V0OiB7XG4gICAgdG9wOiAnOCUnLFxuICAgIGxlZnQ6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLDApJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB3aWR0aDogJzYzcmVtJyxcbiAgICBoZWlnaHQ6ICc1MHJlbScsXG4gICAgYm9yZGVyUmFkaXVzOiAnMC41cmVtJyxcbiAgICBiYWNrZ3JvdW5kOiAnd2hpdGUnLFxuICAgIGJveFNoYWRvdzogJzAgMCAxMXB4IDBweCAjMjQ0YTcyJyxcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogJzEuNXJlbScsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIGJhY2tncm91bmQ6ICcjMjQ0YTcyJyxcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICBwYWRkaW5nOiAnMC40cmVtIDFyZW0nLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGJvcmRlclJhZGl1czogJzAuNXJlbSAwLjVyZW0gMCAwJyxcbiAgfSxcbiAgY29udGFpbmVyOiB7XG4gICAgcGFkZGluZzogJzJyZW0nLFxuICB9LFxuICBjb3VudDoge1xuICAgIHRleHRBbGlnbjogJ2VuZCcsXG4gICAgbWFyZ2luQm90dG9tOiAnMXJlbScsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUb2RheXNRdWl6KCkge1xuICBjb25zdCB7IHRvZGF5cyB9ID0gdXNlU2VsZWN0b3IoKHsgc2VsZlF1aXpSZWR1Y2VyIH0pID0+IHNlbGZRdWl6UmVkdWNlcik7XG4gIGNvbnN0IHRhcmdldFF1aXogPSB0b2RheXMucXVpenplc1swXSB8fCB7IHF1ZXN0aW9uOiAnJywgYW5zd2VyOiAnJywgdGFnczogW10gfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXtzdHlsZXMubGF5b3V0fT5cbiAgICAgIDxkaXYgY3NzPXtzdHlsZXMudGl0bGV9PuyYpOuKmOydmCDrrLjsoJw8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAge3RvZGF5cy5xdWl6emVzLmxlbmd0aCA9PT0gMFxuICAgICAgICAgID8gPFRvZGF5c1F1aXpFbXB0eSAvPlxuICAgICAgICAgIDogKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPGRpdiBjc3M9e3N0eWxlcy5jb3VudH0+64Ko7J2AIOusuOygnDoge3RvZGF5cy5xdWl6emVzLmxlbmd0aH08L2Rpdj5cbiAgICAgICAgICAgICAgPFRvZGF5c1F1aXpJdGVtIHF1aXo9e3RhcmdldFF1aXp9IC8+XG4gICAgICAgICAgICAgIDxUb2RheXNRdWl6QnV0dG9uIHF1aXo9e3RhcmdldFF1aXp9IC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQgeyBzZXRBZGRpbmdNb2RhbCwgc2V0VG9kYXlzUXVpek1vZGFsLCBzZXRPdmVybGF5IH0gZnJvbSAnLi4vc2xpY2UnO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vQnV0dG9uJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICB0YWI6IHtcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICB9LFxuICBzZWxlY3Rpb246IHtcbiAgICBib3JkZXI6ICdub25lJyxcbiAgICBib3JkZXJSYWRpdXM6ICcxcmVtJyxcbiAgICB3aWR0aDogJzIwcmVtJyxcbiAgICBoZWlnaHQ6ICcyMHJlbScsXG4gICAgbWFyZ2luOiAnMC41cmVtJyxcbiAgICBib3hTaGFkb3c6ICcwIDAgNnB4IDBweCAjZmZmZmZmJyxcbiAgICBiYWNrZ3JvdW5kOiAnbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCBibGFjaywgdHJhbnNwYXJlbnQpJyxcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICBmb250U2l6ZTogJzEuM3JlbScsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYmFja2dyb3VuZDogJyMzZTdjYmM1NCcsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB9LFxuICAgICcmOmZvY3VzJzoge1xuICAgICAgYmFja2dyb3VuZDogJyMzZTdjYmM1NCcsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB9LFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVGFiKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG5cbiAgY29uc3QgaGFuZGxlQWRkaW5nQnV0dG9uID0gKCkgPT4ge1xuICAgIGRpc3BhdGNoKHNldEFkZGluZ01vZGFsKHRydWUpKTtcbiAgICBkaXNwYXRjaChzZXRPdmVybGF5KHRydWUpKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVUb2RheXNCdXR0b24gPSAoKSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0VG9kYXlzUXVpek1vZGFsKHRydWUpKTtcbiAgICBkaXNwYXRjaChzZXRPdmVybGF5KHRydWUpKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXtzdHlsZXMudGFifT5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgdGl0bGU9XCLrrLjsoJwg7LaU6rCAXCJcbiAgICAgICAgb25DbGljaz17aGFuZGxlQWRkaW5nQnV0dG9ufVxuICAgICAgICBlbW90aW9uPXtzdHlsZXMuc2VsZWN0aW9ufVxuICAgICAgLz5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgdGl0bGU9XCLsmKTripjsnZgg66y47KCcXCJcbiAgICAgICAgb25DbGljaz17aGFuZGxlVG9kYXlzQnV0dG9ufVxuICAgICAgICBlbW90aW9uPXtzdHlsZXMuc2VsZWN0aW9ufVxuICAgICAgLz5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgdGl0bGU9XCLslYTsubTsnbTruIxcIlxuICAgICAgICBvbkNsaWNrPXsoKSA9PiBoaXN0b3J5LnB1c2goJy9hcmNoaXZlJyl9XG4gICAgICAgIGVtb3Rpb249e3N0eWxlcy5zZWxlY3Rpb259XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgeyBsb2FkVXNlck5hbWUgfSBmcm9tICcuLi9zbGljZSc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgdGl0bGU6IHtcbiAgICB3aWR0aDogJzYwcmVtJyxcbiAgICBkaXNwbGF5OiAndGFibGUnLFxuICAgIG1hcmdpbjogJzAgYXV0bycsXG4gIH0sXG4gIG5hbWU6IHtcbiAgICBmb250U2l6ZTogJzNyZW0nLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICBtYXJnaW5Ub3A6ICcxMHJlbScsXG4gIH0sXG4gIHRleHQ6IHtcbiAgICBmb250U2l6ZTogJzEuNXJlbScsXG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgbWFyZ2luQm90dG9tOiAnMTByZW0nLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVXNlclRpdGxlKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHsgdXNlciwgdG9kYXlzIH0gPSB1c2VTZWxlY3RvcigoeyBzZWxmUXVpelJlZHVjZXIgfSkgPT4gc2VsZlF1aXpSZWR1Y2VyKTtcbiAgY29uc3QgeyBuYW1lIH0gPSB1c2VyO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBkaXNwYXRjaChsb2FkVXNlck5hbWUoKSk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17c3R5bGVzLnRpdGxlfT5cbiAgICAgIDxkaXYgY3NzPXtzdHlsZXMubmFtZX0+e25hbWV964uYLDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e3N0eWxlcy50ZXh0fT7smKTripgg67O17Iq17ZW07JW8IO2VoCDrrLjsoJzripQg7LSdIHt0b2RheXMucXVpenplcy5sZW5ndGh966y47KCcIOyeheuLiOuLpC48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHsgbG9hZFF1aXp6ZXMgfSBmcm9tICcuLi9zbGljZSc7XG5cbmltcG9ydCBMb2dvdXRCdXR0b25Db250YWluZXIgZnJvbSAnLi4vY29tcG9uZW50cy9Mb2dvdXRCdXR0b25Db250YWluZXInO1xuaW1wb3J0IFF1aXpGb3JtIGZyb20gJy4uL2NvbXBvbmVudHMvUXVpekZvcm0nO1xuaW1wb3J0IFRvZGF5c1F1aXogZnJvbSAnLi4vY29tcG9uZW50cy9Ub2RheXNRdWl6JztcbmltcG9ydCBUYWIgZnJvbSAnLi4vY29tcG9uZW50cy9UYWInO1xuaW1wb3J0IFVzZXJUaXRsZSBmcm9tICcuLi9jb21wb25lbnRzL1VzZXJUaXRsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1haW5QYWdlKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHN0YXRlcyA9IHVzZVNlbGVjdG9yKCh7IHNlbGZRdWl6UmVkdWNlciB9KSA9PiBzZWxmUXVpelJlZHVjZXIpO1xuICBjb25zdCB7IHF1aXp6ZXMsIG1vZGFsIH0gPSBzdGF0ZXM7XG4gIGNvbnN0IHsgYWRkaW5nLCB0b2RheXMgfSA9IG1vZGFsO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHF1aXp6ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkaXNwYXRjaChsb2FkUXVpenplcygpKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8TG9nb3V0QnV0dG9uQ29udGFpbmVyIC8+XG4gICAgICB7YWRkaW5nICYmIDxRdWl6Rm9ybSAvPn1cbiAgICAgIHt0b2RheXMgJiYgPFRvZGF5c1F1aXogLz59XG4gICAgICA8VXNlclRpdGxlIC8+XG4gICAgICA8VGFiIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBJbnB1dCh7XG4gIHZhbHVlLCBvbkNoYW5nZSwgZW1vdGlvbiwgcGxhY2Vob2xkZXIgPSAnJywgdHlwZSA9ICd0ZXh0Jyxcbn0pIHtcbiAgcmV0dXJuIChcbiAgICA8aW5wdXRcbiAgICAgIHR5cGU9e3R5cGV9XG4gICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICBjc3M9e2Vtb3Rpb259XG4gICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJ9XG4gICAgLz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHsgc2V0TG9naW5JZCwgc2V0TG9naW5QdyB9IGZyb20gJy4uL3NsaWNlJztcblxuaW1wb3J0IElucHV0IGZyb20gJy4vSW5wdXQnO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGxheW91dDoge1xuICAgIG1hcmdpbkJvdHRvbTogJzFyZW0nLFxuICB9LFxuICBpbnB1dDoge1xuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgZm9udFNpemU6ICcxcmVtJyxcbiAgICB3aWR0aDogJzI1cmVtJyxcbiAgICBoZWlnaHQ6ICczcmVtJyxcbiAgICBib3JkZXI6ICdub25lJyxcbiAgICBib3JkZXJCb3R0b206ICcxcHggc29saWQgIzNlN2NiYycsXG4gICAgcGFkZGluZ0xlZnQ6ICcxcmVtJyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ2luRm9ybSgpIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB7IGlkLCBwdyB9ID0gdXNlU2VsZWN0b3IoKHsgc2VsZlF1aXpSZWR1Y2VyIH0pID0+IHNlbGZRdWl6UmVkdWNlci5sb2dpbik7XG5cbiAgY29uc3QgaGFuZGxlTG9naW5JZElucHV0ID0gKGV2ZW50KSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0TG9naW5JZChldmVudC50YXJnZXQudmFsdWUpKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVMb2dpblB3SW5wdXQgPSAoZXZlbnQpID0+IHtcbiAgICBkaXNwYXRjaChzZXRMb2dpblB3KGV2ZW50LnRhcmdldC52YWx1ZSkpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3N0eWxlcy5sYXlvdXR9PlxuICAgICAgPElucHV0XG4gICAgICAgIHZhbHVlPXtpZH1cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUxvZ2luSWRJbnB1dH1cbiAgICAgICAgZW1vdGlvbj17c3R5bGVzLmlucHV0fVxuICAgICAgICBwbGFjZWhvbGRlcj1cIuyVhOydtOuUlOulvCDsnoXroKXtlbTso7zshLjsmpQuXCJcbiAgICAgIC8+XG4gICAgICA8SW5wdXRcbiAgICAgICAgdmFsdWU9e3B3fVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlTG9naW5Qd0lucHV0fVxuICAgICAgICBlbW90aW9uPXtzdHlsZXMuaW5wdXR9XG4gICAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICAgIHBsYWNlaG9sZGVyPVwi67mE67CA67KI7Zi466W8IOyeheugpe2VtOyjvOyEuOyalC5cIlxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHsgc2V0VG9rZW4sIHNldFF1aXp6ZXMgfSBmcm9tICcuLi9zbGljZSc7XG5cbmltcG9ydCB7IHBvcHVwTWVzc2FnZXMgfSBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IGFwaSBmcm9tICcuLi9hcGlzL2FwaSc7XG5cbmltcG9ydCBCdXR0b24gZnJvbSAnLi9CdXR0b24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbjoge1xuICAgIGZvbnRTaXplOiAnMXJlbScsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyMyNDRhNzInLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnM3JlbScsXG4gICAgYm9yZGVyOiAnbm9uZScsXG4gICAgYm9yZGVyUmFkaXVzOiAnMC41cmVtJyxcbiAgICBtYXJnaW5Ub3A6ICcwLjVyZW0nLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9naW5Gb3JtKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHsgaWQsIHB3IH0gPSB1c2VTZWxlY3RvcigoeyBzZWxmUXVpelJlZHVjZXIgfSkgPT4gc2VsZlF1aXpSZWR1Y2VyLmxvZ2luKTtcblxuICBjb25zdCBoYW5kbGVMb2dpbkJ1dHRvbkNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRva2VuID0gYXdhaXQgYXBpLmxvZ2luKGlkLCBwdyk7XG5cbiAgICBpZiAoIXRva2VuKSB7XG4gICAgICBhd2FpdCBwb3B1cE1lc3NhZ2VzLmZhaWwoJ+yVhOydtOuUlCDtmLnsnYAg7Yyo7Iqk7JuM65Oc6rCAIOydvOy5mO2VmOyngCDslYrsirXri4jri6QuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXdhaXQgcG9wdXBNZXNzYWdlcy5zdWNjZXNzKCfroZzqt7jsnbgg7ISx6rO1Jyk7XG5cbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9rZW4nLCB0b2tlbik7XG4gICAgZGlzcGF0Y2goc2V0VG9rZW4odG9rZW4pKTtcblxuICAgIGNvbnN0IHF1aXp6ZXMgPSBhd2FpdCBhcGkuZ2V0UXVpenplcygpO1xuICAgIGRpc3BhdGNoKHNldFF1aXp6ZXMocXVpenplcykpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgdGl0bGU9XCLroZzqt7jsnbhcIlxuICAgICAgICBvbkNsaWNrPXtoYW5kbGVMb2dpbkJ1dHRvbkNsaWNrfVxuICAgICAgICBlbW90aW9uPXtzdHlsZXMuYnV0dG9ufVxuICAgICAgLz5cbiAgICAgIDxCdXR0b25cbiAgICAgICAgdGl0bGU9XCLtmozsm5DqsIDsnoVcIlxuICAgICAgICBvbkNsaWNrPXtoYW5kbGVMb2dpbkJ1dHRvbkNsaWNrfVxuICAgICAgICBlbW90aW9uPXt7IC4uLnN0eWxlcy5idXR0b24sIGJhY2tncm91bmRDb2xvcjogJyMyNzc5Y2UnIH19XG4gICAgICAvPlxuICAgIDwvPlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IExvZ2luSW5wdXRDb250YWluZXIgZnJvbSAnLi9Mb2dpbklucHV0Q29udGFpbmVyJztcbmltcG9ydCBMb2dpbkJ1dHRvbkNvbnRhaW5lciBmcm9tICcuL0xvZ2luQnV0dG9uQ29udGFpbmVyJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBsYXlvdXQ6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICcyMCUnLFxuICAgIGxlZnQ6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCAwKScsXG4gICAgd2lkdGg6ICczMHJlbScsXG4gICAgaGVpZ2h0OiAnMzVyZW0nLFxuICAgIGJvcmRlclJhZGl1czogJzAuNXJlbScsXG4gICAgYmFja2dyb3VuZDogJ3doaXRlJyxcbiAgICBib3hTaGFkb3c6ICcwIDAgMTFweCAwcHggIzI0NGE3MicsXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgYmFja2dyb3VuZDogJyMwOTI3NDcnLFxuICAgIGhlaWdodDogJzNyZW0nLFxuICAgIGJvcmRlclJhZGl1czogJzAuNXJlbSAwLjVyZW0gMCAwJyxcbiAgfSxcbiAgY29udGFpbmVyOiB7XG4gICAgcGFkZGluZzogJzJyZW0nLFxuICB9LFxuICB0ZXh0OiB7XG4gICAgbWFyZ2luVG9wOiAnMnJlbScsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBmb250U2l6ZTogJzJyZW0nLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBjb2xvcjogJyMyNDRhNzInLFxuICB9LFxuICBsb2dvOiB7XG4gICAgd2lkdGg6ICcxMnJlbScsXG4gICAgbWFyZ2luOiAnMCBhdXRvIDRyZW0gYXV0bycsXG4gICAgZGlzcGxheTogJ3RhYmxlJyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExvZ2luRm9ybSgpIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNzcz17c3R5bGVzLmxheW91dH0+XG4gICAgICA8ZGl2IGNzcz17c3R5bGVzLnRpdGxlfSAvPlxuICAgICAgPGRpdiBjc3M9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8ZGl2IGNzcz17c3R5bGVzLnRleHR9PuyYpOuKmOydmCDrrLjsoJw8L2Rpdj5cbiAgICAgICAgPGltZyBzcmM9XCJzcmMvc3R5bGVzL2xvZ28ucG5nXCIgYWx0PVwi66Gc6rOgXCIgY3NzPXtzdHlsZXMubG9nb30gLz5cbiAgICAgICAgPExvZ2luSW5wdXRDb250YWluZXIgLz5cbiAgICAgICAgPExvZ2luQnV0dG9uQ29udGFpbmVyIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgTWFpblBhZ2UgZnJvbSAnLi9NYWluUGFnZSc7XG5pbXBvcnQgTG9naW5Gb3JtIGZyb20gJy4uL2NvbXBvbmVudHMvTG9naW5Gb3JtJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSG9tZVBhZ2UoKSB7XG4gIGNvbnN0IHRva2VuID0gdXNlU2VsZWN0b3IoKHsgc2VsZlF1aXpSZWR1Y2VyIH0pID0+IHNlbGZRdWl6UmVkdWNlci50b2tlbik7XG5cbiAgaWYgKHRva2VuKSB7XG4gICAgcmV0dXJuIDxNYWluUGFnZSAvPjtcbiAgfVxuXG4gIHJldHVybiA8TG9naW5Gb3JtIC8+O1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vQnV0dG9uJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBidXR0b246IHtcbiAgICB3aWR0aDogJzdyZW0nLFxuICAgIGhlaWdodDogJzNyZW0nLFxuICAgIGZvbnRTaXplOiAnMXJlbScsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGJhY2tncm91bmQ6ICdsaW5lYXItZ3JhZGllbnQoOTBkZWcsIzAwMDAwMCwjMjYzNDQzICknLFxuICAgIGJvcmRlcjogJ25vbmUnLFxuICAgIGJvcmRlclJhZGl1czogJzAuNnJlbScsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgbWFyZ2luOiAnMnJlbSAxcmVtJyxcbiAgICBib3hTaGFkb3c6ICcwIDAgOHB4IDBweCAjZmZmZmZmJyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFyY2hpdmVSZXR1cm5CdXR0b25Db250YWluZXIoKSB7XG4gIGNvbnN0IGhpc3RvcnkgPSB1c2VIaXN0b3J5KCk7XG5cbiAgY29uc3QgaGFuZGxlUmV0dXJuQnV0dG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgaGlzdG9yeS5wdXNoKCcvJyk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8QnV0dG9uXG4gICAgICB0aXRsZT1cIuuPjOyVhOqwgOq4sFwiXG4gICAgICBlbW90aW9uPXtzdHlsZXMuYnV0dG9ufVxuICAgICAgb25DbGljaz17aGFuZGxlUmV0dXJuQnV0dG9uQ2xpY2t9XG4gICAgLz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbGF5b3V0OiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBwYWRkaW5nOiAnMXJlbSAzcmVtJyxcbiAgICBib3hTaGFkb3c6ICcwIDAgN3B4IDFweCAjY2ZjZmNmJyxcbiAgICBib3JkZXJSYWRpdXM6ICcxcmVtJyxcbiAgICBtYXJnaW5Ub3A6ICcwLjVyZW0nLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICcmOmhvdmVyJzoge1xuICAgICAgYmFja2dyb3VuZDogJ2JsYWNrJyxcbiAgICB9LFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXJjaGl2ZVF1aXooeyBxdWVzdGlvbiwgb25DbGljayB9KSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBvbkNsaWNrPXtvbkNsaWNrfSBjc3M9e3N0eWxlcy5sYXlvdXR9PlxuICAgICAgPGRpdj5RLiB7cXVlc3Rpb259PC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHsgc2V0QXJjaGl2ZVF1aXpNb2RhbCwgc2V0T3ZlcmxheSB9IGZyb20gJy4uL3NsaWNlJztcblxuaW1wb3J0IHsgY29udmVydFRhZ3NUb1RhZ1N0cmluZyB9IGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQgQXJjaGl2ZVF1aXogZnJvbSAnLi9BcmNoaXZlUXVpeic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFyY2hpdmVRdWl6Q29udGFpbmVyKHsgcXVpeiB9KSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcblxuICBjb25zdCB7XG4gICAgcXVlc3Rpb24sIGFuc3dlciwgbGFzdFNvbHZlZCwgbGF5ZXIsIHRhZ3MsIF9pZCxcbiAgfSA9IHF1aXo7XG5cbiAgY29uc3QgaGFuZGxlUXVpekNsaWNrID0gKCkgPT4ge1xuICAgIGNvbnN0IHRhZ1N0cmluZyA9IGNvbnZlcnRUYWdzVG9UYWdTdHJpbmcodGFncyk7XG5cbiAgICBkaXNwYXRjaChzZXRBcmNoaXZlUXVpek1vZGFsKHtcbiAgICAgIHF1ZXN0aW9uLCBhbnN3ZXIsIGxhc3RTb2x2ZWQsIGxheWVyLCB0YWdTdHJpbmcsIF9pZCxcbiAgICB9KSk7XG4gICAgZGlzcGF0Y2goc2V0T3ZlcmxheSh0cnVlKSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8QXJjaGl2ZVF1aXpcbiAgICAgIHF1ZXN0aW9uPXtxdWVzdGlvbn1cbiAgICAgIG9uQ2xpY2s9e2hhbmRsZVF1aXpDbGlja31cbiAgICAvPlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCBUZXh0YXJlYSBmcm9tICcuL1RleHRhcmVhJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICB0ZXh0OiB7XG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIGZvbnRTaXplOiAnMS4zcmVtJyxcbiAgICBtYXJnaW5Ub3A6ICcxcmVtJyxcbiAgfSxcbiAgaW5wdXQ6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgZm9udFNpemU6ICcxcmVtJyxcbiAgICBwYWRkaW5nOiAnMC43cmVtJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBib3JkZXJSYWRpdXM6ICcwLjRyZW0nLFxuICAgIGJhY2tncm91bmQ6ICd3aGl0ZScsXG4gICAgYm9yZGVyOiAnbm9uZScsXG4gIH0sXG4gIGNvbnRhaW5lcjoge1xuICAgIHBhZGRpbmc6ICcycmVtJyxcbiAgfSxcbiAgdGFnOiB7XG4gICAgbWFyZ2luOiAnMXJlbSAwJyxcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFyY2hpdmVRdWl6TW9kYWxJbnB1dCgpIHtcbiAgY29uc3QgeyBhcmNoaXZlIH0gPSB1c2VTZWxlY3RvcigoeyBzZWxmUXVpelJlZHVjZXIgfSkgPT4gc2VsZlF1aXpSZWR1Y2VyLm1vZGFsKTtcbiAgY29uc3QgeyBxdWVzdGlvbiwgYW5zd2VyLCB0YWdTdHJpbmcgfSA9IGFyY2hpdmU7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdiBjc3M9e3N0eWxlcy50ZXh0fT7rrLjsoJw8L2Rpdj5cbiAgICAgIDxUZXh0YXJlYVxuICAgICAgICB2YWx1ZT17cXVlc3Rpb259XG4gICAgICAgIGVtb3Rpb249e3sgLi4uc3R5bGVzLmlucHV0LCBoZWlnaHQ6ICc3cmVtJyB9fVxuICAgICAgICBkaXNhYmxlZD1cImRpc2FibGVkXCJcbiAgICAgIC8+XG4gICAgICA8ZGl2IGNzcz17c3R5bGVzLnRleHR9PuygleuLtTwvZGl2PlxuICAgICAgPFRleHRhcmVhXG4gICAgICAgIHZhbHVlPXthbnN3ZXJ9XG4gICAgICAgIGVtb3Rpb249e3sgLi4uc3R5bGVzLmlucHV0LCBoZWlnaHQ6ICcxNnJlbScgfX1cbiAgICAgICAgZGlzYWJsZWQ9XCJkaXNhYmxlZFwiXG4gICAgICAvPlxuICAgICAgPGRpdiBjc3M9e3N0eWxlcy50YWd9Pnt0YWdTdHJpbmd9PC9kaXY+XG4gICAgPC8+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7IHBvcHVwTWVzc2FnZXMgfSBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHtcbiAgc2V0QXJjaGl2ZVF1aXpNb2RhbCwgc2V0T3ZlcmxheSwgcmVtb3ZlUXVpeiwgc2V0RWRpdHRpbmdNb2RhbCxcbn0gZnJvbSAnLi4vc2xpY2UnO1xuXG5pbXBvcnQgYXBpIGZyb20gJy4uL2FwaXMvYXBpJztcblxuaW1wb3J0IEJ1dHRvbiBmcm9tICcuL0J1dHRvbic7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgYnV0dG9uOiB7XG4gICAgd2lkdGg6ICc1MCUnLFxuICAgIGhlaWdodDogJzJyZW0nLFxuICAgIGJvcmRlcjogJ25vbmUnLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGZvbnRTaXplOiAnMXJlbScsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIGJvcmRlclJhZGl1czogJzAuNHJlbScsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcmNoaXZlUXVpek1vZGFsQnV0dG9uQ29udGFpbmVyKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHsgX2lkIH0gPSB1c2VTZWxlY3RvcigoeyBzZWxmUXVpelJlZHVjZXIgfSkgPT4gc2VsZlF1aXpSZWR1Y2VyLm1vZGFsLmFyY2hpdmUpO1xuXG4gIGNvbnN0IGhhbmRsZUVkaXRCdXR0b24gPSBhc3luYyAoKSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0RWRpdHRpbmdNb2RhbCh0cnVlKSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRGVsZXRlQnV0dG9uID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBhcGkuZGVsZXRlUXVpeihfaWQpO1xuXG4gICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICBhd2FpdCBwb3B1cE1lc3NhZ2VzLmZhaWwoJ+yCreygnO2VmOyngCDrqrvtlojsirXri4jri6QuIOuLpOyLnCDsi5zrj4TtlbTso7zshLjsmpQuJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXdhaXQgcG9wdXBNZXNzYWdlcy5zdWNjZXNzKCftlbTri7kg7YC07KaI66W8IOyCreygnO2VmOyYgOyKteuLiOuLpC4nKTtcbiAgICBkaXNwYXRjaChyZW1vdmVRdWl6KF9pZCkpO1xuICAgIGRpc3BhdGNoKHNldEFyY2hpdmVRdWl6TW9kYWwoe30pKTtcbiAgICBkaXNwYXRjaChzZXRPdmVybGF5KGZhbHNlKSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEJ1dHRvblxuICAgICAgICB0aXRsZT1cIuyImOyglVwiXG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZUVkaXRCdXR0b259XG4gICAgICAgIGVtb3Rpb249e3sgLi4uc3R5bGVzLmJ1dHRvbiwgYmFja2dyb3VuZDogJyMyNDRhNzInIH19XG4gICAgICAvPlxuICAgICAgPEJ1dHRvblxuICAgICAgICB0aXRsZT1cIuyCreygnFwiXG4gICAgICAgIG9uQ2xpY2s9e2hhbmRsZURlbGV0ZUJ1dHRvbn1cbiAgICAgICAgZW1vdGlvbj17eyAuLi5zdHlsZXMuYnV0dG9uLCBiYWNrZ3JvdW5kOiAnYmxhY2snIH19XG4gICAgICAvPlxuICAgIDwvPlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEFyY2hpdmVRdWl6TW9kYWxJbnB1dENvbnRhaW5lciBmcm9tICcuL0FyY2hpdmVRdWl6TW9kYWxJbnB1dENvbnRhaW5lcic7XG5pbXBvcnQgQXJjaGl2ZVF1aXpNb2RhbEJ1dHRvbkNvbnRhaW5lciBmcm9tICcuL0FyY2hpdmVRdWl6TW9kYWxCdXR0b25Db250YWluZXInO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGxheW91dDoge1xuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHRvcDogJzE1JScsXG4gICAgbGVmdDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIDApJyxcbiAgICB3aWR0aDogJzQwcmVtJyxcbiAgICBoZWlnaHQ6ICc0MHJlbScsXG4gICAgY29sb3I6ICdibGFjaycsXG4gICAgYmFja2dyb3VuZDogJ3doaXRlJyxcbiAgICBib3JkZXJSYWRpdXM6ICcwLjVyZW0nLFxuICB9LFxuICB0aXRsZToge1xuICAgIGZvbnRTaXplOiAnMS41cmVtJyxcbiAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgYmFja2dyb3VuZDogJyMyNDRhNzInLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIHBhZGRpbmc6ICcwLjRyZW0gMXJlbScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgYm9yZGVyUmFkaXVzOiAnMC41cmVtIDAuNXJlbSAwIDAnLFxuICB9LFxuICBjb250YWluZXI6IHtcbiAgICBwYWRkaW5nOiAnMnJlbScsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcmNoaXZlUXVpek1vZGFsKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY3NzPXtzdHlsZXMubGF5b3V0fT5cbiAgICAgIDxkaXYgY3NzPXtzdHlsZXMudGl0bGV9PlF1aXo8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtzdHlsZXMuY29udGFpbmVyfT5cbiAgICAgICAgPEFyY2hpdmVRdWl6TW9kYWxJbnB1dENvbnRhaW5lciAvPlxuICAgICAgICA8QXJjaGl2ZVF1aXpNb2RhbEJ1dHRvbkNvbnRhaW5lciAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7IHNldFF1aXpGb3JtIH0gZnJvbSAnLi4vc2xpY2UnO1xuXG5pbXBvcnQgVGV4dGFyZWEgZnJvbSAnLi9UZXh0YXJlYSc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgdGV4dDoge1xuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBmb250U2l6ZTogJzEuM3JlbScsXG4gICAgbWFyZ2luVG9wOiAnMXJlbScsXG4gIH0sXG4gIGlucHV0OiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGZvbnRTaXplOiAnMXJlbScsXG4gICAgcGFkZGluZzogJzAuN3JlbScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgYm9yZGVyUmFkaXVzOiAnMC40cmVtJyxcbiAgICBiYWNrZ3JvdW5kOiAnd2hpdGUnLFxuICB9LFxuICB0YWc6IHtcbiAgICBtYXJnaW46ICcwLjhyZW0gMCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICByZXNpemU6ICdub25lJyxcbiAgICBib3JkZXJSYWRpdXM6ICcwLjRyZW0nLFxuICAgIGhlaWdodDogJzEuNXJlbScsXG4gICAgcGFkZGluZzogJzAuMXJlbSAwLjRyZW0gMCAwLjRyZW0nLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXJjaGl2ZUVkaXRNb2RhbElucHV0Q29udGFpbmVyKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHF1aXpGb3JtID0gdXNlU2VsZWN0b3IoKHsgc2VsZlF1aXpSZWR1Y2VyIH0pID0+IHNlbGZRdWl6UmVkdWNlci5xdWl6Rm9ybSk7XG4gIGNvbnN0IHsgcXVlc3Rpb24sIGFuc3dlciwgdGFnU3RyaW5nIH0gPSBxdWl6Rm9ybTtcblxuICBjb25zdCBoYW5kbGVJbnB1dENoYW5nZSA9IChwcm9wTmFtZSkgPT4gKGUpID0+IHtcbiAgICBjb25zdCBmb3JtU3RhdGUgPSB7fTtcbiAgICBmb3JtU3RhdGVbcHJvcE5hbWVdID0gZS50YXJnZXQudmFsdWU7XG5cbiAgICBkaXNwYXRjaChzZXRRdWl6Rm9ybShmb3JtU3RhdGUpKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2IGNzcz17c3R5bGVzLnRleHR9PuusuOygnDwvZGl2PlxuICAgICAgPFRleHRhcmVhXG4gICAgICAgIHZhbHVlPXtxdWVzdGlvbn1cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUlucHV0Q2hhbmdlKCdxdWVzdGlvbicpfVxuICAgICAgICBlbW90aW9uPXt7IC4uLnN0eWxlcy5pbnB1dCwgaGVpZ2h0OiAnN3JlbScgfX1cbiAgICAgIC8+XG4gICAgICA8ZGl2IGNzcz17c3R5bGVzLnRleHR9PuygleuLtTwvZGl2PlxuICAgICAgPFRleHRhcmVhXG4gICAgICAgIHZhbHVlPXthbnN3ZXJ9XG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVJbnB1dENoYW5nZSgnYW5zd2VyJyl9XG4gICAgICAgIGVtb3Rpb249e3sgLi4uc3R5bGVzLmlucHV0LCBoZWlnaHQ6ICcxNnJlbScgfX1cbiAgICAgIC8+XG4gICAgICA8VGV4dGFyZWFcbiAgICAgICAgdmFsdWU9e3RhZ1N0cmluZ31cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUlucHV0Q2hhbmdlKCd0YWdTdHJpbmcnKX1cbiAgICAgICAgZW1vdGlvbj17c3R5bGVzLnRhZ31cbiAgICAgIC8+XG4gICAgPC8+XG4gICk7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7IHBvcHVwTWVzc2FnZXMsIGNvbnZlcnRUYWdTdHJpbmdUb1RhZ3MgfSBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHsgZWRpdFF1aXosIGNsb3NlQWxsTW9kYWwgfSBmcm9tICcuLi9zbGljZSc7XG5cbmltcG9ydCBhcGkgZnJvbSAnLi4vYXBpcy9hcGknO1xuXG5pbXBvcnQgQnV0dG9uIGZyb20gJy4vQnV0dG9uJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBidXR0b246IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzJyZW0nLFxuICAgIGJvcmRlcjogJ25vbmUnLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGZvbnRTaXplOiAnMXJlbScsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIGJvcmRlclJhZGl1czogJzAuNHJlbScsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcmNoaXZlRWRpdE1vZGFsQnV0dG9uQ29udGFpbmVyKCkge1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG4gIGNvbnN0IHsgbW9kYWwsIHF1aXpGb3JtIH0gPSB1c2VTZWxlY3RvcigoeyBzZWxmUXVpelJlZHVjZXIgfSkgPT4gc2VsZlF1aXpSZWR1Y2VyKTtcbiAgY29uc3QgeyBhcmNoaXZlIH0gPSBtb2RhbDtcbiAgY29uc3QgeyBxdWVzdGlvbiwgYW5zd2VyLCB0YWdTdHJpbmcgfSA9IHF1aXpGb3JtO1xuXG4gIGNvbnN0IHsgX2lkIH0gPSBhcmNoaXZlO1xuXG4gIGNvbnN0IGhhbmRsZUVkaXRCdXR0b24gPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdGFncyA9IGNvbnZlcnRUYWdTdHJpbmdUb1RhZ3ModGFnU3RyaW5nKTtcbiAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgYXBpLmVkaXRRdWl6KF9pZCwgcXVlc3Rpb24sIGFuc3dlciwgdGFncyk7XG5cbiAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgIGF3YWl0IHBvcHVwTWVzc2FnZXMuZmFpbCgn7IiY7KCV7ZWY7KeAIOuqu+2WiOyKteuLiOuLpC4g64uk7IucIOyLnOuPhO2VtOyjvOyEuOyalC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBhd2FpdCBwb3B1cE1lc3NhZ2VzLnN1Y2Nlc3MoJ+2VtOuLuSDtgLTspojrpbwg7IiY7KCV7ZWY7JiA7Iq164uI64ukLicpO1xuICAgIGRpc3BhdGNoKGNsb3NlQWxsTW9kYWwoKSk7XG4gICAgZGlzcGF0Y2goZWRpdFF1aXooe1xuICAgICAgX2lkLCBxdWVzdGlvbiwgYW5zd2VyLCB0YWdTdHJpbmcsXG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEJ1dHRvblxuICAgICAgdGl0bGU9XCLsiJjsoJVcIlxuICAgICAgZW1vdGlvbj17eyAuLi5zdHlsZXMuYnV0dG9uLCBiYWNrZ3JvdW5kOiAnIzI0NGE3MicgfX1cbiAgICAgIG9uQ2xpY2s9e2hhbmRsZUVkaXRCdXR0b259XG4gICAgLz5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHsgc2V0UXVpekZvcm0gfSBmcm9tICcuLi9zbGljZSc7XG5cbmltcG9ydCBBcmNoaXZlRWRpdE1vZGFsSW5wdXRDb250YWluZXIgZnJvbSAnLi9BcmNoaXZlRWRpdE1vZGFsSW5wdXRDb250YWluZXInO1xuaW1wb3J0IEFyY2hpdmVFZGl0TW9kYWxCdXR0b25Db250YWluZXIgZnJvbSAnLi9BcmNoaXZlRWRpdE1vZGFsQnV0dG9uQ29udGFpbmVyJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBsYXlvdXQ6IHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICB0b3A6ICcxNSUnLFxuICAgIGxlZnQ6ICc1MCUnLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCAwKScsXG4gICAgd2lkdGg6ICc0MHJlbScsXG4gICAgaGVpZ2h0OiAnNDByZW0nLFxuICAgIGNvbG9yOiAnYmxhY2snLFxuICAgIGJhY2tncm91bmQ6ICd3aGl0ZScsXG4gICAgYm9yZGVyUmFkaXVzOiAnMC41cmVtJyxcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogJzEuNXJlbScsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIGJhY2tncm91bmQ6ICcjMjQ0YTcyJyxcbiAgICBjb2xvcjogJ3doaXRlJyxcbiAgICBwYWRkaW5nOiAnMC40cmVtIDFyZW0nLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGJvcmRlclJhZGl1czogJzAuNXJlbSAwLjVyZW0gMCAwJyxcbiAgfSxcbiAgY29udGFpbmVyOiB7XG4gICAgcGFkZGluZzogJzJyZW0nLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXJjaGl2ZUVkaXRNb2RhbCgpIHtcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xuICBjb25zdCB7IGFyY2hpdmUgfSA9IHVzZVNlbGVjdG9yKCh7IHNlbGZRdWl6UmVkdWNlciB9KSA9PiBzZWxmUXVpelJlZHVjZXIubW9kYWwpO1xuICBjb25zdCB7IHF1ZXN0aW9uLCBhbnN3ZXIsIHRhZ1N0cmluZyB9ID0gYXJjaGl2ZTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRpc3BhdGNoKHNldFF1aXpGb3JtKHsgcXVlc3Rpb24sIGFuc3dlciwgdGFnU3RyaW5nIH0pKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3N0eWxlcy5sYXlvdXR9PlxuICAgICAgPGRpdiBjc3M9e3N0eWxlcy50aXRsZX0+UXVpejwvZGl2PlxuICAgICAgPGRpdiBjc3M9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgICA8QXJjaGl2ZUVkaXRNb2RhbElucHV0Q29udGFpbmVyIC8+XG4gICAgICAgIDxBcmNoaXZlRWRpdE1vZGFsQnV0dG9uQ29udGFpbmVyIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgQXJjaGl2ZVJldHVybkJ1dHRvbkNvbnRhaW5lciBmcm9tICcuL0FyY2hpdmVSZXR1cm5CdXR0b25Db250YWluZXInO1xuaW1wb3J0IEFyY2hpdmVRdWl6Q29udGFpbmVyIGZyb20gJy4vQXJjaGl2ZVF1aXpDb250YWluZXInO1xuaW1wb3J0IEFyY2hpdmVRdWl6TW9kYWwgZnJvbSAnLi9BcmNoaXZlUXVpek1vZGFsJztcbmltcG9ydCBBcmNoaXZlRWRpdE1vZGFsIGZyb20gJy4vQXJjaGl2ZUVkaXRNb2RhbCc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgYm9keToge1xuICAgIGJhY2tncm91bmQ6ICdsaW5lYXItZ3JhZGllbnQoOTBkZWcsICMxMTFkMmEsICMyOTU1ODIgKScsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgfSxcbiAgbGF5b3V0OiB7XG4gICAgZGlzcGxheTogJ3RhYmxlJyxcbiAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgIHBhZGRpbmc6ICcwIDAgMTByZW0gMCcsXG4gICAgd2lkdGg6ICc1MHJlbScsXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZm9udFNpemU6ICcycmVtJyxcbiAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgY29sb3I6ICd3aGl0ZScsXG4gICAgbWFyZ2luOiAnM3JlbSAwJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXJjaGl2ZSgpIHtcbiAgY29uc3QgeyBxdWl6emVzLCBtb2RhbCB9ID0gdXNlU2VsZWN0b3IoKHsgc2VsZlF1aXpSZWR1Y2VyIH0pID0+IHNlbGZRdWl6UmVkdWNlcik7XG4gIGNvbnN0IHsgYXJjaGl2ZSwgZWRpdHRpbmcgfSA9IG1vZGFsO1xuICBjb25zdCBpc0FyY2hpdmVGaWxsZWQgPSBPYmplY3Qua2V5cyhhcmNoaXZlKS5sZW5ndGggPiAwO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjc3M9e3N0eWxlcy5ib2R5fT5cbiAgICAgIDxBcmNoaXZlUmV0dXJuQnV0dG9uQ29udGFpbmVyIC8+XG4gICAgICB7aXNBcmNoaXZlRmlsbGVkICYmIDxBcmNoaXZlUXVpek1vZGFsIC8+fVxuICAgICAge2VkaXR0aW5nICYmIDxBcmNoaXZlRWRpdE1vZGFsIC8+fVxuICAgICAgPGRpdiBjc3M9e3N0eWxlcy5sYXlvdXR9PlxuICAgICAgICA8ZGl2IGNzcz17c3R5bGVzLnRpdGxlfT7slYTsubTsnbTruIw8L2Rpdj5cbiAgICAgICAge3F1aXp6ZXMubWFwKChxdWl6KSA9PiAoXG4gICAgICAgICAgPGRpdiBrZXk9e3F1aXouX2lkfT5cbiAgICAgICAgICAgIDxBcmNoaXZlUXVpekNvbnRhaW5lciBxdWl6PXtxdWl6fSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgQXJjaGl2ZSBmcm9tICcuLi9jb21wb25lbnRzL0FyY2hpdmUnO1xuXG5pbXBvcnQgeyBsb2FkUXVpenplcyB9IGZyb20gJy4uL3NsaWNlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXJjaGl2ZVBhZ2UoKSB7XG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcbiAgY29uc3QgcXVpenplcyA9IHVzZVNlbGVjdG9yKCh7IHNlbGZRdWl6UmVkdWNlciB9KSA9PiBzZWxmUXVpelJlZHVjZXIucXVpenplcyk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocXVpenplcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRpc3BhdGNoKGxvYWRRdWl6emVzKCkpO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIHJldHVybiA8QXJjaGl2ZSAvPjtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3REb20gZnJvbSAncmVhY3QtZG9tJztcblxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgc3RvcmUgZnJvbSAnLi9zdG9yZSc7XG5cbmltcG9ydCAnLi9zdHlsZXMvcmVzZXQuY3NzJztcblxuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5cblJlYWN0RG9tLnJlbmRlcihcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPEFwcCAvPlxuICA8L1Byb3ZpZGVyPixcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpLFxuKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQge1xuICBCcm93c2VyUm91dGVyIGFzIFJvdXRlcixcbiAgU3dpdGNoLFxuICBSb3V0ZSxcbn0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmltcG9ydCBPdmVybGF5IGZyb20gJy4vcGFnZXMvT3ZlcmxheSc7XG5pbXBvcnQgSG9tZVBhZ2UgZnJvbSAnLi9wYWdlcy9Ib21lUGFnZSc7XG5pbXBvcnQgQXJjaGl2ZVBhZ2UgZnJvbSAnLi9wYWdlcy9BcmNoaXZlUGFnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEFwcCgpIHtcbiAgY29uc3QgeyBvdmVybGF5IH0gPSB1c2VTZWxlY3RvcigoeyBzZWxmUXVpelJlZHVjZXIgfSkgPT4gc2VsZlF1aXpSZWR1Y2VyLm1vZGFsKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7b3ZlcmxheSAmJiA8T3ZlcmxheSAvPn1cbiAgICAgIDxSb3V0ZXI+XG4gICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCI+XG4gICAgICAgICAgICA8SG9tZVBhZ2UgLz5cbiAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2FyY2hpdmVcIj5cbiAgICAgICAgICAgIDxBcmNoaXZlUGFnZSAvPlxuICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgIDwvU3dpdGNoPlxuICAgICAgPC9Sb3V0ZXI+XG4gICAgPC8+XG4gICk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9